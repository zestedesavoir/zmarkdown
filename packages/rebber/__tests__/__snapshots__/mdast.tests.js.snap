// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rebber: remark specs amps-and-angles-encoding: amps-and-angles-encoding 1`] = `
"AT\\\\&T has an ampersand in their name.



AT\\\\&T is another way to write it.



This \\\\& that.



4 < 5.



6 > 5.



Here's a \\\\hyperref[1]{link} with an ampersand in the URL.



Here's a link with an amersand in the link text: \\\\hyperref[2]{AT\\\\&T}.



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



\\\\footnote{\\\\label{1}\\\\externalLink{http://example.com/?foo=1\\\\&bar=2}{http://example.com/?foo=1\\\\&bar=2}}

\\\\footnote{\\\\label{2}\\\\externalLink{http://att.com/}{http://att.com/}}"
`;

exports[`rebber: remark specs auto-link: auto-link 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



With an ampersand: \\\\externalLink{http://example.com/?foo=1\\\\&bar=2}{http://example.com/?foo=1\\\\&bar=2}



\\\\begin{itemize}
\\\\item\\\\relax In a list?
\\\\item\\\\relax \\\\externalLink{http://example.com/}{http://example.com/}
\\\\item\\\\relax It should.
\\\\end{itemize}


\\\\begin{Quotation}
Blockquoted: \\\\externalLink{http://example.com/}{http://example.com/}
\\\\end{Quotation}



Auto-links should not occur here: \\\\texttt{<http://example.com/>}



\\\\begin{CodeBlock}{text}
or here: <http://example.com/>
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs auto-link-invalid: auto-link-invalid 1`] = `
"<http:/



<https:/



<mailto:foobarbaz>



<http:/google



<foo@"
`;

exports[`rebber: remark specs auto-link-lines: auto-link-lines 1`] = `
"hello world
\\\\externalLink{http://example.com}{http://example.com}



hello world
\\\\externalLink{somename@example.com}{mailto:somename@example.com}"
`;

exports[`rebber: remark specs auto-link-output: auto-link-output 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link without protocol, which should not render as an auto-link
because they are easily mistaken for HTML: \\\\externalLink{google.com}{google.com}."
`;

exports[`rebber: remark specs auto-link-url: auto-link-url 1`] = `
"This should be a link: \\\\externalLink{http://example.com/hello-world}{http://example.com/hello-world}.



Also, subdomain should be a part of the link (\\\\externalLink{http://foo.example.com/(hello[world])}{http://foo.example.com/(hello[world])}).



So should this: \\\\externalLink{foo@bar.com}{mailto:foo@bar.com}."
`;

exports[`rebber: remark specs auto-link-url-invalid: auto-link-url-invalid 1`] = `
"http://<example



https:// foo bar baz.



mailto:.



http://,



https://:



mailto:;



http://\\"



https://'



mailto:)



http://]"
`;

exports[`rebber: remark specs backslash-escapes: backslash-escapes 1`] = `
"These should all get escaped:



Backslash: \\\\textbackslash{}



Backtick: \`



Asterisk: *



Underscore: \\\\_



Left brace: \\\\{



Right brace: \\\\}



Left bracket: [



Right bracket: ]



Left paren: (



Right paren: )



Greater-than: >



Hash: \\\\#



Period: .



Bang: !



Plus: +



Minus: -



\\\\textbf{GFM:}



Pipe: |



Tilde: \\\\textasciitilde{}



\\\\textbf{Commonmark:}



Quote: \\\\textbackslash{}\\"



Dollar: \\\\textbackslash{}\\\\$



Percentage: \\\\textbackslash{}\\\\%



Ampersand: \\\\textbackslash{}\\\\&



Single quote: \\\\textbackslash{}'



Comma: \\\\textbackslash{},



Forward slash: \\\\textbackslash{}/



Colon: \\\\textbackslash{}:



Semicolon: \\\\textbackslash{};



Less-than: \\\\textbackslash{}<



Equals: \\\\textbackslash{}=



Question mark: \\\\textbackslash{}?



At-sign: \\\\textbackslash{}@



Caret: \\\\textbackslash{}\\\\textasciicircum{}



New line: \\\\textbackslash{}
only works in paragraphs.



These should not, because they occur within a code block:



\\\\begin{CodeBlock}{text}
Backslash: \\\\\\\\

Backtick: \\\\\`

Asterisk: \\\\*

Underscore: \\\\_

Left brace: \\\\{

Right brace: \\\\}

Left bracket: \\\\[

Right bracket: \\\\]

Left paren: \\\\(

Right paren: \\\\)

Greater-than: \\\\>

Hash: \\\\#

Period: \\\\.

Bang: \\\\!

Plus: \\\\+

Minus: \\\\-
\\\\end{CodeBlock}



\\\\textbf{GFM:}



\\\\begin{CodeBlock}{text}
Pipe: \\\\|

Tilde: \\\\~
\\\\end{CodeBlock}



\\\\textbf{Commonmark:}



\\\\begin{CodeBlock}{text}
Quote: \\\\\\"

Dollar: \\\\$

Percentage: \\\\%

Ampersand: \\\\&

Single quote: \\\\'

Comma: \\\\,

Forward slash: \\\\/

Colon: \\\\:

Semicolon: \\\\;

Less-than: \\\\<

Equals: \\\\=

Question mark: \\\\?

At-sign: \\\\@

Caret: \\\\^

New line: \\\\
only works in paragraphs.
\\\\end{CodeBlock}



Nor should these, which occur in code spans:



Backslash: \\\\texttt{\\\\textbackslash{}\\\\textbackslash{}}



Backtick: \\\\texttt{\\\\textbackslash{}\`}



Asterisk: \\\\texttt{\\\\textbackslash{}*}



Underscore: \\\\texttt{\\\\textbackslash{}\\\\_}



Left brace: \\\\texttt{\\\\textbackslash{}\\\\{}



Right brace: \\\\texttt{\\\\textbackslash{}\\\\}}



Left bracket: \\\\texttt{\\\\textbackslash{}[}



Right bracket: \\\\texttt{\\\\textbackslash{}]}



Left paren: \\\\texttt{\\\\textbackslash{}(}



Right paren: \\\\texttt{\\\\textbackslash{})}



Greater-than: \\\\texttt{\\\\textbackslash{}>}



Hash: \\\\texttt{\\\\textbackslash{}\\\\#}



Period: \\\\texttt{\\\\textbackslash{}.}



Bang: \\\\texttt{\\\\textbackslash{}!}



Plus: \\\\texttt{\\\\textbackslash{}+}



Minus: \\\\texttt{\\\\textbackslash{}-}



\\\\textbf{GFM:}



Pipe: \\\\texttt{\\\\textbackslash{}|}



Tilde: \\\\texttt{\\\\textbackslash{}\\\\textasciitilde{}}



\\\\textbf{Commonmark:}



Quote: \\\\texttt{\\\\textbackslash{}\\"}



Dollar: \\\\texttt{\\\\textbackslash{}\\\\$}



Percentage: \\\\texttt{\\\\textbackslash{}\\\\%}



Ampersand: \\\\texttt{\\\\textbackslash{}\\\\&}



Single quote: \\\\texttt{\\\\textbackslash{}'}



Comma: \\\\texttt{\\\\textbackslash{},}



Forward slash: \\\\texttt{\\\\textbackslash{}/}



Colon: \\\\texttt{\\\\textbackslash{}:}



Semicolon: \\\\texttt{\\\\textbackslash{};}



Less-than: \\\\texttt{\\\\textbackslash{}<}



Equals: \\\\texttt{\\\\textbackslash{}=}



Question mark: \\\\texttt{\\\\textbackslash{}?}



At-sign: \\\\texttt{\\\\textbackslash{}@}



Caret: \\\\texttt{\\\\textbackslash{}\\\\textasciicircum{}}



New line: \\\\texttt{\\\\textbackslash{} } only works in paragraphs.



These should get escaped, even though they're matching pairs for
other Markdown constructs:



*asterisks*



\\\\_underscores\\\\_



\`backticks\`



This is a code span with a literal backslash-backtick sequence: \\\\texttt{\\\\textbackslash{}\`}



This is a tag with unescaped backticks <span attr='\`ticks\`'>bar</span>.



This is a tag with backslashes <span attr='\\\\\\\\backslashes\\\\\\\\'>bar</span>."
`;

exports[`rebber: remark specs block-elements: block-elements 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Different lists should receive two newline characters
between them.
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax This is another list.
\\\\end{itemize}


\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax The same goes for lists in block quotes.
\\\\end{itemize}
\\\\begin{itemize}
\\\\item\\\\relax This is another list.
\\\\end{itemize}
\\\\end{Quotation}



\\\\begin{itemize}
\\\\item\\\\relax And for lists in lists:

\\\\begin{enumerate}
\\\\item\\\\relax First sublist.
\\\\end{enumerate}
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
1.   Second sublist.
\\\\end{CodeBlock}



And for lists followed by indented code blocks:



\\\\begin{itemize}
\\\\item\\\\relax This is a paragraph in a list
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
And this is code();
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs blockquote-indented: blockquote-indented 1`] = `
"\\\\begin{Quotation}
bar
baz
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquote-lazy-code: blockquote-lazy-code 1`] = `
"\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
foo
bar
\\\\end{CodeBlock}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquote-lazy-fence: blockquote-lazy-fence 1`] = `
"\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
aNormalCodeBlockInABlockqoute();
\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
thisIsAlsoSomeCodeInABlockquote();
\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
aNonTerminatedCodeBlockInABlockquote();
\\\\end{CodeBlock}

aNewCodeBlockFollowingTheBlockQuote();

\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
Something in a blockquote.

\\\\begin{CodeBlock}{text}
aNewCodeBlock();
\\\\end{CodeBlock}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquote-lazy-list: blockquote-lazy-list 1`] = `
"\\\\begin{Quotation}
This is a blockquote.

\\\\begin{itemize}
\\\\item\\\\relax And in normal mode this is an internal list, but in commonmark this is a top level list.
\\\\end{itemize}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquote-lazy-rule: blockquote-lazy-rule 1`] = `
"\\\\begin{Quotation}
This is a blockquote. Followed by a rule.

\\\\horizontalLine
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquote-list-item: blockquote-list-item 1`] = `
"This fails in markdown.pl and upskirt:



\\\\begin{itemize}
\\\\item\\\\relax hello

\\\\begin{Quotation}
world
\\\\end{Quotation}
\\\\end{itemize}"
`;

exports[`rebber: remark specs blockquotes: blockquotes 1`] = `
"\\\\begin{Quotation}
This is a blockquote.
\\\\end{Quotation}



\\\\begin{Quotation}
This is, in commonmark mode, another blockquote.
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquotes-empty-lines: blockquotes-empty-lines 1`] = `
"\\\\begin{Quotation}
Note there is no space on the following line.

Note there is no space on the preceding line.
\\\\end{Quotation}"
`;

exports[`rebber: remark specs blockquotes-with-code-blocks: blockquotes-with-code-blocks 1`] = `
"\\\\begin{Quotation}
Example:

\\\\begin{CodeBlock}{text}
sub status {
    print \\"working\\";
}
\\\\end{CodeBlock}

Or:

\\\\begin{CodeBlock}{text}
sub status {
    return \\"working\\";
}
\\\\end{CodeBlock}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs bom: bom 1`] = `
"\\\\part{Hello from a BOM}


Be careful when editing this file!"
`;

exports[`rebber: remark specs breaks-hard: breaks-hard 1`] = `
"These are not breaks:



Look at the
pretty line
breaks.



These are breaks:



Look at the \\\\\\\\
pretty line \\\\\\\\
breaks.



In \\\\texttt{commonmark: true} mode, an escaped newline character is exposed as a \\\\texttt{break} node:



Look at the\\\\textbackslash{}
pretty line\\\\textbackslash{}
breaks."
`;

exports[`rebber: remark specs case-insensitive-refs: case-insensitive-refs 1`] = `
"\\\\hyperref[hi]{hi}



\\\\footnote{\\\\label{hi}\\\\externalLink{/url}{/url}}"
`;

exports[`rebber: remark specs code-block: code-block 1`] = `
"Tildes:



\\\\begin{CodeBlock}{javascript}
alert('Hello World!');
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs code-block-escape: code-block-escape 1`] = `
"A little flaw:



\\\\begin{CodeBlock}{python}


\\\\end{CodeBlock}



An ingenuous flaw:



\\\\begin{CodeBlock}{text}

\\\\input{/etc/passwd}
\\\\begin{CodeBlock}{text}
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs code-block-indentation: code-block-indentation 1`] = `
"Fenced code blocks are normally not exdented, however,
when the initial fence is indented by spaces, the value of
the code is exdented by up to that amount of spaces.



\\\\begin{CodeBlock}{text}
    This is a code block...
        
    ...which is not exdented.
\\\\end{CodeBlock}



But...



\\\\begin{CodeBlock}{text}
  This one...
      
  ...is.
\\\\end{CodeBlock}



And...



\\\\begin{CodeBlock}{text}
So is this...
      
  ...one.
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs code-block-nesting-bug: code-block-nesting-bug 1`] = `
"GitHub, thus RedCarpet, has a bug where “nested” fenced code blocks,
even with shorter fences, can exit their actual “parent” block.



Note that this bug does not occur on indented code-blocks.



\\\\begin{CodeBlock}{foo}
\`\`\`bar
baz
\`\`\`
\\\\end{CodeBlock}



Even with a different fence marker:



\\\\begin{CodeBlock}{foo}
~~~bar
baz
~~~
\\\\end{CodeBlock}



And reversed:



\\\\begin{CodeBlock}{foo}
~~~bar
baz
~~~
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{foo}
\`\`\`bar
baz
\`\`\`
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs code-blocks: code-blocks 1`] = `
"code block on the first line



Regular text.



\\\\begin{CodeBlock}{text}
code block indented by spaces
\\\\end{CodeBlock}



Regular text.



\\\\begin{CodeBlock}{text}
the lines in this block  
all contain trailing spaces  
\\\\end{CodeBlock}



Regular Text.



\\\\begin{CodeBlock}{text}
code block on the last line
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs code-spans: code-spans 1`] = `
"\\\\texttt{<test a=\\"} content of attribute \\\\texttt{\\">}



Fix for backticks within HTML tag: <span attr='\`ticks\`'>like this</span>



Here's how you put \\\\texttt{\`backticks\`} in a code span.



Additionally, empty code spans are NOT supported: \`\`.



Here’s an example, \\\\texttt{foo \` bar }.



And here, \\\\texttt{\`\`}.



\\\\texttt{// this is also inline code}



So is this \\\\texttt{foo bar baz}.



And this \\\\texttt{foo \`\` bar}



And \\\\texttt{this\\\\textbackslash{}}but this is text\`."
`;

exports[`rebber: remark specs def-blocks: def-blocks 1`] = `
"\\\\begin{Quotation}
hello

\\\\footnote{\\\\label{1}\\\\externalLink{hello}{hello}}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
hello
\\\\end{Quotation}



\\\\footnote{\\\\label{2}\\\\externalLink{hello}{hello}}

\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax \\\\footnote{\\\\label{3}\\\\externalLink{hello}{hello}}
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\end{itemize}


\\\\footnote{\\\\label{4}\\\\externalLink{hello}{hello}}

\\\\begin{Quotation}
foo
bar
\\\\end{Quotation}



\\\\footnote{\\\\label{1-1}\\\\externalLink{foo}{foo}}

\\\\begin{Quotation}
bar
\\\\end{Quotation}"
`;

exports[`rebber: remark specs definition-newline: definition-newline 1`] = `
"\\\\hyperref[baz]{baz}: /url (
)



[foo]: /url \\"
\\"



[bar]: /url '
'



\\\\footnote{\\\\label{baz}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{baz-1}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{baz-1-1}\\\\externalLink{/url}{/url}}

\\\\hyperref[baz]{baz}: /url 'foo"
`;

exports[`rebber: remark specs definition-unclosed: definition-unclosed 1`] = `
"[foo]:



\\\\footnote{\\\\label{bar}\\\\externalLink{</url}{</url}}

[foo]:"
`;

exports[`rebber: remark specs definition-unclosed-attribute: definition-unclosed-attribute 1`] = `
"[baz]: /url (there



[foo]: /url \\"there



[bar]: /url 'there



[baz]: url (



[foo]: url \\"



[bar]: /url '



[baz]: <url>(



[foo]: <url>\\"



[bar]: <url>'"
`;

exports[`rebber: remark specs deletion: deletion 1`] = `"hello \\\\sout{hi} world"`;

exports[`rebber: remark specs double-link: double-link 1`] = `
"<p>Already linked: <a href=\\"http://example.com/\\">http://example.com/</a>.</p>

Already linked: \\\\externalLink{http://example.com/}{http://example.com/}.



Already linked: <a href=\\"http://example.com/\\">\\\\textbf{http://example.com/}</a>."
`;

exports[`rebber: remark specs emphasis: emphasis 1`] = `
"\\\\textit{emphasis}.



\\\\textbf{strong}."
`;

exports[`rebber: remark specs emphasis-empty: emphasis-empty 1`] = `
"Hello ** ** world.



Hello \\\\_\\\\_	\\\\_\\\\_ world.



Hello *	* world.



Hello \\\\_	\\\\_ world."
`;

exports[`rebber: remark specs emphasis-escaped-final-marker: emphasis-escaped-final-marker 1`] = `
"*bar*



**bar**



\\\\_bar\\\\_



\\\\_\\\\_bar\\\\_\\\\_"
`;

exports[`rebber: remark specs emphasis-internal: emphasis-internal 1`] = `"These words should\\\\_not\\\\_be\\\\_emphasized."`;

exports[`rebber: remark specs empty: empty 1`] = `""`;

exports[`rebber: remark specs entities: entities 1`] = `
"Lots of entities are supported in mdast:  , \\\\&, ©, Æ,
Ď, ¾, ℋ, ⅆ,
∲, \\\\&c.  Even some entities with a missing
terminal semicolon are parsed correctly (as per the HTML5 spec):
ÿ, á, ©, and \\\\&.



However, \\\\&MadeUpEntities; are kept in the document.



Entities even work in the language flag of fenced code blocks:



\\\\begin{CodeBlock}{some—language}
alert('Hello');
\\\\end{CodeBlock}



Or in \\\\externalLink{línks}{\\\\textasciitilde{}/some—file}



Or in \\\\includegraphics{~/an–image.png}



But, entities are not interpreted in \\\\texttt{inline c\\\\&ouml;de}, or in
code blocks:



\\\\begin{CodeBlock}{text}
C&Ouml;DE block.
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs entities-advanced: entities-advanced 1`] = `
"\\\\begin{Quotation}
However, \\\\&MadeUpEntities; are kept in the document.
\\\\end{Quotation}



\\\\begin{Quotation}
Entities even work in the language flag of fenced code blocks:
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\begin{CodeBlock}{some©language}
alert('Hello');
\\\\end{CodeBlock}
\\\\end{Quotation}



\\\\begin{Quotation}
And in an auto-link: \\\\externalLink{http://example©xample.com}{http://example\\\\&copyxample.com}
\\\\end{Quotation}



\\\\begin{Quotation}
Foo and bar and http://example©xample.com and baz.
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\externalLink{l©nks}{\\\\textasciitilde{}/some\\\\&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\externalLink{l©lnks}{\\\\textasciitilde{}/some\\\\&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\includegraphics{~/some&copyfile}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
Or in \\\\includegraphics{~/some&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\includegraphics{undefined}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\footnote{\\\\label{1}\\\\externalLink{http://example\\\\&copyxample.com}{http://example\\\\&copyxample.com}}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\footnote{\\\\label{ 1 }\\\\externalLink{http://example\\\\&copyxample.com}{http://example\\\\&copyxample.com}}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
But, entities are not interpreted in \\\\texttt{inline c\\\\&oumlde}, or in
code blocks:
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
C&OumlDE block.
\\\\end{CodeBlock}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs escaped-angles: escaped-angles 1`] = `">"`;

exports[`rebber: remark specs fenced-code: fenced-code 1`] = `
"\\\\begin{CodeBlock}{js}
var a = 'hello';
console.log(a + ' world');
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{bash}
echo \\"hello, \${WORLD}\\"
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{longfence}
Q: What do you call a tall person who sells stolen goods?
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{ManyTildes}
A longfence!
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs fenced-code-empty: fenced-code-empty 1`] = `
"Normal with language tag:



\\\\begin{CodeBlock}{js}

\\\\end{CodeBlock}



With white space:



\\\\begin{CodeBlock}{bash}

\\\\end{CodeBlock}



With very long fences:



\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}



With nothing:



\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs fenced-code-trailing-characters: fenced-code-trailing-characters 1`] = `
"\\\\begin{CodeBlock}{js}
foo();
\`\`\`bash
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs fenced-code-trailing-characters-2: fenced-code-trailing-characters-2 1`] = `
"\\\\begin{CodeBlock}{text}
\`\`\` aaa
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs fenced-code-white-space-after-flag: fenced-code-white-space-after-flag 1`] = `
"\\\\begin{CodeBlock}{js}
foo();
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{bash}
echo \\"hello, \${WORLD}\\"
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs hard-wrapped-paragraphs-with-list-like-lines: hard-wrapped-paragraphs-with-list-like-lines 1`] = `
"In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.
Because a hard-wrapped line in the
123. middle of a paragraph looked like a
list item.



Here's one with a bullet.



\\\\begin{itemize}
\\\\item\\\\relax criminey.
\\\\end{itemize}


Non-GFM does not create a list for either.
GFM does not create a list for \\\\texttt{8.}, but does for \\\\texttt{*}.
CommonMark creates a list for both.
All versions create lists for the following.



\\\\begin{itemize}
\\\\item\\\\relax Here's one with a bullet.

\\\\begin{itemize}
\\\\item\\\\relax criminey.
\\\\end{itemize}
\\\\end{itemize}


...and the following:



\\\\begin{enumerate}
\\\\item\\\\relax In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.
\\\\end{enumerate}"
`;

exports[`rebber: remark specs heading: heading 1`] = `
"\\\\part{Heading 1}


\\\\chapter{Heading 2}


\\\\section{Heading 4}


\\\\subsection{Heading 4}


\\\\subsubsection{Heading 5}


\\\\paragraph{Heading 6}"
`;

exports[`rebber: remark specs heading-atx-closed-trailing-white-space: heading-atx-closed-trailing-white-space 1`] = `
"\\\\part{Foo}


\\\\chapter{Bar}"
`;

exports[`rebber: remark specs heading-atx-empty: heading-atx-empty 1`] = `
"\\\\part{}


\\\\chapter{}


\\\\section{}


\\\\subsection{}


\\\\subsubsection{}


\\\\paragraph{}"
`;

exports[`rebber: remark specs heading-in-blockquote: heading-in-blockquote 1`] = `
"\\\\begin{Quotation}
A blockquote
with some more text.
\\\\end{Quotation}



A normal paragraph.



\\\\begin{Quotation}
\\\\chapter{A blockquote followed by a horizontal rule (in CommonMark).}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\chapter{A heading in a blockquote}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs heading-in-paragraph: heading-in-paragraph 1`] = `
"Hello



\\\\part{World}"
`;

exports[`rebber: remark specs heading-not-atx: heading-not-atx 1`] = `
"\\\\#This is not a heading, per CommonMark: \\\\externalLink{http://spec.commonmark.org/0.17/\\\\#example-25}{http://spec.commonmark.org/0.17/\\\\#example-25}



Kramdown (GitHub) neither supports unspaced ATX-headings.



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h7?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h8?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h9?



More than six \\\\# characters is not a heading: \\\\externalLink{http://spec.commonmark.org/0.26/\\\\#example-33}{http://spec.commonmark.org/0.26/\\\\#example-33}"
`;

exports[`rebber: remark specs heading-setext-with-initial-spacing: heading-setext-with-initial-spacing 1`] = `
"\\\\part{Heading 1}


\\\\chapter{Heading 2}


Both these headings caused positional problems in on commit daa344c and before."
`;

exports[`rebber: remark specs horizontal-rules: horizontal-rules 1`] = `
"Dashes:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
---
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
- - -
\\\\end{CodeBlock}



Asterisks:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
* * *
\\\\end{CodeBlock}



Underscores:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
___
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
_ _ _
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs horizontal-rules-adjacent: horizontal-rules-adjacent 1`] = `
"\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



The three asterisks are not a Setext header.



This is a paragraph.



\\\\horizontalLine



This is another paragraph.



\\\\horizontalLine



\\\\chapter{But this is a secondary heading.}


\\\\horizontalLine"
`;

exports[`rebber: remark specs hr: hr 1`] = `"\\\\horizontalLine"`;

exports[`rebber: remark specs hr-list-break: hr-list-break 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\item\\\\relax how are
\\\\end{itemize}


\\\\horizontalLine



you today?



The above asterisks do split the list, but the below ones do not.



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\item\\\\relax how are
\\\\item\\\\relax \\\\horizontalLine

you today?
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax Neither do these
\\\\item\\\\relax how are
\\\\item\\\\relax \\\\begin{itemize}
\\\\item\\\\relax \\\\begin{itemize}
\\\\item\\\\relax you today?
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax But these do
\\\\item\\\\relax how are
\\\\end{itemize}


\\\\horizontalLine



you today?"
`;

exports[`rebber: remark specs html-advanced: html-advanced 1`] = `
"Simple block on one line:



<div>foo</div>

And nested without indentation:



<div>
<div>
<div>
foo
</div>
<div style=\\">\\"/>
</div>
<div>bar</div>
</div>"
`;

exports[`rebber: remark specs html-attributes: html-attributes 1`] = `
"\\\\part{Block-level}


<article foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<article foo>

<article>

<article :foo:bar:09:=\\"baz\\">

<article foo.bar_09->

<article foo.bar_09-   >

<article foo.bar_09-   />

<div baz
qux

\\\\part{Inline}


<span foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<span foo>

<span>

<span :foo:bar:09:=\\"baz\\">

<span foo.bar_09->

<span foo.bar_09-   >

<span foo.bar_09-   />

<span this is
invalid"
`;

exports[`rebber: remark specs html-cdata: html-cdata 1`] = `
"<![CDATA[
fooBarBaz()
]]>

foo <![CDATA[bar]]>"
`;

exports[`rebber: remark specs html-comments: html-comments 1`] = `
"Paragraph one.



<!-- This is a simple comment -->

<!--
	This is another comment.
-->

What follows is not an HTML comment because it contains
two consecutive dashes:
\\\\externalLink{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}.



<!-- one comment block -- -- with two comments -->

But this is fine (in commonmark):



<!-- one comment block - with a dash -->

And, this is wrong (in commonmark):



<!-->-->

The end."
`;

exports[`rebber: remark specs html-declaration: html-declaration 1`] = `
"<!DOCTYPE html>

foo <!BAR br BAZ>



<!doctype html>

<!valid >

<!invalid>"
`;

exports[`rebber: remark specs html-indented: html-indented 1`] = `
"<div>
  *hello*
   <div>

 <span>
  *hello*
   <span>

  <!doctype html>

   <!-- baz -->

alpha <!-- baz -->"
`;

exports[`rebber: remark specs html-processing-instruction: html-processing-instruction 1`] = `
"<?php
  echo '>';
?>"
`;

exports[`rebber: remark specs html-simple: html-simple 1`] = `
"Here's a simple block:



<div>
	foo
</div>

This should be a code block, though:



\\\\begin{CodeBlock}{text}
<div>
	foo
</div>
\\\\end{CodeBlock}



As should this:



\\\\begin{CodeBlock}{text}
<div>foo</div>
\\\\end{CodeBlock}



Now, nested:



<div>
	<div>
		<div>
			foo
		</div>
	</div>
</div>

This should just be an HTML comment:



<!-- Comment -->

Multiline:



<!--
Blah
Blah
-->

Code block:



\\\\begin{CodeBlock}{text}
<!-- Comment -->
\\\\end{CodeBlock}



Just plain comment, with trailing spaces on the line:



<!-- foo -->   

Code:



\\\\begin{CodeBlock}{text}
<hr>
\\\\end{CodeBlock}



Hr's:



<hr>

<hr>

<hr>

<hr>   

<hr>  

<hr> 

<hr class=\\"foo\\" id=\\"bar\\" />

<hr class=\\"foo\\" id=\\"bar\\"/>

<hr class=\\"foo\\" id=\\"bar\\" >"
`;

exports[`rebber: remark specs html-tags: html-tags 1`] = `
"\\\\part{Block}


<article>

<ARTICLE>

<ArTiClE>

<-article>



<article foo=

<article foo=\\"bar

<article foo='bar

<article foo=bar 

<article foo=bar >

<article/>

<-article/>



</article>

</ARTICLE>

</aRtIcLe>

</article  >

</-article  >



</article

</article  

\\\\part{Inline}


<span>

<SPAN>

<SpAn>

<-span>



<span/>

<-span/>



</span>

</SPAN>

</SpAn>

</span  >

</-span>



</span



</span



<span foo=



<span foo=\\"bar



<span foo='bar



<span foo=bar



<span foo=bar >"
`;

exports[`rebber: remark specs image-basename-dots: image-basename-dots 1`] = `
"\\\\includegraphics{{x.yz}.png}



\\\\includegraphics{/a/{w.x.y.z}.png}



\\\\includegraphics{/{w.x.y.z}.png}



\\\\includegraphics{/foo.bar/{x.yz}.png}"
`;

exports[`rebber: remark specs image-empty-alt: image-empty-alt 1`] = `"\\\\includegraphics{/xyz.png}"`;

exports[`rebber: remark specs image-in-link: image-in-link 1`] = `
"\\\\part{\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/unicorn-approved-ff69b4.svg}}{http://shields.io}}


\\\\externalLink{\\\\includegraphics{https://img.shields.io/travis/wooorm/mdast.svg?style=flat}}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/style-flat--squared-green.svg?style=flat-square}}{http://example.com}"
`;

exports[`rebber: remark specs image-path-escape: image-path-escape 1`] = `"\\\\includegraphics{a[b]\\\\ \\\\input{/etc/passwd\\\\image{[a](b)}"`;

exports[`rebber: remark specs image-with-pipe: image-with-pipe 1`] = `"f|"`;

exports[`rebber: remark specs images: images 1`] = `
"Lorem ipsum dolor sit \\\\includegraphics{http://amet.com/amet.jpeg}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\includegraphics{http://finibus.com/finibus.png} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\includegraphics{http://facilisi.com/facilisi.gif}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\includegraphics{http://faucibus.com/faucibus.tiff}."
`;

exports[`rebber: remark specs invalid-link-definition: invalid-link-definition 1`] = `"Something[2-3]"`;

exports[`rebber: remark specs lazy-blockquotes: lazy-blockquotes 1`] = `
"\\\\begin{Quotation}
hi there
bud
\\\\end{Quotation}"
`;

exports[`rebber: remark specs link-in-link: link-in-link 1`] = `
"\\\\part{\\\\externalLink{mailto:test@example.com}{http://shields.io}}


\\\\externalLink{https://travis-ci.org/wooorm/mdast}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{[](http://example.com \\"An example\\")}{http://example.com}"
`;

exports[`rebber: remark specs link-spaces: link-spaces 1`] = `
"[alpha] (bravo



\\\\includegraphics{undefined} (delta
.com)



[echo]	(\\\\externalLink{http://foxtrot.golf}{http://foxtrot.golf})



\\\\includegraphics{undefined}   (india.com/juliett)"
`;

exports[`rebber: remark specs link-whitespace: link-whitespace 1`] = `
"[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie>.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie."
`;

exports[`rebber: remark specs link-with-spaces: link-with-spaces 1`] = `
"\\\\externalLink{Hello}{./world and some spaces.html}



\\\\externalLink{Hello}{./world and some spaces.html}"
`;

exports[`rebber: remark specs links: links 1`] = `
"Lorem ipsum dolor sit \\\\externalLink{amet}{http://amet.com}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\externalLink{finibus}{http://finibus.com} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\externalLink{facilisi}{http://facilisi.com}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\externalLink{faucibus}{http://faucibus.com}."
`;

exports[`rebber: remark specs links-inline-style: links-inline-style 1`] = `
"Just a \\\\externalLink{URL}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



[URL and title]( /url/has space ).



[URL and title]( /url/has space/ \\"url has space and title\\").



."
`;

exports[`rebber: remark specs links-reference-proto: links-reference-proto 1`] = `
"A \\\\hyperref[tostring]{primary}, \\\\hyperref[constructor]{secondary}, and \\\\hyperref[__proto__]{tertiary} link.



\\\\footnote{\\\\label{tostring}\\\\externalLink{http://primary.com}{http://primary.com}}

\\\\footnote{\\\\label{__proto__}\\\\externalLink{http://tertiary.com}{http://tertiary.com}}

\\\\footnote{\\\\label{constructor}\\\\externalLink{http://secondary.com}{http://secondary.com}}"
`;

exports[`rebber: remark specs links-reference-style: links-reference-style 1`] = `
"Foo \\\\hyperref[1]{bar}.



Foo \\\\hyperref[1]{bar}.



Foo \\\\hyperref[1]{bar}.



\\\\footnote{\\\\label{1}\\\\externalLink{/url/}{/url/}}

With \\\\hyperref[b]{embedded [brackets]}.



Indented \\\\hyperref[once]{once}.



Indented \\\\hyperref[twice]{twice}.



Indented \\\\hyperref[thrice]{thrice}.



Indented [four] times.



\\\\footnote{\\\\label{once}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{twice}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{thrice}\\\\externalLink{/url}{/url}}

\\\\begin{CodeBlock}{text}
[four]: /url
\\\\end{CodeBlock}



\\\\footnote{\\\\label{b}\\\\externalLink{/url/}{/url/}}

\\\\horizontalLine



\\\\hyperref[this]{this} should work



So should \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



But not [that].



Nor [that].



Nor [that].



[Something in brackets like \\\\hyperref[this]{this} should work]



[Same with \\\\hyperref[this]{this}.]



In this case, \\\\externalLink{this}{/somethingelse/} points to something else.



Backslashing should suppress [this] and [this].



\\\\footnote{\\\\label{this}\\\\externalLink{foo}{foo}}

\\\\horizontalLine



Here's one where the \\\\hyperref[link breaks]{link
breaks} across lines.



Here's another where the \\\\hyperref[link breaks]{link
breaks} across lines, but with a line-ending space.



\\\\footnote{\\\\label{link breaks}\\\\externalLink{/url/}{/url/}}"
`;

exports[`rebber: remark specs links-shortcut-references: links-shortcut-references 1`] = `
"This is the \\\\hyperref[simple case]{simple case}.



\\\\footnote{\\\\label{simple case}\\\\externalLink{/simple}{/simple}}

This one has a \\\\hyperref[line break]{line
break}.



This one has a \\\\hyperref[line break]{line
break} with a line-ending space.



\\\\footnote{\\\\label{line break}\\\\externalLink{/foo}{/foo}}

\\\\hyperref[that]{this} and the \\\\hyperref[other]{other}



\\\\footnote{\\\\label{this}\\\\externalLink{/this}{/this}}

\\\\footnote{\\\\label{that}\\\\externalLink{/that}{/that}}

\\\\footnote{\\\\label{other}\\\\externalLink{/other}{/other}}"
`;

exports[`rebber: remark specs links-text-delimiters: links-text-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs links-text-empty: links-text-empty 1`] = `
"\\\\externalLink{}{./hello-world.html}.



\\\\externalLink{}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs links-text-entity-delimiters: links-text-entity-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs links-text-escaped-delimiters: links-text-escaped-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs links-text-mismatched-delimiters: links-text-mismatched-delimiters 1`] = `
"[Hello \\\\externalLink{world!}{./hello-world.html}.



[Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}."
`;

exports[`rebber: remark specs links-title-double-quotes: links-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-double-quotes-delimiters: links-title-double-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-double-quotes-entity-delimiters: links-title-double-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-double-quotes-escaped-delimiters: links-title-double-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-double-quotes-mismatched-delimiters: links-title-double-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-empty-double-quotes: links-title-empty-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-empty-parentheses: links-title-empty-parentheses 1`] = `
"[Hello](./world.html ()).



[Hello](<./world.html> ()).



\\\\includegraphics{undefined}(./world.html ()).



\\\\includegraphics{undefined}(<./world.html> ())."
`;

exports[`rebber: remark specs links-title-empty-single-quotes: links-title-empty-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-parentheses: links-title-parentheses 1`] = `
"[Hello](./world.html (Hello World!)).



[Hello](<./world.html> (Hello World!)).



\\\\includegraphics{undefined}(./world.html (Hello World!)).



\\\\includegraphics{undefined}(<./world.html> (Hello World!))."
`;

exports[`rebber: remark specs links-title-single-quotes: links-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-single-quotes-delimiters: links-title-single-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-single-quotes-entity-delimiters: links-title-single-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-single-quotes-escaped-delimiters: links-title-single-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-single-quotes-mismatched-delimiters: links-title-single-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs links-title-unclosed: links-title-unclosed 1`] = `
"[Hello](./world.html 'Hello



[Hello](<./world.html> 'Hello



\\\\includegraphics{undefined}(./world.html 'Hello



\\\\includegraphics{undefined}(<./world.html> 'Hello



[Hello](./world.html \\"Hello



[Hello](<./world.html> \\"Hello



\\\\includegraphics{undefined}(./world.html \\"Hello



\\\\includegraphics{undefined}(<./world.html> \\"Hello



[Hello](./world.html (Hello



[Hello](<./world.html> (Hello



\\\\includegraphics{undefined}(./world.html (Hello



\\\\includegraphics{undefined}(<./world.html> (Hello"
`;

exports[`rebber: remark specs links-url-empty: links-url-empty 1`] = `
".



.



\\\\includegraphics{}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs links-url-empty-title-double-quotes: links-url-empty-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{\\"World!\\"}.



\\\\externalLink{Hello}{\\"World!\\"}.



.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs links-url-empty-title-parentheses: links-url-empty-title-parentheses 1`] = `
"\\\\externalLink{Hello}{(World!)}.



\\\\externalLink{Hello}{(World!)}.



[World](<> (World!)).



\\\\includegraphics{(World!)}.



\\\\includegraphics{(World!)}.



\\\\includegraphics{undefined}(<> (World!))."
`;

exports[`rebber: remark specs links-url-empty-title-single-quotes: links-url-empty-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{'World!'}.



\\\\externalLink{Hello}{'World!'}.



.



\\\\includegraphics{'World!'}.



\\\\includegraphics{'World!'}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs links-url-entity-parentheses: links-url-entity-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs links-url-escaped-parentheses: links-url-escaped-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs links-url-mismatched-parentheses: links-url-mismatched-parentheses 1`] = `
"[Hello](./world(and-hello(world)).



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld}).



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{undefined}(./world(and-hello(world)).



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld}).



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs links-url-nested-parentheses: links-url-nested-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}."
`;

exports[`rebber: remark specs links-url-new-line: links-url-new-line 1`] = `
"[Hello](./wo
rld.html).



\\\\externalLink{Hello}{./wo
rld.html}.



\\\\includegraphics{undefined}(./wo
rld.png).



\\\\includegraphics{./wo
rld.png}."
`;

exports[`rebber: remark specs links-url-unclosed: links-url-unclosed 1`] = `
"[Hello](



[World](<



\\\\includegraphics{undefined}(



\\\\includegraphics{undefined}(<"
`;

exports[`rebber: remark specs links-url-white-space: links-url-white-space 1`] = `
"[Hello](./wo rld.html).



\\\\externalLink{Hello}{./wo rld.html}.



\\\\includegraphics{undefined}(./wo rld.png).



\\\\includegraphics{./wo rld.png}."
`;

exports[`rebber: remark specs list: list 1`] = `
"\\\\part{List bullets}


\\\\begin{itemize}
\\\\item\\\\relax One:

\\\\begin{itemize}
\\\\item\\\\relax Nested one;
\\\\item\\\\relax Nested two:

\\\\begin{itemize}
\\\\item\\\\relax Nested three.
\\\\end{itemize}
\\\\end{itemize}
\\\\item\\\\relax Two;
\\\\item\\\\relax Three.
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-after-list: list-after-list 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{enumerate}


\\\\horizontalLine



\\\\begin{itemize}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{enumerate}"
`;

exports[`rebber: remark specs list-and-code: list-and-code 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax This is a list item
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
This is code
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs list-continuation: list-continuation 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\end{enumerate}


\\\\horizontalLine



\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\end{enumerate}


\\\\begin{CodeBlock}{js}
code();
\\\\end{CodeBlock}



\\\\begin{enumerate}
\\\\item\\\\relax \\\\hyperref[foo]{foo}
\\\\end{enumerate}


\\\\footnote{\\\\label{foo}\\\\externalLink{http://google.com}{http://google.com}}"
`;

exports[`rebber: remark specs list-indentation: list-indentation 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Hello 1a

World 1a.
\\\\item\\\\relax Hello 1b

World 1b.
\\\\item\\\\relax Hello 2a

World 2a.
\\\\item\\\\relax Hello 2b

World 2b.
\\\\item\\\\relax Hello 3a

World 3a.
\\\\item\\\\relax Hello 3b

World 3b.
\\\\item\\\\relax Hello 4a

World 4a.
\\\\item\\\\relax Hello 4b

World 4b.
\\\\item\\\\relax \\\\begin{CodeBlock}{text}
Hello 5a
\\\\end{CodeBlock}

World 5a.
\\\\item\\\\relax \\\\begin{CodeBlock}{text}
Hello 5b

World 5b.
\\\\end{CodeBlock}
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-item-empty: list-item-empty 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax foo
\\\\item\\\\relax 
\\\\item\\\\relax bar
\\\\item\\\\relax foo
\\\\item\\\\relax 
\\\\item\\\\relax bar
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-item-empty-with-white-space: list-item-empty-with-white-space 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax 
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-item-indent: list-item-indent 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{itemize}
\\\\item\\\\relax foo bar baz.
\\\\end{itemize}


<!--  -->

\\\\begin{itemize}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-item-newline: list-item-newline 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Foo
\\\\item\\\\relax Bar
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-item-text: list-item-text 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax item1

\\\\begin{itemize}
\\\\item\\\\relax item2
\\\\end{itemize}
text
\\\\end{itemize}"
`;

exports[`rebber: remark specs list-ordered: list-ordered 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo;
\\\\item\\\\relax bar;
\\\\item\\\\relax baz.
\\\\end{enumerate}"
`;

exports[`rebber: remark specs lists-with-code-and-rules: lists-with-code-and-rules 1`] = `
"\\\\chapter{foo}


\\\\begin{enumerate}
\\\\item\\\\relax bar:

\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax one

\\\\begin{itemize}
\\\\item\\\\relax two

\\\\begin{itemize}
\\\\item\\\\relax three
\\\\item\\\\relax four
\\\\item\\\\relax five
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}
\\\\end{Quotation}
\\\\item\\\\relax foo:

\\\\begin{CodeBlock}{text}
line 1
line 2
\\\\end{CodeBlock}
\\\\item\\\\relax foo:

\\\\begin{enumerate}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{erb}
some code here
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{erb}
foo
---
bar
---
foo
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{html}
---
foo
foo
---
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{text}
foo
---
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo
\\\\end{enumerate}
\\\\end{enumerate}"
`;

exports[`rebber: remark specs loose-lists: loose-lists 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax hello
world

how
are
\\\\item\\\\relax you
\\\\end{itemize}


better behavior:



\\\\begin{itemize}
\\\\item\\\\relax hello

\\\\begin{itemize}
\\\\item\\\\relax world
how

are
you
\\\\item\\\\relax today
\\\\end{itemize}
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world

how
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax how
are
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax how
are
\\\\end{itemize}"
`;

exports[`rebber: remark specs main: main 1`] = `
"\\\\footnote{\\\\label{test}\\\\externalLink{http://google.com/}{http://google.com/}}

\\\\part{A heading}


Just a note, I've found that I can't test my markdown parser vs others.
For example, both markdown.js and showdown code blocks in lists wrong. They're
also completely \\\\hyperref[test]{inconsistent} with regards to paragraphs in list items.



A link. Not anymore.



<aside>This will make me fail the test because
markdown.js doesnt acknowledge arbitrary html blocks =/</aside>

\\\\begin{itemize}
\\\\item\\\\relax List Item 1
\\\\item\\\\relax List Item 2

\\\\begin{itemize}
\\\\item\\\\relax New List Item 1
Hi, this is a list item.
\\\\item\\\\relax New List Item 2
Another item
Code goes here.
Lots of it...
\\\\item\\\\relax New List Item 3
The last item
\\\\end{itemize}
\\\\item\\\\relax List Item 3
The final item.
\\\\item\\\\relax List Item 4
The real final item.
\\\\end{itemize}


Paragraph.



\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax bq Item 1
\\\\item\\\\relax bq Item 2

\\\\begin{itemize}
\\\\item\\\\relax New bq Item 1
\\\\item\\\\relax New bq Item 2
Text here
\\\\end{itemize}
\\\\end{itemize}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
Another blockquote!
I really need to get
more creative with
mockup text..
markdown.js breaks here again
\\\\end{Quotation}



\\\\chapter{Another Heading}


Hello \\\\textit{world}. Here is a \\\\externalLink{link}{//hello}.
And an image \\\\includegraphics{src}.
And an image with an empty alt attribute \\\\includegraphics{src}.



\\\\begin{CodeBlock}{text}
Code goes here.
Lots of it...
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs markdown-documentation-basics: markdown-documentation-basics 1`] = `
"\\\\part{Markdown: Basics}


<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a href=\\"/projects/markdown/syntax\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

\\\\chapter{Getting the Gist of Markdown's Formatting Syntax}


This page offers a brief overview of what it's like to use Markdown.
The \\\\hyperref[s]{syntax page} provides complete, detailed documentation for
every feature, but Markdown should be very easy to pick up simply by
looking at a few examples of it in action. The examples on this page
are written in a before/after style, showing example syntax and the
HTML output produced by Markdown.



It's also helpful to simply try Markdown out; the \\\\hyperref[d]{Dingus} is a
web application that allows you type your own Markdown-formatted text
and translate it to XHTML.



\\\\textbf{Note:} This document is itself written using Markdown; you
can \\\\hyperref[src]{see the source for it by adding '.text' to the URL}.



\\\\footnote{\\\\label{s}\\\\externalLink{/projects/markdown/syntax}{/projects/markdown/syntax}}

\\\\footnote{\\\\label{d}\\\\externalLink{/projects/markdown/dingus}{/projects/markdown/dingus}}

\\\\footnote{\\\\label{src}\\\\externalLink{/projects/markdown/basics.text}{/projects/markdown/basics.text}}

\\\\chapter{Paragraphs, Headers, Blockquotes}


A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



Markdown offers two styles of headers: \\\\textit{Setext} and \\\\textit{atx}.
Setext-style headers for \\\\texttt{<h1>} and \\\\texttt{<h2>} are created by
\\"underlining\\" with equal signs (\\\\texttt{=}) and hyphens (\\\\texttt{-}), respectively.
To create an atx-style header, you put 1-6 hash marks (\\\\texttt{\\\\#}) at the
beginning of the line -- the number of hashes equals the resulting
HTML header level.



Blockquotes are indicated using email-style '\\\\texttt{>}' angle brackets.



Markdown:



\\\\begin{CodeBlock}{text}
A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

> This is a blockquote.
> 
> This is the second paragraph in the blockquote.
>
> ## This is an H2 in a blockquote
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<h1>A First Level Header</h1>

<h2>A Second Level Header</h2>

<p>Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.</p>

<p>The quick brown fox jumped over the lazy
dog's back.</p>

<h3>Header 3</h3>

<blockquote>
    <p>This is a blockquote.</p>
    
    <p>This is the second paragraph in the blockquote.</p>
    
    <h2>This is an H2 in a blockquote</h2>
</blockquote>
\\\\end{CodeBlock}



\\\\section{Phrase Emphasis}


Markdown uses asterisks and underscores to indicate spans of emphasis.



Markdown:



\\\\begin{CodeBlock}{text}
Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>
\\\\end{CodeBlock}



\\\\chapter{Lists}


Unordered (bulleted) lists use asterisks, pluses, and hyphens (\\\\texttt{*},
\\\\texttt{+}, and \\\\texttt{-}) as list markers. These three markers are
interchangable; this:



\\\\begin{CodeBlock}{text}
*   Candy.
*   Gum.
*   Booze.
\\\\end{CodeBlock}



this:



\\\\begin{CodeBlock}{text}
+   Candy.
+   Gum.
+   Booze.
\\\\end{CodeBlock}



and this:



\\\\begin{CodeBlock}{text}
-   Candy.
-   Gum.
-   Booze.
\\\\end{CodeBlock}



all produce the same output:



\\\\begin{CodeBlock}{text}
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
\\\\end{CodeBlock}



Ordered (numbered) lists use regular numbers, followed by periods, as
list markers:



\\\\begin{CodeBlock}{text}
1.  Red
2.  Green
3.  Blue
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
\\\\end{CodeBlock}



If you put blank lines between items, you'll get \\\\texttt{<p>} tags for the
list item text. You can create multi-paragraph list items by indenting
the paragraphs by 4 spaces or 1 tab:



\\\\begin{CodeBlock}{text}
*   A list item.

    With multiple paragraphs.

*   Another item in the list.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<ul>
<li><p>A list item.</p>
<p>With multiple paragraphs.</p></li>
<li><p>Another item in the list.</p></li>
</ul>
\\\\end{CodeBlock}



\\\\section{Links}


Markdown supports two styles for creating links: \\\\textit{inline} and
\\\\textit{reference}. With both styles, you use square brackets to delimit the
text you want to turn into a link.



Inline-style links use parentheses immediately after the link text.
For example:



\\\\begin{CodeBlock}{text}
This is an [example link](http://example.com/).
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>This is an <a href=\\"http://example.com/\\">
example link</a>.</p>
\\\\end{CodeBlock}



Optionally, you may include a title attribute in the parentheses:



\\\\begin{CodeBlock}{text}
This is an [example link](http://example.com/ \\"With a Title\\").
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>This is an <a href=\\"http://example.com/\\" title=\\"With a Title\\">
example link</a>.</p>
\\\\end{CodeBlock}



Reference-style links allow you to refer to your links by names, which
you define elsewhere in your document:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/        \\"Google\\"
[2]: http://search.yahoo.com/  \\"Yahoo Search\\"
[3]: http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from <a href=\\"http://search.yahoo.com/\\"
title=\\"Yahoo Search\\">Yahoo</a> or <a href=\\"http://search.msn.com/\\"
title=\\"MSN Search\\">MSN</a>.</p>
\\\\end{CodeBlock}



The title attribute is optional. Link names may contain letters,
numbers and spaces, but are \\\\textit{not} case sensitive:



\\\\begin{CodeBlock}{text}
I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I start my morning with a cup of coffee and
<a href=\\"http://www.nytimes.com/\\">The New York Times</a>.</p>
\\\\end{CodeBlock}



\\\\section{Images}


Image syntax is very much like link syntax.



Inline (titles are optional):



\\\\begin{CodeBlock}{text}
![alt text](/path/to/img.jpg \\"Title\\")
\\\\end{CodeBlock}



Reference-style:



\\\\begin{CodeBlock}{text}
![alt text][id]

[id]: /path/to/img.jpg \\"Title\\"
\\\\end{CodeBlock}



Both of the above examples produce the same output:



\\\\begin{CodeBlock}{text}
<img src=\\"/path/to/img.jpg\\" alt=\\"alt text\\" title=\\"Title\\" />
\\\\end{CodeBlock}



\\\\section{Code}


In a regular paragraph, you can create code span by wrapping text in
backtick quotes. Any ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} or
\\\\texttt{>}) will automatically be translated into HTML entities. This makes
it easy to use Markdown to write about HTML example code:



\\\\begin{CodeBlock}{text}
I strongly recommend against using any \`<blink>\` tags.

I wish SmartyPants used named entities like \`&mdash;\`
instead of decimal-encoded entites like \`&#8212;\`.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I strongly recommend against using any
<code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like
<code>&amp;mdash;</code> instead of decimal-encoded
entites like <code>&amp;#8212;</code>.</p>
\\\\end{CodeBlock}



To specify an entire block of pre-formatted code, indent every line of
the block by 4 spaces or 1 tab. Just like with code spans, \\\\texttt{\\\\&}, \\\\texttt{<},
and \\\\texttt{>} characters will be escaped automatically.



Markdown:



\\\\begin{CodeBlock}{text}
If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

    <blockquote>
        <p>For example.</p>
    </blockquote>
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:</p>

<pre><code>&lt;blockquote&gt;
    &lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre>
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs markdown-documentation-syntax: markdown-documentation-syntax 1`] = `
"\\\\part{Markdown: Syntax}


<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a href=\\"/projects/markdown/basics\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Overview}{\\\\#overview}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Philosophy}{\\\\#philosophy}
\\\\item\\\\relax \\\\externalLink{Inline HTML}{\\\\#html}
\\\\item\\\\relax \\\\externalLink{Automatic Escaping for Special Characters}{\\\\#autoescape}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Block Elements}{\\\\#block}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Paragraphs and Line Breaks}{\\\\#p}
\\\\item\\\\relax \\\\externalLink{Headers}{\\\\#header}
\\\\item\\\\relax \\\\externalLink{Blockquotes}{\\\\#blockquote}
\\\\item\\\\relax \\\\externalLink{Lists}{\\\\#list}
\\\\item\\\\relax \\\\externalLink{Code Blocks}{\\\\#precode}
\\\\item\\\\relax \\\\externalLink{Horizontal Rules}{\\\\#hr}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Span Elements}{\\\\#span}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Links}{\\\\#link}
\\\\item\\\\relax \\\\externalLink{Emphasis}{\\\\#em}
\\\\item\\\\relax \\\\externalLink{Code}{\\\\#code}
\\\\item\\\\relax \\\\externalLink{Images}{\\\\#img}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Miscellaneous}{\\\\#misc}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Backslash Escapes}{\\\\#backslash}
\\\\item\\\\relax \\\\externalLink{Automatic Links}{\\\\#autolink}
\\\\end{itemize}
\\\\end{itemize}


\\\\textbf{Note:} This document is itself written using Markdown; you
can \\\\hyperref[src]{see the source for it by adding '.text' to the URL}.



\\\\footnote{\\\\label{src}\\\\externalLink{/projects/markdown/syntax.text}{/projects/markdown/syntax.text}}

\\\\horizontalLine



<h2 id=\\"overview\\">Overview</h2>

<h3 id=\\"philosophy\\">Philosophy</h3>

Markdown is intended to be as easy-to-read and easy-to-write as is feasible.



Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters -- including \\\\hyperref[1]{Setext}, \\\\hyperref[2]{atx}, \\\\hyperref[3]{Textile}, \\\\hyperref[4]{reStructuredText},
\\\\hyperref[5]{Grutatext}, and \\\\hyperref[6]{EtText} -- the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.



\\\\footnote{\\\\label{1}\\\\externalLink{http://docutils.sourceforge.net/mirror/setext.html}{http://docutils.sourceforge.net/mirror/setext.html}}

\\\\footnote{\\\\label{2}\\\\externalLink{http://www.aaronsw.com/2002/atx/}{http://www.aaronsw.com/2002/atx/}}

\\\\footnote{\\\\label{3}\\\\externalLink{http://textism.com/tools/textile/}{http://textism.com/tools/textile/}}

\\\\footnote{\\\\label{4}\\\\externalLink{http://docutils.sourceforge.net/rst.html}{http://docutils.sourceforge.net/rst.html}}

\\\\footnote{\\\\label{5}\\\\externalLink{http://www.triptico.com/software/grutatxt.html}{http://www.triptico.com/software/grutatxt.html}}

\\\\footnote{\\\\label{6}\\\\externalLink{http://ettext.taint.org/doc/}{http://ettext.taint.org/doc/}}

To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.



<h3 id=\\"html\\">Inline HTML</h3>

Markdown's syntax is intended for one purpose: to be used as a
format for \\\\textit{writing} for the web.



Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is \\\\textit{not} to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a \\\\textit{publishing} format; Markdown is a \\\\textit{writing}
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.



For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.



The only restrictions are that block-level HTML elements -- e.g. \\\\texttt{<div>},
\\\\texttt{<table>}, \\\\texttt{<pre>}, \\\\texttt{<p>}, etc. -- must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) \\\\texttt{<p>} tags around HTML block-level tags.



For example, to add an HTML table to a Markdown article:



\\\\begin{CodeBlock}{text}
This is a regular paragraph.

<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>

This is another regular paragraph.
\\\\end{CodeBlock}



Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style \\\\texttt{*emphasis*} inside an
HTML block.



Span-level HTML tags -- e.g. \\\\texttt{<span>}, \\\\texttt{<cite>}, or \\\\texttt{<del>} -- can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML \\\\texttt{<a>} or \\\\texttt{<img>} tags instead of Markdown's
link or image syntax, go right ahead.



Unlike block-level HTML tags, Markdown syntax \\\\textit{is} processed within
span-level tags.



<h3 id=\\"autoescape\\">Automatic Escaping for Special Characters</h3>

In HTML, there are two characters that demand special treatment: \\\\texttt{<}
and \\\\texttt{\\\\&}. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. \\\\texttt{\\\\&lt;}, and
\\\\texttt{\\\\&amp;}.



Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT\\\\&T', you need to write '\\\\texttt{AT\\\\&amp;T}'. You even need to
escape ampersands within URLs. Thus, if you want to link to:



\\\\begin{CodeBlock}{text}
http://images.google.com/images?num=30&q=larry+bird
\\\\end{CodeBlock}



you need to encode the URL as:



\\\\begin{CodeBlock}{text}
http://images.google.com/images?num=30&amp;q=larry+bird
\\\\end{CodeBlock}



in your anchor tag \\\\texttt{href} attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.



Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into \\\\texttt{\\\\&amp;}.



So, if you want to include a copyright symbol in your article, you can write:



\\\\begin{CodeBlock}{text}
&copy;
\\\\end{CodeBlock}



and Markdown will leave it alone. But if you write:



\\\\begin{CodeBlock}{text}
AT&T
\\\\end{CodeBlock}



Markdown will translate it to:



\\\\begin{CodeBlock}{text}
AT&amp;T
\\\\end{CodeBlock}



Similarly, because Markdown supports \\\\externalLink{inline HTML}{\\\\#html}, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:



\\\\begin{CodeBlock}{text}
4 < 5
\\\\end{CodeBlock}



Markdown will translate it to:



\\\\begin{CodeBlock}{text}
4 &lt; 5
\\\\end{CodeBlock}



However, inside Markdown code spans and blocks, angle brackets and
ampersands are \\\\textit{always} encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single \\\\texttt{<}
and \\\\texttt{\\\\&} in your example code needs to be escaped.)



\\\\horizontalLine



<h2 id=\\"block\\">Block Elements</h2>

<h3 id=\\"p\\">Paragraphs and Line Breaks</h3>

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



The implication of the \\"one or more consecutive lines of text\\" rule is
that Markdown supports \\"hard-wrapped\\" text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's \\"Convert Line Breaks\\" option) which translate every line break
character in a paragraph into a \\\\texttt{<br />} tag.



When you \\\\textit{do} want to insert a \\\\texttt{<br />} break tag using Markdown, you
end a line with two or more spaces, then type return.



Yes, this takes a tad more effort to create a \\\\texttt{<br />}, but a simplistic
\\"every line break is a \\\\texttt{<br />}\\" rule wouldn't work for Markdown.
Markdown's email-style \\\\hyperref[bq]{blockquoting} and multi-paragraph \\\\hyperref[l]{list items}
work best -- and look better -- when you format them with hard breaks.



\\\\footnote{\\\\label{bq}\\\\externalLink{\\\\#blockquote}{\\\\#blockquote}}

\\\\footnote{\\\\label{l}\\\\externalLink{\\\\#list}{\\\\#list}}

<h3 id=\\"header\\">Headers</h3>

Markdown supports two styles of headers, \\\\hyperref[1]{Setext} and \\\\hyperref[2]{atx}.



Setext-style headers are \\"underlined\\" using equal signs (for first-level
headers) and dashes (for second-level headers). For example:



\\\\begin{CodeBlock}{text}
This is an H1
=============

This is an H2
-------------
\\\\end{CodeBlock}



Any number of underlining \\\\texttt{=}'s or \\\\texttt{-}'s will work.



Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:



\\\\begin{CodeBlock}{text}
# This is an H1

## This is an H2

###### This is an H6
\\\\end{CodeBlock}



Optionally, you may \\"close\\" atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :



\\\\begin{CodeBlock}{text}
# This is an H1 #

## This is an H2 ##

### This is an H3 ######
\\\\end{CodeBlock}



<h3 id=\\"blockquote\\">Blockquotes</h3>

Markdown uses email-style \\\\texttt{>} characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a \\\\texttt{>} before every line:



\\\\begin{CodeBlock}{text}
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
> 
> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
> id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



Markdown allows you to be lazy and only put the \\\\texttt{>} before the first
line of a hard-wrapped paragraph:



\\\\begin{CodeBlock}{text}
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of \\\\texttt{>}:



\\\\begin{CodeBlock}{text}
> This is the first level of quoting.
>
> > This is nested blockquote.
>
> Back to the first level.
\\\\end{CodeBlock}



Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:



\\\\begin{CodeBlock}{text}
> ## This is a header.
> 
> 1.   This is the first list item.
> 2.   This is the second list item.
> 
> Here's some example code:
> 
>     return shell_exec(\\"echo $input | $markdown_script\\");
\\\\end{CodeBlock}



Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.



<h3 id=\\"list\\">Lists</h3>

Markdown supports ordered (numbered) and unordered (bulleted) lists.



Unordered lists use asterisks, pluses, and hyphens -- interchangably
-- as list markers:



\\\\begin{CodeBlock}{text}
*   Red
*   Green
*   Blue
\\\\end{CodeBlock}



is equivalent to:



\\\\begin{CodeBlock}{text}
+   Red
+   Green
+   Blue
\\\\end{CodeBlock}



and:



\\\\begin{CodeBlock}{text}
-   Red
-   Green
-   Blue
\\\\end{CodeBlock}



Ordered lists use numbers followed by periods:



\\\\begin{CodeBlock}{text}
1.  Bird
2.  McHale
3.  Parish
\\\\end{CodeBlock}



It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:



\\\\begin{CodeBlock}{text}
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
\\\\end{CodeBlock}



If you instead wrote the list in Markdown like this:



\\\\begin{CodeBlock}{text}
1.  Bird
1.  McHale
1.  Parish
\\\\end{CodeBlock}



or even:



\\\\begin{CodeBlock}{text}
3. Bird
1. McHale
8. Parish
\\\\end{CodeBlock}



you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.



If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.



List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.



To make lists look nice, you can wrap items with hanging indents:



\\\\begin{CodeBlock}{text}
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



But if you want to be lazy, you don't have to:



\\\\begin{CodeBlock}{text}
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



If list items are separated by blank lines, Markdown will wrap the
items in \\\\texttt{<p>} tags in the HTML output. For example, this input:



\\\\begin{CodeBlock}{text}
*   Bird
*   Magic
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<ul>
<li>Bird</li>
<li>Magic</li>
</ul>
\\\\end{CodeBlock}



But this:



\\\\begin{CodeBlock}{text}
*   Bird

*   Magic
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>
\\\\end{CodeBlock}



List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:



\\\\begin{CodeBlock}{text}
1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:



\\\\begin{CodeBlock}{text}
*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
\\\\end{CodeBlock}



To put a blockquote within a list item, the blockquote's \\\\texttt{>}
delimiters need to be indented:



\\\\begin{CodeBlock}{text}
*   A list item with a blockquote:

    > This is a blockquote
    > inside a list item.
\\\\end{CodeBlock}



To put a code block within a list item, the code block needs
to be indented \\\\textit{twice} -- 8 spaces or two tabs:



\\\\begin{CodeBlock}{text}
*   A list item with a code block:

        <code goes here>
\\\\end{CodeBlock}



It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:



\\\\begin{CodeBlock}{text}
1986. What a great season.
\\\\end{CodeBlock}



In other words, a \\\\textit{number-period-space} sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:



\\\\begin{CodeBlock}{text}
1986\\\\. What a great season.
\\\\end{CodeBlock}



<h3 id=\\"precode\\">Code Blocks</h3>

Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both \\\\texttt{<pre>} and \\\\texttt{<code>} tags.



To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:



\\\\begin{CodeBlock}{text}
This is a normal paragraph:

    This is a code block.
\\\\end{CodeBlock}



Markdown will generate:



\\\\begin{CodeBlock}{text}
<p>This is a normal paragraph:</p>

<pre><code>This is a code block.
</code></pre>
\\\\end{CodeBlock}



One level of indentation -- 4 spaces or 1 tab -- is removed from each
line of the code block. For example, this:



\\\\begin{CodeBlock}{text}
Here is an example of AppleScript:

    tell application \\"Foo\\"
        beep
    end tell
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<p>Here is an example of AppleScript:</p>

<pre><code>tell application \\"Foo\\"
    beep
end tell
</code></pre>
\\\\end{CodeBlock}



A code block continues until it reaches a line that is not indented
(or the end of the article).



Within a code block, ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} and \\\\texttt{>})
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:



\\\\begin{CodeBlock}{text}
    <div class=\\"footer\\">
        &copy; 2004 Foo Corporation
    </div>
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<pre><code>&lt;div class=\\"footer\\"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>
\\\\end{CodeBlock}



Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.



<h3 id=\\"hr\\">Horizontal Rules</h3>

You can produce a horizontal rule tag (\\\\texttt{<hr>}) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:



\\\\begin{CodeBlock}{text}
* * *

***

*****

- - -

---------------------------------------

_ _ _
\\\\end{CodeBlock}



\\\\horizontalLine



<h2 id=\\"span\\">Span Elements</h2>

<h3 id=\\"link\\">Links</h3>

Markdown supports two style of links: \\\\textit{inline} and \\\\textit{reference}.



In both styles, the link text is delimited by [square brackets].



To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an \\\\textit{optional}
title for the link, surrounded in quotes. For example:



\\\\begin{CodeBlock}{text}
This is [an example](http://example.com/ \\"Title\\") inline link.

[This link](http://example.net/) has no title attribute.
\\\\end{CodeBlock}



Will produce:



\\\\begin{CodeBlock}{text}
<p>This is <a href=\\"http://example.com/\\" title=\\"Title\\">
an example</a> inline link.</p>

<p><a href=\\"http://example.net/\\">This link</a> has no
title attribute.</p>
\\\\end{CodeBlock}



If you're referring to a local resource on the same server, you can
use relative paths:



\\\\begin{CodeBlock}{text}
See my [About](/about/) page for details.
\\\\end{CodeBlock}



Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:



\\\\begin{CodeBlock}{text}
This is [an example][id] reference-style link.
\\\\end{CodeBlock}



You can optionally use a space to separate the sets of brackets:



\\\\begin{CodeBlock}{text}
This is [an example] [id] reference-style link.
\\\\end{CodeBlock}



Then, anywhere in the document, you define your link label like this,
on a line by itself:



\\\\begin{CodeBlock}{text}
[id]: http://example.com/  \\"Optional Title Here\\"
\\\\end{CodeBlock}



That is:



\\\\begin{itemize}
\\\\item\\\\relax Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);
\\\\item\\\\relax followed by a colon;
\\\\item\\\\relax followed by one or more spaces (or tabs);
\\\\item\\\\relax followed by the URL for the link;
\\\\item\\\\relax optionally followed by a title attribute for the link, enclosed
in double or single quotes.
\\\\end{itemize}


The link URL may, optionally, be surrounded by angle brackets:



\\\\begin{CodeBlock}{text}
[id]: <http://example.com/>  \\"Optional Title Here\\"
\\\\end{CodeBlock}



You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:



\\\\begin{CodeBlock}{text}
[id]: http://example.com/longish/path/to/resource/here
    \\"Optional Title Here\\"
\\\\end{CodeBlock}



Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.



Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are \\\\textit{not} case sensitive. E.g. these two links:



\\\\begin{CodeBlock}{text}
[link text][a]
[link text][A]
\\\\end{CodeBlock}



are equivalent.



The \\\\textit{implicit link name} shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
\\"Google\\" to the google.com web site, you could simply write:



\\\\begin{CodeBlock}{text}
[Google][]
\\\\end{CodeBlock}



And then define the link:



\\\\begin{CodeBlock}{text}
[Google]: http://google.com/
\\\\end{CodeBlock}



Because link names may contain spaces, this shortcut even works for
multiple words in the link text:



\\\\begin{CodeBlock}{text}
Visit [Daring Fireball][] for more information.
\\\\end{CodeBlock}



And then define the link:



\\\\begin{CodeBlock}{text}
[Daring Fireball]: http://daringfireball.net/
\\\\end{CodeBlock}



Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.



Here's an example of reference links in action:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        \\"Google\\"
  [2]: http://search.yahoo.com/  \\"Yahoo Search\\"
  [3]: http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Using the implicit link name shortcut, you could instead write:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        \\"Google\\"
  [yahoo]:  http://search.yahoo.com/  \\"Yahoo Search\\"
  [msn]:    http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Both of the above examples will produce the following HTML output:



\\\\begin{CodeBlock}{text}
<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from
<a href=\\"http://search.yahoo.com/\\" title=\\"Yahoo Search\\">Yahoo</a>
or <a href=\\"http://search.msn.com/\\" title=\\"MSN Search\\">MSN</a>.</p>
\\\\end{CodeBlock}



For comparison, here is the same paragraph written using
Markdown's inline link style:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google](http://google.com/ \\"Google\\")
than from [Yahoo](http://search.yahoo.com/ \\"Yahoo Search\\") or
[MSN](http://search.msn.com/ \\"MSN Search\\").
\\\\end{CodeBlock}



The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.



With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.



<h3 id=\\"em\\">Emphasis</h3>

Markdown treats asterisks (\\\\texttt{*}) and underscores (\\\\texttt{\\\\_}) as indicators of
emphasis. Text wrapped with one \\\\texttt{*} or \\\\texttt{\\\\_} will be wrapped with an
HTML \\\\texttt{<em>} tag; double \\\\texttt{*}'s or \\\\texttt{\\\\_}'s will be wrapped with an HTML
\\\\texttt{<strong>} tag. E.g., this input:



\\\\begin{CodeBlock}{text}
*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<em>single asterisks</em>

<em>single underscores</em>

<strong>double asterisks</strong>

<strong>double underscores</strong>
\\\\end{CodeBlock}



You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.



Emphasis can be used in the middle of a word:



\\\\begin{CodeBlock}{text}
un*fucking*believable
\\\\end{CodeBlock}



But if you surround an \\\\texttt{*} or \\\\texttt{\\\\_} with spaces, it'll be treated as a
literal asterisk or underscore.



To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:



\\\\begin{CodeBlock}{text}
\\\\*this text is surrounded by literal asterisks\\\\*
\\\\end{CodeBlock}



<h3 id=\\"code\\">Code</h3>

To indicate a span of code, wrap it with backtick quotes (\\\\texttt{\`}).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:



\\\\begin{CodeBlock}{text}
Use the \`printf()\` function.
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<p>Use the <code>printf()</code> function.</p>
\\\\end{CodeBlock}



To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:



\\\\begin{CodeBlock}{text}
\`\`There is a literal backtick (\`) here.\`\`
\\\\end{CodeBlock}



which will produce this:



\\\\begin{CodeBlock}{text}
<p><code>There is a literal backtick (\`) here.</code></p>
\\\\end{CodeBlock}



The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:



\\\\begin{CodeBlock}{text}
A single backtick in a code span: \`\` \` \`\`

A backtick-delimited string in a code span: \`\` \`foo\` \`\`
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<p>A single backtick in a code span: <code>\`</code></p>

<p>A backtick-delimited string in a code span: <code>\`foo\`</code></p>
\\\\end{CodeBlock}



With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:



\\\\begin{CodeBlock}{text}
Please don't use any \`<blink>\` tags.
\\\\end{CodeBlock}



into:



\\\\begin{CodeBlock}{text}
<p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>
\\\\end{CodeBlock}



You can write this:



\\\\begin{CodeBlock}{text}
\`&#8212;\` is the decimal-encoded equivalent of \`&mdash;\`.
\\\\end{CodeBlock}



to produce:



\\\\begin{CodeBlock}{text}
<p><code>&amp;#8212;</code> is the decimal-encoded
equivalent of <code>&amp;mdash;</code>.</p>
\\\\end{CodeBlock}



<h3 id=\\"img\\">Images</h3>

Admittedly, it's fairly difficult to devise a \\"natural\\" syntax for
placing images into a plain text document format.



Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: \\\\textit{inline} and \\\\textit{reference}.



Inline image syntax looks like this:



\\\\begin{CodeBlock}{text}
![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg \\"Optional title\\")
\\\\end{CodeBlock}



That is:



\\\\begin{itemize}
\\\\item\\\\relax An exclamation mark: \\\\texttt{!};
\\\\item\\\\relax followed by a set of square brackets, containing the \\\\texttt{alt}
attribute text for the image;
\\\\item\\\\relax followed by a set of parentheses, containing the URL or path to
the image, and an optional \\\\texttt{title} attribute enclosed in double
or single quotes.
\\\\end{itemize}


Reference-style image syntax looks like this:



\\\\begin{CodeBlock}{text}
![Alt text][id]
\\\\end{CodeBlock}



Where \\"id\\" is the name of a defined image reference. Image references
are defined using syntax identical to link references:



\\\\begin{CodeBlock}{text}
[id]: url/to/image  \\"Optional title attribute\\"
\\\\end{CodeBlock}



As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML \\\\texttt{<img>} tags.



\\\\horizontalLine



<h2 id=\\"misc\\">Miscellaneous</h2>

<h3 id=\\"autolink\\">Automatic Links</h3>

Markdown supports a shortcut style for creating \\"automatic\\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:



\\\\begin{CodeBlock}{text}
<http://example.com/>
\\\\end{CodeBlock}



Markdown will turn this into:



\\\\begin{CodeBlock}{text}
<a href=\\"http://example.com/\\">http://example.com/</a>
\\\\end{CodeBlock}



Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:



\\\\begin{CodeBlock}{text}
<address@example.com>
\\\\end{CodeBlock}



into something like this:



\\\\begin{CodeBlock}{text}
<a href=\\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
&#109;\\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;
&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>
\\\\end{CodeBlock}



which will render in a browser as a clickable link to \\"\\\\externalLink{address@example.com}{mailto:address@example.com}\\".



(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)



<h3 id=\\"backslash\\">Backslash Escapes</h3>

Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML \\\\texttt{<em>} tag), you can backslashes
before the asterisks, like this:



\\\\begin{CodeBlock}{text}
\\\\*literal asterisks\\\\*
\\\\end{CodeBlock}



Markdown provides backslash escapes for the following characters:



\\\\begin{CodeBlock}{text}
\\\\   backslash
\`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+	plus sign
-	minus sign (hyphen)
.   dot
!   exclamation mark
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs mixed-indentation: mixed-indentation 1`] = `
"\\\\part{Mixed spaces and tabs}


\\\\begin{itemize}
\\\\item\\\\relax Very long
paragraph
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax Very long
paragraph
\\\\end{enumerate}


\\\\begin{itemize}
\\\\item\\\\relax Very long
paragraph
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax Very long
paragraph
\\\\end{enumerate}"
`;

exports[`rebber: remark specs nested-blockquotes: nested-blockquotes 1`] = `
"\\\\begin{Quotation}
foo

\\\\begin{Quotation}
bar
\\\\end{Quotation}

foo
\\\\end{Quotation}"
`;

exports[`rebber: remark specs nested-code: nested-code 1`] = `
"\\\\texttt{hi ther \`\` ok \`\`\`}



\\\\texttt{\`hi ther\`}"
`;

exports[`rebber: remark specs nested-em: nested-em 1`] = `
"\\\\textit{test \\\\textbf{test} test}



\\\\textit{test \\\\textbf{test} test}"
`;

exports[`rebber: remark specs nested-references: nested-references 1`] = `
"This nested image should work:



[\\\\includegraphics{undefined}]



This nested link should not work:



[[Foo][bar]]"
`;

exports[`rebber: remark specs nested-square-link: nested-square-link 1`] = `
"[the \`]\` character](/url)



[the \\\\texttt{[} character](/url)



[the \`\` \\\\externalLink{ \`\`\` character}{/url}



\\\\externalLink{the \\\\texttt{\`} character}{/url}"
`;

exports[`rebber: remark specs no-positionals: no-positionals 1`] = `
"This document tests for the working of \\\\texttt{position: false} as a parse
option.



\\\\begin{Quotation}
Block-quotes

\\\\begin{itemize}
\\\\item\\\\relax With list items.
\\\\end{itemize}
\\\\end{Quotation}



Another block-quote:



\\\\begin{Quotation}
\\\\begin{enumerate}
\\\\item\\\\relax And another list.
\\\\end{enumerate}
\\\\end{Quotation}



Some \\\\externalLink{deeply \\\\textbf{nested \\\\textit{elements}}}{http://example.com}



An entity: ©, and an warning entity: ©."
`;

exports[`rebber: remark specs not-a-link: not-a-link 1`] = `"[test](not a link)"`;

exports[`rebber: remark specs ordered-and-unordered-lists: ordered-and-unordered-lists 1`] = `
"\\\\chapter{Unordered}


Asterisks tight:



\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}


Asterisks loose:



\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}


\\\\horizontalLine



Pluses tight:



\\\\begin{itemize}
\\\\item\\\\relax Plus 1
\\\\item\\\\relax Plus 2
\\\\item\\\\relax Plus 3
\\\\end{itemize}


Pluses loose:



\\\\begin{itemize}
\\\\item\\\\relax Plus 1
\\\\item\\\\relax Plus 2
\\\\item\\\\relax Plus 3
\\\\end{itemize}


\\\\horizontalLine



Minuses tight:



\\\\begin{itemize}
\\\\item\\\\relax Minus 1
\\\\item\\\\relax Minus 2
\\\\item\\\\relax Minus 3
\\\\end{itemize}


Minuses loose:



\\\\begin{itemize}
\\\\item\\\\relax Minus 1
\\\\item\\\\relax Minus 2
\\\\item\\\\relax Minus 3
\\\\end{itemize}


\\\\chapter{Ordered}


Tight:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second
\\\\item\\\\relax Third
\\\\end{enumerate}


and:



\\\\begin{enumerate}
\\\\item\\\\relax One
\\\\item\\\\relax Two
\\\\item\\\\relax Three
\\\\end{enumerate}


Loose using tabs:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second
\\\\item\\\\relax Third
\\\\end{enumerate}


and using spaces:



\\\\begin{enumerate}
\\\\item\\\\relax One
\\\\item\\\\relax Two
\\\\item\\\\relax Three
\\\\end{enumerate}


Multiple paragraphs:



\\\\begin{enumerate}
\\\\item\\\\relax Item 1, graf one.

Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
\\\\item\\\\relax Item 2.
\\\\item\\\\relax Item 3.
\\\\end{enumerate}


\\\\chapter{Nested}


\\\\begin{itemize}
\\\\item\\\\relax Tab

\\\\begin{itemize}
\\\\item\\\\relax Tab

\\\\begin{itemize}
\\\\item\\\\relax Tab
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}


Here's another:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second:

\\\\begin{itemize}
\\\\item\\\\relax Fee
\\\\item\\\\relax Fie
\\\\item\\\\relax Foe
\\\\end{itemize}
\\\\item\\\\relax Third
\\\\end{enumerate}


Same thing but with paragraphs:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second:

\\\\begin{itemize}
\\\\item\\\\relax Fee
\\\\item\\\\relax Fie
\\\\item\\\\relax Foe
\\\\end{itemize}
\\\\item\\\\relax Third
\\\\end{enumerate}


This was an error in Markdown 1.0.1:



\\\\begin{itemize}
\\\\item\\\\relax this

\\\\begin{itemize}
\\\\item\\\\relax sub
\\\\end{itemize}
that
\\\\end{itemize}"
`;

exports[`rebber: remark specs ordered-different-types: ordered-different-types 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\item\\\\relax bar
3) baz
\\\\end{enumerate}"
`;

exports[`rebber: remark specs ordered-with-parentheses: ordered-with-parentheses 1`] = `
"\\\\chapter{Ordered}


Tight:



1)	First
2)	Second
3)	Third



and:



1) One
2) Two
3) Three



Loose using tabs:



1)	First



2)	Second



3)	Third



and using spaces:



1) One



2) Two



3) Three



Multiple paragraphs:



1)	Item 1, graf one.



\\\\begin{CodeBlock}{text}
Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
\\\\end{CodeBlock}



2)	Item 2.



3)	Item 3."
`;

exports[`rebber: remark specs paragraphs-and-indentation: paragraphs-and-indentation 1`] = `
"\\\\part{Without lines.}


This is a paragraph
and this is further text



This is a paragraph
and this is further text



This is a paragraph with some asterisks



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



This is a paragraph followed by a horizontal rule



\\\\horizontalLine



\\\\part{With lines.}


This is a paragraph



\\\\begin{CodeBlock}{text}
and this is code
\\\\end{CodeBlock}



This is a paragraph



and this is a new paragraph



This is a paragraph with some asterisks in a code block



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



This is a paragraph followed by a horizontal rule



\\\\horizontalLine"
`;

exports[`rebber: remark specs paragraphs-empty: paragraphs-empty 1`] = `
"aaa



\\\\part{aaa}


bbb



ccc"
`;

exports[`rebber: remark specs ref-paren: ref-paren 1`] = `
"\\\\hyperref[hi]{hi}



\\\\footnote{\\\\label{hi}\\\\externalLink{/url}{/url}}"
`;

exports[`rebber: remark specs reference-image-empty-alt: reference-image-empty-alt 1`] = `
"\\\\includegraphics{/xyz.png}



\\\\footnote{\\\\label{1}\\\\externalLink{/xyz.png}{/xyz.png}}"
`;

exports[`rebber: remark specs reference-link-escape: reference-link-escape 1`] = `
"[b*r*], \\\\hyperref[b\\\\*r*]{b*r*}, \\\\hyperref[b\\\\*r*]{b*r*}.



\\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}.



\\\\footnote{\\\\label{b\\\\*r*}\\\\externalLink{http://google.com}{http://google.com}}"
`;

exports[`rebber: remark specs reference-link-not-closed: reference-link-not-closed 1`] = `
"[bar]bar



[bar]



[bar]"
`;

exports[`rebber: remark specs reference-link-with-angle-brackets: reference-link-with-angle-brackets 1`] = `
"\\\\hyperref[foo]{foo}



\\\\footnote{\\\\label{foo}\\\\externalLink{./url with spaces}{./url with spaces}}"
`;

exports[`rebber: remark specs reference-link-with-multiple-definitions: reference-link-with-multiple-definitions 1`] = `
"\\\\hyperref[foo]{foo}



\\\\footnote{\\\\label{foo}\\\\externalLink{first}{first}}

\\\\footnote{\\\\label{foo-1}\\\\externalLink{second}{second}}"
`;

exports[`rebber: remark specs same-bullet: same-bullet 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}"
`;

exports[`rebber: remark specs stringify-escape: stringify-escape 1`] = `
"Characters that should be escaped in general:



\\\\textbackslash{} \` * [



Characters that shouldn't:



\\\\{\\\\}]()\\\\#+-.!>\\"\\\\$\\\\%',/:;=?@\\\\textasciicircum{}\\\\textasciitilde{}



Underscores are \\\\_escaped\\\\_ unless they appear in\\\\_the\\\\_middle\\\\_of\\\\_a\\\\_word.
or \\\\textbf{\\\\_here}, or here\\\\_\\\\_



Ampersands are escaped only when they would otherwise start an entity:



\\\\begin{itemize}
\\\\item\\\\relax \\\\textbackslash{}©cat \\\\textbackslash{}\\\\& \\\\textbackslash{}\\\\&
\\\\item\\\\relax \\\\&copycat \\\\&amp; \\\\&\\\\#x26
\\\\item\\\\relax But: ©cat; \\\\texttt{\\\\&between;} \\\\&foo; \\\\& AT\\\\&T \\\\&c
\\\\end{itemize}


Open parenthesis should be escaped after a shortcut reference:



[ref](text)



And after a shortcut reference and a space (for GitHub):



[ref] (text)



Hyphen should be escaped at the beginning of a line:



- not a list item
- not a list item
+ not a list item



Same for angle brackets:



> not a block quote



And hash signs:



\\\\# not a heading
\\\\#\\\\# not a subheading



Text under a shortcut reference should be preserved verbatim:



\\\\begin{itemize}
\\\\item\\\\relax [two*three]
\\\\item\\\\relax [two*three]
\\\\item\\\\relax [a\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\textbackslash{}\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\_a\\\\_a]
\\\\end{itemize}


\\\\textbf{GFM:}



Colon should be escaped in URLs:



\\\\begin{itemize}
\\\\item\\\\relax http\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax https\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax http://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax https://user:password@host:port/path?key=value\\\\#fragment
\\\\end{itemize}


Double tildes should be \\\\textasciitilde{}\\\\textasciitilde{}escaped\\\\textasciitilde{}\\\\textasciitilde{}.
And here: foo\\\\textasciitilde{}\\\\textasciitilde{}.



Pipes should not be escaped here: |



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
here & they \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
should & tho|ugh \\\\\\\\ \\\\hline
\\\\end{longtabu}


And here:



| here   | they   |
| ---- | ----- |
| should | though |



And here:



here   | they
---- | ------
should | though



\\\\textbf{Commonmark:}



Open angle bracket should be escaped:



\\\\begin{itemize}
\\\\item\\\\relax \\\\textbackslash{}<div>\\\\textbackslash{}</div>
\\\\item\\\\relax \\\\textbackslash{}<http\\\\textbackslash{}:google.com>
\\\\item\\\\relax <div></div>
\\\\item\\\\relax <http:google.com>
\\\\end{itemize}"
`;

exports[`rebber: remark specs strong-and-em-together-one: strong-and-em-together-one 1`] = `
"\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word.



\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word."
`;

exports[`rebber: remark specs strong-and-em-together-two: strong-and-em-together-two 1`] = `
"perform\\\\_complicated\\\\_task



do\\\\_this\\\\_and\\\\_do\\\\_that\\\\_and\\\\_another\\\\_thing



perform\\\\textit{complicated}task



do\\\\textit{this}and\\\\textit{do}that\\\\textit{and}another*thing"
`;

exports[`rebber: remark specs strong-emphasis: strong-emphasis 1`] = `
"Foo \\\\textbf{bar} \\\\textbf{baz}.



Foo \\\\textbf{bar} \\\\textbf{baz}."
`;

exports[`rebber: remark specs strong-initial-white-space: strong-initial-white-space 1`] = `
"\\\\textbf{ bar }.



\\\\textbf{ bar }."
`;

exports[`rebber: remark specs table: table 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Heading 1 & \\\\textbf{H}eading 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
Cell 5 & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{CodeBlock}{text}
Test code
\\\\end{CodeBlock}



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\textit{Cell 5} & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-empty-initial-cell: table-empty-initial-cell 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
 & a & c \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
a & b & c \\\\\\\\ \\\\hline
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-escaped-pipes: table-escaped-pipes 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
First & Second & third \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
first & second & third \\\\\\\\ \\\\hline
first & second | second & third | \\\\\\\\ \\\\hline
first & second \\\\textbackslash{} & third \\\\textbackslash{} \\\\\\\\ \\\\hline
first & second \\\\textbackslash{}| second & third \\\\textbackslash{}| \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-in-list: table-in-list 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Unordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}
\\\\item\\\\relax Ordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}
\\\\end{itemize}"
`;

exports[`rebber: remark specs table-invalid-alignment: table-invalid-alignment 1`] = `
"Missing alignment characters:



| a | b | c |
|   |---|---|
| d | e | f |



\\\\horizontalLine



| a | b | c |
|---|---|   |
| d | e | f |



Invalid characters:



| a | b | c |
|---|-*-|---|
| d | e | f |"
`;

exports[`rebber: remark specs table-loose: table-loose 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-no-body: table-no-body 1`] = `
"\\\\part{Foo}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Name & GitHub & Twitter \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-no-end-of-line: table-no-end-of-line 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
foo & bar \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-one-column: table-one-column 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
b \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-one-row: table-one-row 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-padded: table-padded 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-pipes-in-code: table-pipes-in-code 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` &  &  & \` \\\\\\\\ \\\\hline
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-spaced: table-spaced 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs table-with-image: table-with-image 1`] = `
"Someone wanted to do this, let's implement it!



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
c1 & c2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
c3 & \\\\includegraphics{https://zestedesavoir.com/media/galleries/426/56dc4a1e-416b-4a9d-830d-95b45d58a17a.png} \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs tabs: tabs 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax this is a list item
indented with tabs
\\\\item\\\\relax this is a list item
indented with spaces
\\\\end{itemize}


Code:



\\\\begin{CodeBlock}{text}
this code block is indented by one tab
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
	this code block is indented by two tabs
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs tabs-and-spaces: tabs-and-spaces 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax this is a list item
indented with tabs
\\\\item\\\\relax this is a list item
indented with spaces
\\\\end{itemize}


Code:



\\\\begin{CodeBlock}{text}
this code block is indented by one tab
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
	this code block is indented by two tabs
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces
\\\\end{CodeBlock}"
`;

exports[`rebber: remark specs task-list: task-list 1`] = `
"\\\\part{Empty items}


\\\\begin{itemize}
\\\\item\\\\relax [ ]
\\\\item\\\\relax [	]
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [x]
\\\\item\\\\relax [X]
\\\\end{enumerate}


\\\\part{Single space}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\end{enumerate}


\\\\part{Tab}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\end{enumerate}


\\\\part{No white space with content}


\\\\begin{itemize}
\\\\item\\\\relax [ ]Hello;
\\\\item\\\\relax [	]World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [x]Foo.
\\\\item\\\\relax [X]Bar
\\\\end{enumerate}


\\\\part{Single space with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax World :D
\\\\end{enumerate}


\\\\part{Single tab with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Hello.
\\\\end{enumerate}


\\\\part{Multiple spaces with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Bar.
\\\\end{enumerate}


\\\\part{Multiple tabs with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
Foo.
\\\\end{CodeBlock}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
Bar.
\\\\end{CodeBlock}
\\\\end{enumerate}


\\\\part{Mixed tabs and spaces}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
    Hello;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{enumerate}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
	Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax World.
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Bar.
\\\\end{enumerate}


\\\\part{Line breaks}


\\\\begin{itemize}
\\\\item\\\\relax [
] Hello;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [
] Hello;
\\\\end{enumerate}


\\\\part{Multiple unfinished characters}


\\\\begin{itemize}
\\\\item\\\\relax [  ] Hello;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [
] World;
\\\\item\\\\relax [		] Hello;
\\\\item\\\\relax [ 	 ] World.
\\\\end{enumerate}"
`;

exports[`rebber: remark specs task-list-ordered: task-list-ordered 1`] = `
"\\\\begin{enumerate}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{enumerate}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{enumerate}"
`;

exports[`rebber: remark specs task-list-unordered-asterisk: task-list-unordered-asterisk 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}"
`;

exports[`rebber: remark specs task-list-unordered-dash: task-list-unordered-dash 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}"
`;

exports[`rebber: remark specs task-list-unordered-plus: task-list-unordered-plus 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}"
`;

exports[`rebber: remark specs tidyness: tidyness 1`] = `
"\\\\begin{Quotation}
A list within a blockquote:

\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}
\\\\end{Quotation}"
`;

exports[`rebber: remark specs title-attributes: title-attributes 1`] = `
"\\\\part{Links}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Implementation & Characters & Nested & Mismatched & Escaped & Named Entities & Numbered Entities \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Markdown.pl & \\\\texttt{\\"} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{\\"} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{\\"} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{'} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{'} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{'} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
GitHub & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{()} & No & Yes & Yes & Yes & Yes \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\chapter{Double quotes}


\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\chapter{Single quotes}


\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\part{Images}


\\\\chapter{Double quotes}


\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\chapter{Single quotes}


\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}"
`;

exports[`rebber: remark specs toplevel-paragraphs: toplevel-paragraphs 1`] = `
"hello world
how are you
how are you



hello world



\\\\begin{CodeBlock}{text}
how are you
\\\\end{CodeBlock}



hello world



\\\\horizontalLine



hello world



\\\\part{how are you}


hello world



\\\\part{how are you}


hello world



\\\\begin{Quotation}
how are you
\\\\end{Quotation}



hello world



\\\\begin{itemize}
\\\\item\\\\relax how are you
\\\\end{itemize}


hello world



<div>how are you</div>

hello world
<span>how are you</span>



hello \\\\hyperref[how]{world}



\\\\footnote{\\\\label{how}\\\\externalLink{/are/you}{/are/you}}

<div>hello</div>

<span>hello</span>"
`;

exports[`rebber: remark specs tricky-list: tricky-list 1`] = `
"\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax Hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}"
`;

exports[`rebber: remark specs with config: custom macros amps-and-angles-encoding 1`] = `
"AT\\\\&T has an ampersand in their name.



AT\\\\&T is another way to write it.



This \\\\& that.



4 < 5.



6 > 5.



Here's a [linkReference(reference=1, content=link)] with an ampersand in the URL.



Here's a link with an amersand in the link text: [linkReference(reference=2, content=AT\\\\&T)].



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



[definition(identifier=1, url=http://example.com/?foo=1&bar=2, title=null)]

[definition(identifier=2, url=http://att.com/, title=AT&T)]"
`;

exports[`rebber: remark specs with config: custom macros auto-link 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



With an ampersand: \\\\externalLink{http://example.com/?foo=1\\\\&bar=2}{http://example.com/?foo=1\\\\&bar=2}



[unorderedList([listItem(In a list?)][listItem(\\\\externalLink{http://example.com/}{http://example.com/})][listItem(It should.)])]

[blockquote(Blockquoted: \\\\externalLink{http://example.com/}{http://example.com/})]

Auto-links should not occur here: \\\\texttt{<http://example.com/>}



[code(or here: <http://example.com/>)]"
`;

exports[`rebber: remark specs with config: custom macros auto-link-invalid 1`] = `
"<http:/



<https:/



<mailto:foobarbaz>



<http:/google



<foo@"
`;

exports[`rebber: remark specs with config: custom macros auto-link-lines 1`] = `
"hello world
\\\\externalLink{http://example.com}{http://example.com}



hello world
\\\\externalLink{somename@example.com}{mailto:somename@example.com}"
`;

exports[`rebber: remark specs with config: custom macros auto-link-output 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link without protocol, which should not render as an auto-link
because they are easily mistaken for HTML: \\\\externalLink{google.com}{google.com}."
`;

exports[`rebber: remark specs with config: custom macros auto-link-url 1`] = `
"This should be a link: \\\\externalLink{http://example.com/hello-world}{http://example.com/hello-world}.



Also, subdomain should be a part of the link (\\\\externalLink{http://foo.example.com/(hello[world])}{http://foo.example.com/(hello[world])}).



So should this: \\\\externalLink{foo@bar.com}{mailto:foo@bar.com}."
`;

exports[`rebber: remark specs with config: custom macros auto-link-url-invalid 1`] = `
"http://<example



https:// foo bar baz.



mailto:.



http://,



https://:



mailto:;



http://\\"



https://'



mailto:)



http://]"
`;

exports[`rebber: remark specs with config: custom macros backslash-escapes 1`] = `
"These should all get escaped:



Backslash: \\\\textbackslash{}



Backtick: \`



Asterisk: *



Underscore: \\\\_



Left brace: \\\\{



Right brace: \\\\}



Left bracket: [



Right bracket: ]



Left paren: (



Right paren: )



Greater-than: >



Hash: \\\\#



Period: .



Bang: !



Plus: +



Minus: -



\\\\textbf{GFM:}



Pipe: |



Tilde: \\\\textasciitilde{}



\\\\textbf{Commonmark:}



Quote: \\\\textbackslash{}\\"



Dollar: \\\\textbackslash{}\\\\$



Percentage: \\\\textbackslash{}\\\\%



Ampersand: \\\\textbackslash{}\\\\&



Single quote: \\\\textbackslash{}'



Comma: \\\\textbackslash{},



Forward slash: \\\\textbackslash{}/



Colon: \\\\textbackslash{}:



Semicolon: \\\\textbackslash{};



Less-than: \\\\textbackslash{}<



Equals: \\\\textbackslash{}=



Question mark: \\\\textbackslash{}?



At-sign: \\\\textbackslash{}@



Caret: \\\\textbackslash{}\\\\textasciicircum{}



New line: \\\\textbackslash{}
only works in paragraphs.



These should not, because they occur within a code block:



[code(Backslash: \\\\\\\\

Backtick: \\\\\`

Asterisk: \\\\*

Underscore: \\\\_

Left brace: \\\\{

Right brace: \\\\}

Left bracket: \\\\[

Right bracket: \\\\]

Left paren: \\\\(

Right paren: \\\\)

Greater-than: \\\\>

Hash: \\\\#

Period: \\\\.

Bang: \\\\!

Plus: \\\\+

Minus: \\\\-)]

\\\\textbf{GFM:}



[code(Pipe: \\\\|

Tilde: \\\\~)]

\\\\textbf{Commonmark:}



[code(Quote: \\\\\\"

Dollar: \\\\$

Percentage: \\\\%

Ampersand: \\\\&

Single quote: \\\\'

Comma: \\\\,

Forward slash: \\\\/

Colon: \\\\:

Semicolon: \\\\;

Less-than: \\\\<

Equals: \\\\=

Question mark: \\\\?

At-sign: \\\\@

Caret: \\\\^

New line: \\\\
only works in paragraphs.)]

Nor should these, which occur in code spans:



Backslash: \\\\texttt{\\\\textbackslash{}\\\\textbackslash{}}



Backtick: \\\\texttt{\\\\textbackslash{}\`}



Asterisk: \\\\texttt{\\\\textbackslash{}*}



Underscore: \\\\texttt{\\\\textbackslash{}\\\\_}



Left brace: \\\\texttt{\\\\textbackslash{}\\\\{}



Right brace: \\\\texttt{\\\\textbackslash{}\\\\}}



Left bracket: \\\\texttt{\\\\textbackslash{}[}



Right bracket: \\\\texttt{\\\\textbackslash{}]}



Left paren: \\\\texttt{\\\\textbackslash{}(}



Right paren: \\\\texttt{\\\\textbackslash{})}



Greater-than: \\\\texttt{\\\\textbackslash{}>}



Hash: \\\\texttt{\\\\textbackslash{}\\\\#}



Period: \\\\texttt{\\\\textbackslash{}.}



Bang: \\\\texttt{\\\\textbackslash{}!}



Plus: \\\\texttt{\\\\textbackslash{}+}



Minus: \\\\texttt{\\\\textbackslash{}-}



\\\\textbf{GFM:}



Pipe: \\\\texttt{\\\\textbackslash{}|}



Tilde: \\\\texttt{\\\\textbackslash{}\\\\textasciitilde{}}



\\\\textbf{Commonmark:}



Quote: \\\\texttt{\\\\textbackslash{}\\"}



Dollar: \\\\texttt{\\\\textbackslash{}\\\\$}



Percentage: \\\\texttt{\\\\textbackslash{}\\\\%}



Ampersand: \\\\texttt{\\\\textbackslash{}\\\\&}



Single quote: \\\\texttt{\\\\textbackslash{}'}



Comma: \\\\texttt{\\\\textbackslash{},}



Forward slash: \\\\texttt{\\\\textbackslash{}/}



Colon: \\\\texttt{\\\\textbackslash{}:}



Semicolon: \\\\texttt{\\\\textbackslash{};}



Less-than: \\\\texttt{\\\\textbackslash{}<}



Equals: \\\\texttt{\\\\textbackslash{}=}



Question mark: \\\\texttt{\\\\textbackslash{}?}



At-sign: \\\\texttt{\\\\textbackslash{}@}



Caret: \\\\texttt{\\\\textbackslash{}\\\\textasciicircum{}}



New line: \\\\texttt{\\\\textbackslash{} } only works in paragraphs.



These should get escaped, even though they're matching pairs for
other Markdown constructs:



*asterisks*



\\\\_underscores\\\\_



\`backticks\`



This is a code span with a literal backslash-backtick sequence: \\\\texttt{\\\\textbackslash{}\`}



This is a tag with unescaped backticks <span attr='\`ticks\`'>bar</span>.



This is a tag with backslashes <span attr='\\\\\\\\backslashes\\\\\\\\'>bar</span>."
`;

exports[`rebber: remark specs with config: custom macros block-elements 1`] = `
"[unorderedList([listItem(Different lists should receive two newline characters
between them.)])]


[unorderedList([listItem(This is another list.)])]

[blockquote([unorderedList([listItem(The same goes for lists in block quotes.)])][unorderedList([listItem(This is another list.)])])]

[unorderedList([listItem(And for lists in lists:

[orderedList([listItem(First sublist.)])])])]


[code(1.   Second sublist.)]

And for lists followed by indented code blocks:



[unorderedList([listItem(This is a paragraph in a list)])]


[code(And this is code();)]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-indented 1`] = `
"[blockquote(bar
baz)]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-lazy-code 1`] = `
"[blockquote([code(foo
bar)])]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-lazy-fence 1`] = `
"[blockquote([code(aNormalCodeBlockInABlockqoute();)])]

A paragraph.



[blockquote([code(thisIsAlsoSomeCodeInABlockquote();)])]

A paragraph.



[blockquote([code(aNonTerminatedCodeBlockInABlockquote();)]aNewCodeBlockFollowingTheBlockQuote();

[code()])]

A paragraph.



[blockquote(Something in a blockquote.

[code(aNewCodeBlock();)])]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-lazy-list 1`] = `
"[blockquote(This is a blockquote.

[unorderedList([listItem(And in normal mode this is an internal list, but in commonmark this is a top level list.)])])]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-lazy-rule 1`] = `
"[blockquote(This is a blockquote. Followed by a rule.

[thematicBreak(---)])]"
`;

exports[`rebber: remark specs with config: custom macros blockquote-list-item 1`] = `
"This fails in markdown.pl and upskirt:



[unorderedList([listItem(hello

[blockquote(world)])])]"
`;

exports[`rebber: remark specs with config: custom macros blockquotes 1`] = `
"[blockquote(This is a blockquote.)]

[blockquote(This is, in commonmark mode, another blockquote.)]"
`;

exports[`rebber: remark specs with config: custom macros blockquotes-empty-lines 1`] = `
"[blockquote(Note there is no space on the following line.

Note there is no space on the preceding line.)]"
`;

exports[`rebber: remark specs with config: custom macros blockquotes-with-code-blocks 1`] = `
"[blockquote(Example:

[code(sub status {
    print \\"working\\";
})]Or:

[code(sub status {
    return \\"working\\";
})])]"
`;

exports[`rebber: remark specs with config: custom macros bom 1`] = `
"heading1(Hello from a BOM)

Be careful when editing this file!"
`;

exports[`rebber: remark specs with config: custom macros breaks-hard 1`] = `
"These are not breaks:



Look at the
pretty line
breaks.



These are breaks:



Look at the[break(---)]pretty line[break(---)]breaks.



In \\\\texttt{commonmark: true} mode, an escaped newline character is exposed as a \\\\texttt{break} node:



Look at the\\\\textbackslash{}
pretty line\\\\textbackslash{}
breaks."
`;

exports[`rebber: remark specs with config: custom macros case-insensitive-refs 1`] = `
"[linkReference(reference=hi, content=hi)]



[definition(identifier=hi, url=/url, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros code-block 1`] = `
"Tildes:



[codeJavascript(alert('Hello World!');)]"
`;

exports[`rebber: remark specs with config: custom macros code-block-escape 1`] = `
"A little flaw:



[codePython(\\\\end{CodeBlock}
\\\\end   {CodeBlock})]

An ingenuous flaw:



[code(\\\\end\\\\end{CodeBlock}{CodeBlock}
\\\\input{/etc/passwd}
\\\\begin{CodeBlock}{text})]"
`;

exports[`rebber: remark specs with config: custom macros code-block-indentation 1`] = `
"Fenced code blocks are normally not exdented, however,
when the initial fence is indented by spaces, the value of
the code is exdented by up to that amount of spaces.



[code(    This is a code block...
        
    ...which is not exdented.)]

But...



[code(  This one...
      
  ...is.)]

And...



[code(So is this...
      
  ...one.)]"
`;

exports[`rebber: remark specs with config: custom macros code-block-nesting-bug 1`] = `
"GitHub, thus RedCarpet, has a bug where “nested” fenced code blocks,
even with shorter fences, can exit their actual “parent” block.



Note that this bug does not occur on indented code-blocks.



[codeFoo(\`\`\`bar
baz
\`\`\`)]

Even with a different fence marker:



[codeFoo(~~~bar
baz
~~~)]

And reversed:



[codeFoo(~~~bar
baz
~~~)]

[codeFoo(\`\`\`bar
baz
\`\`\`)]"
`;

exports[`rebber: remark specs with config: custom macros code-blocks 1`] = `
"code block on the first line



Regular text.



[code(code block indented by spaces)]

Regular text.



[code(the lines in this block  
all contain trailing spaces  )]

Regular Text.



[code(code block on the last line)]"
`;

exports[`rebber: remark specs with config: custom macros code-spans 1`] = `
"\\\\texttt{<test a=\\"} content of attribute \\\\texttt{\\">}



Fix for backticks within HTML tag: <span attr='\`ticks\`'>like this</span>



Here's how you put \\\\texttt{\`backticks\`} in a code span.



Additionally, empty code spans are NOT supported: \`\`.



Here’s an example, \\\\texttt{foo \` bar }.



And here, \\\\texttt{\`\`}.



\\\\texttt{// this is also inline code}



So is this \\\\texttt{foo bar baz}.



And this \\\\texttt{foo \`\` bar}



And \\\\texttt{this\\\\textbackslash{}}but this is text\`."
`;

exports[`rebber: remark specs with config: custom macros def-blocks 1`] = `
"[blockquote(hello

[definition(identifier=1, url=hello, title=null)])]

[thematicBreak(---)]

[blockquote(hello)]

[definition(identifier=2, url=hello, title=null)]

[unorderedList([listItem(hello)][listItem([definition(identifier=3, url=hello, title=null)])])]


[unorderedList([listItem(hello)])]

[definition(identifier=4, url=hello, title=null)]

[blockquote(foo
bar)]

[definition(identifier=1-1, url=foo, title=null)]

[blockquote(bar)]"
`;

exports[`rebber: remark specs with config: custom macros definition-newline 1`] = `
"[linkReference(reference=baz, content=baz)]: /url (
)



[foo]: /url \\"
\\"



[bar]: /url '
'



[definition(identifier=baz, url=/url, title=foo
bar)]

[definition(identifier=baz-1, url=/url, title=foo
bar)]

[definition(identifier=baz-1-1, url=/url, title=foo
bar)]

[linkReference(reference=baz, content=baz)]: /url 'foo"
`;

exports[`rebber: remark specs with config: custom macros definition-unclosed 1`] = `
"[foo]:



[definition(identifier=bar, url=</url, title=null)]

[foo]:"
`;

exports[`rebber: remark specs with config: custom macros definition-unclosed-attribute 1`] = `
"[baz]: /url (there



[foo]: /url \\"there



[bar]: /url 'there



[baz]: url (



[foo]: url \\"



[bar]: /url '



[baz]: <url>(



[foo]: <url>\\"



[bar]: <url>'"
`;

exports[`rebber: remark specs with config: custom macros deletion 1`] = `"hello \\\\sout{hi} world"`;

exports[`rebber: remark specs with config: custom macros double-link 1`] = `
"<p>Already linked: <a href=\\"http://example.com/\\">http://example.com/</a>.</p>

Already linked: \\\\externalLink{http://example.com/}{http://example.com/}.



Already linked: <a href=\\"http://example.com/\\">\\\\textbf{http://example.com/}</a>."
`;

exports[`rebber: remark specs with config: custom macros emphasis 1`] = `
"\\\\textit{emphasis}.



\\\\textbf{strong}."
`;

exports[`rebber: remark specs with config: custom macros emphasis-empty 1`] = `
"Hello ** ** world.



Hello \\\\_\\\\_	\\\\_\\\\_ world.



Hello *	* world.



Hello \\\\_	\\\\_ world."
`;

exports[`rebber: remark specs with config: custom macros emphasis-escaped-final-marker 1`] = `
"*bar*



**bar**



\\\\_bar\\\\_



\\\\_\\\\_bar\\\\_\\\\_"
`;

exports[`rebber: remark specs with config: custom macros emphasis-internal 1`] = `"These words should\\\\_not\\\\_be\\\\_emphasized."`;

exports[`rebber: remark specs with config: custom macros empty 1`] = `""`;

exports[`rebber: remark specs with config: custom macros entities 1`] = `
"Lots of entities are supported in mdast:  , \\\\&, ©, Æ,
Ď, ¾, ℋ, ⅆ,
∲, \\\\&c.  Even some entities with a missing
terminal semicolon are parsed correctly (as per the HTML5 spec):
ÿ, á, ©, and \\\\&.



However, \\\\&MadeUpEntities; are kept in the document.



Entities even work in the language flag of fenced code blocks:



[codeSome—language(alert('Hello');)]

Or in \\\\externalLink{línks}{\\\\textasciitilde{}/some—file}



Or in \\\\includegraphics{~/an–image.png}



But, entities are not interpreted in \\\\texttt{inline c\\\\&ouml;de}, or in
code blocks:



[code(C&Ouml;DE block.)]"
`;

exports[`rebber: remark specs with config: custom macros entities-advanced 1`] = `
"[blockquote(However, \\\\&MadeUpEntities; are kept in the document.)]

[blockquote(Entities even work in the language flag of fenced code blocks:)]

[blockquote([codeSome©language(alert('Hello');)])]

[blockquote(And in an auto-link: \\\\externalLink{http://example©xample.com}{http://example\\\\&copyxample.com})]

[blockquote(Foo and bar and http://example©xample.com and baz.)]

[blockquote(Or in \\\\externalLink{l©nks}{\\\\textasciitilde{}/some\\\\&copyfile})]

[blockquote(Or in \\\\externalLink{l©lnks}{\\\\textasciitilde{}/some\\\\&copyfile})]

[blockquote(Or in \\\\includegraphics{~/some&copyfile})]

[thematicBreak(---)]

[blockquote(Or in \\\\includegraphics{~/some&copyfile})]

[blockquote(Or in \\\\includegraphics{undefined})]

[blockquote([definition(identifier=1, url=http://example&copyxample.com, title=in some
pl©ce)])]

[blockquote([definition(identifier= 1 , url=http://example&copyxample.com, title=in some
pl©ce)])]

[thematicBreak(---)]

[blockquote(But, entities are not interpreted in \\\\texttt{inline c\\\\&oumlde}, or in
code blocks:)]

[blockquote([code(C&OumlDE block.)])]"
`;

exports[`rebber: remark specs with config: custom macros escaped-angles 1`] = `">"`;

exports[`rebber: remark specs with config: custom macros fenced-code 1`] = `
"[codeJs(var a = 'hello';
console.log(a + ' world');)]

[codeBash(echo \\"hello, \${WORLD}\\")]

[codeLongfence(Q: What do you call a tall person who sells stolen goods?)]

[codeManyTildes(A longfence!)]"
`;

exports[`rebber: remark specs with config: custom macros fenced-code-empty 1`] = `
"Normal with language tag:



[codeJs()]

With white space:



[codeBash()]

With very long fences:



[code()]

With nothing:



[code()]"
`;

exports[`rebber: remark specs with config: custom macros fenced-code-trailing-characters 1`] = `
"[codeJs(foo();
\`\`\`bash)]"
`;

exports[`rebber: remark specs with config: custom macros fenced-code-trailing-characters-2 1`] = `"[code(\`\`\` aaa)]"`;

exports[`rebber: remark specs with config: custom macros fenced-code-white-space-after-flag 1`] = `
"[codeJs(foo();)]

[codeBash(echo \\"hello, \${WORLD}\\")]"
`;

exports[`rebber: remark specs with config: custom macros hard-wrapped-paragraphs-with-list-like-lines 1`] = `
"In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.
Because a hard-wrapped line in the
123. middle of a paragraph looked like a
list item.



Here's one with a bullet.



[unorderedList([listItem(criminey.)])]

Non-GFM does not create a list for either.
GFM does not create a list for \\\\texttt{8.}, but does for \\\\texttt{*}.
CommonMark creates a list for both.
All versions create lists for the following.



[unorderedList([listItem(Here's one with a bullet.

[unorderedList([listItem(criminey.)])])])]

...and the following:



[orderedList([listItem(In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.)])]"
`;

exports[`rebber: remark specs with config: custom macros heading 1`] = `
"heading1(Heading 1)

heading2(Heading 2)

heading3(Heading 4)

heading4(Heading 4)

heading5(Heading 5)

heading6(Heading 6)"
`;

exports[`rebber: remark specs with config: custom macros heading-atx-closed-trailing-white-space 1`] = `
"heading1(Foo)

heading2(Bar)"
`;

exports[`rebber: remark specs with config: custom macros heading-atx-empty 1`] = `
"heading1()

heading2()

heading3()

heading4()

heading5()

heading6()"
`;

exports[`rebber: remark specs with config: custom macros heading-in-blockquote 1`] = `
"[blockquote(A blockquote
with some more text.)]

A normal paragraph.



[blockquote(heading2(A blockquote followed by a horizontal rule (in CommonMark).))]

[blockquote(heading2(A heading in a blockquote))]"
`;

exports[`rebber: remark specs with config: custom macros heading-in-paragraph 1`] = `
"Hello



heading1(World)"
`;

exports[`rebber: remark specs with config: custom macros heading-not-atx 1`] = `
"\\\\#This is not a heading, per CommonMark: \\\\externalLink{http://spec.commonmark.org/0.17/\\\\#example-25}{http://spec.commonmark.org/0.17/\\\\#example-25}



Kramdown (GitHub) neither supports unspaced ATX-headings.



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h7?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h8?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h9?



More than six \\\\# characters is not a heading: \\\\externalLink{http://spec.commonmark.org/0.26/\\\\#example-33}{http://spec.commonmark.org/0.26/\\\\#example-33}"
`;

exports[`rebber: remark specs with config: custom macros heading-setext-with-initial-spacing 1`] = `
"heading1(Heading 1)

heading2(Heading 2)

Both these headings caused positional problems in on commit daa344c and before."
`;

exports[`rebber: remark specs with config: custom macros horizontal-rules 1`] = `
"Dashes:



[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(- - -)]

Asterisks:



[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(***)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(* * *)]

Underscores:



[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(___)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

[code(_ _ _)]"
`;

exports[`rebber: remark specs with config: custom macros horizontal-rules-adjacent 1`] = `
"[thematicBreak(---)]

[thematicBreak(---)]

[thematicBreak(---)]

The three asterisks are not a Setext header.



This is a paragraph.



[thematicBreak(---)]

This is another paragraph.



[thematicBreak(---)]

heading2(But this is a secondary heading.)

[thematicBreak(---)]"
`;

exports[`rebber: remark specs with config: custom macros hr 1`] = `"[thematicBreak(---)]"`;

exports[`rebber: remark specs with config: custom macros hr-list-break 1`] = `
"[unorderedList([listItem(hello world)][listItem(how are)])]

[thematicBreak(---)]

you today?



The above asterisks do split the list, but the below ones do not.



[unorderedList([listItem(hello world)][listItem(how are)][listItem([thematicBreak(---)]you today?)])]


[unorderedList([listItem(Neither do these)][listItem(how are)][listItem([unorderedList([listItem([unorderedList([listItem(you today?)])])])])])]


[unorderedList([listItem(But these do)][listItem(how are)])]

[thematicBreak(---)]

you today?"
`;

exports[`rebber: remark specs with config: custom macros html-advanced 1`] = `
"Simple block on one line:



<div>foo</div>

And nested without indentation:



<div>
<div>
<div>
foo
</div>
<div style=\\">\\"/>
</div>
<div>bar</div>
</div>"
`;

exports[`rebber: remark specs with config: custom macros html-attributes 1`] = `
"heading1(Block-level)

<article foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<article foo>

<article>

<article :foo:bar:09:=\\"baz\\">

<article foo.bar_09->

<article foo.bar_09-   >

<article foo.bar_09-   />

<div baz
qux

heading1(Inline)

<span foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<span foo>

<span>

<span :foo:bar:09:=\\"baz\\">

<span foo.bar_09->

<span foo.bar_09-   >

<span foo.bar_09-   />

<span this is
invalid"
`;

exports[`rebber: remark specs with config: custom macros html-cdata 1`] = `
"<![CDATA[
fooBarBaz()
]]>

foo <![CDATA[bar]]>"
`;

exports[`rebber: remark specs with config: custom macros html-comments 1`] = `
"Paragraph one.



<!-- This is a simple comment -->

<!--
	This is another comment.
-->

What follows is not an HTML comment because it contains
two consecutive dashes:
\\\\externalLink{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}.



<!-- one comment block -- -- with two comments -->

But this is fine (in commonmark):



<!-- one comment block - with a dash -->

And, this is wrong (in commonmark):



<!-->-->

The end."
`;

exports[`rebber: remark specs with config: custom macros html-declaration 1`] = `
"<!DOCTYPE html>

foo <!BAR br BAZ>



<!doctype html>

<!valid >

<!invalid>"
`;

exports[`rebber: remark specs with config: custom macros html-indented 1`] = `
"<div>
  *hello*
   <div>

 <span>
  *hello*
   <span>

  <!doctype html>

   <!-- baz -->

alpha <!-- baz -->"
`;

exports[`rebber: remark specs with config: custom macros html-processing-instruction 1`] = `
"<?php
  echo '>';
?>"
`;

exports[`rebber: remark specs with config: custom macros html-simple 1`] = `
"Here's a simple block:



<div>
	foo
</div>

This should be a code block, though:



[code(<div>
	foo
</div>)]

As should this:



[code(<div>foo</div>)]

Now, nested:



<div>
	<div>
		<div>
			foo
		</div>
	</div>
</div>

This should just be an HTML comment:



<!-- Comment -->

Multiline:



<!--
Blah
Blah
-->

Code block:



[code(<!-- Comment -->)]

Just plain comment, with trailing spaces on the line:



<!-- foo -->   

Code:



[code(<hr>)]

Hr's:



<hr>

<hr>

<hr>

<hr>   

<hr>  

<hr> 

<hr class=\\"foo\\" id=\\"bar\\" />

<hr class=\\"foo\\" id=\\"bar\\"/>

<hr class=\\"foo\\" id=\\"bar\\" >"
`;

exports[`rebber: remark specs with config: custom macros html-tags 1`] = `
"heading1(Block)

<article>

<ARTICLE>

<ArTiClE>

<-article>



<article foo=

<article foo=\\"bar

<article foo='bar

<article foo=bar 

<article foo=bar >

<article/>

<-article/>



</article>

</ARTICLE>

</aRtIcLe>

</article  >

</-article  >



</article

</article  

heading1(Inline)

<span>

<SPAN>

<SpAn>

<-span>



<span/>

<-span/>



</span>

</SPAN>

</SpAn>

</span  >

</-span>



</span



</span



<span foo=



<span foo=\\"bar



<span foo='bar



<span foo=bar



<span foo=bar >"
`;

exports[`rebber: remark specs with config: custom macros image-basename-dots 1`] = `
"\\\\includegraphics{{x.yz}.png}



\\\\includegraphics{/a/{w.x.y.z}.png}



\\\\includegraphics{/{w.x.y.z}.png}



\\\\includegraphics{/foo.bar/{x.yz}.png}"
`;

exports[`rebber: remark specs with config: custom macros image-empty-alt 1`] = `"\\\\includegraphics{/xyz.png}"`;

exports[`rebber: remark specs with config: custom macros image-in-link 1`] = `
"heading1(\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/unicorn-approved-ff69b4.svg}}{http://shields.io})

\\\\externalLink{\\\\includegraphics{https://img.shields.io/travis/wooorm/mdast.svg?style=flat}}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/style-flat--squared-green.svg?style=flat-square}}{http://example.com}"
`;

exports[`rebber: remark specs with config: custom macros image-path-escape 1`] = `"\\\\includegraphics{a[b]\\\\ \\\\input{/etc/passwd\\\\image{[a](b)}"`;

exports[`rebber: remark specs with config: custom macros image-with-pipe 1`] = `"f|"`;

exports[`rebber: remark specs with config: custom macros images 1`] = `
"Lorem ipsum dolor sit \\\\includegraphics{http://amet.com/amet.jpeg}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\includegraphics{http://finibus.com/finibus.png} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\includegraphics{http://facilisi.com/facilisi.gif}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\includegraphics{http://faucibus.com/faucibus.tiff}."
`;

exports[`rebber: remark specs with config: custom macros invalid-link-definition 1`] = `"Something[2-3]"`;

exports[`rebber: remark specs with config: custom macros lazy-blockquotes 1`] = `
"[blockquote(hi there
bud)]"
`;

exports[`rebber: remark specs with config: custom macros link-in-link 1`] = `
"heading1(\\\\externalLink{mailto:test@example.com}{http://shields.io})

\\\\externalLink{https://travis-ci.org/wooorm/mdast}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{[](http://example.com \\"An example\\")}{http://example.com}"
`;

exports[`rebber: remark specs with config: custom macros link-spaces 1`] = `
"[alpha] (bravo



\\\\includegraphics{undefined} (delta
.com)



[echo]	(\\\\externalLink{http://foxtrot.golf}{http://foxtrot.golf})



\\\\includegraphics{undefined}   (india.com/juliett)"
`;

exports[`rebber: remark specs with config: custom macros link-whitespace 1`] = `
"[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie>.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie."
`;

exports[`rebber: remark specs with config: custom macros link-with-spaces 1`] = `
"\\\\externalLink{Hello}{./world and some spaces.html}



\\\\externalLink{Hello}{./world and some spaces.html}"
`;

exports[`rebber: remark specs with config: custom macros links 1`] = `
"Lorem ipsum dolor sit \\\\externalLink{amet}{http://amet.com}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\externalLink{finibus}{http://finibus.com} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\externalLink{facilisi}{http://facilisi.com}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\externalLink{faucibus}{http://faucibus.com}."
`;

exports[`rebber: remark specs with config: custom macros links-inline-style 1`] = `
"Just a \\\\externalLink{URL}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



[URL and title]( /url/has space ).



[URL and title]( /url/has space/ \\"url has space and title\\").



."
`;

exports[`rebber: remark specs with config: custom macros links-reference-proto 1`] = `
"A [linkReference(reference=tostring, content=primary)], [linkReference(reference=constructor, content=secondary)], and [linkReference(reference=__proto__, content=tertiary)] link.



[definition(identifier=tostring, url=http://primary.com, title=null)]

[definition(identifier=__proto__, url=http://tertiary.com, title=null)]

[definition(identifier=constructor, url=http://secondary.com, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros links-reference-style 1`] = `
"Foo [linkReference(reference=1, content=bar)].



Foo [linkReference(reference=1, content=bar)].



Foo [linkReference(reference=1, content=bar)].



[definition(identifier=1, url=/url/, title=Title)]

With [linkReference(reference=b, content=embedded [brackets])].



Indented [linkReference(reference=once, content=once)].



Indented [linkReference(reference=twice, content=twice)].



Indented [linkReference(reference=thrice, content=thrice)].



Indented [four] times.



[definition(identifier=once, url=/url, title=null)]

[definition(identifier=twice, url=/url, title=null)]

[definition(identifier=thrice, url=/url, title=null)]

[code([four]: /url)]

[definition(identifier=b, url=/url/, title=null)]

[thematicBreak(---)]

[linkReference(reference=this, content=this)] should work



So should [linkReference(reference=this, content=this)].



And [linkReference(reference=this, content=this)].



And [linkReference(reference=this, content=this)].



And [linkReference(reference=this, content=this)].



But not [that].



Nor [that].



Nor [that].



[Something in brackets like [linkReference(reference=this, content=this)] should work]



[Same with [linkReference(reference=this, content=this)].]



In this case, \\\\externalLink{this}{/somethingelse/} points to something else.



Backslashing should suppress [this] and [this].



[definition(identifier=this, url=foo, title=null)]

[thematicBreak(---)]

Here's one where the [linkReference(reference=link breaks, content=link
breaks)] across lines.



Here's another where the [linkReference(reference=link breaks, content=link
breaks)] across lines, but with a line-ending space.



[definition(identifier=link breaks, url=/url/, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros links-shortcut-references 1`] = `
"This is the [linkReference(reference=simple case, content=simple case)].



[definition(identifier=simple case, url=/simple, title=null)]

This one has a [linkReference(reference=line break, content=line
break)].



This one has a [linkReference(reference=line break, content=line
break)] with a line-ending space.



[definition(identifier=line break, url=/foo, title=null)]

[linkReference(reference=that, content=this)] and the [linkReference(reference=other, content=other)]



[definition(identifier=this, url=/this, title=null)]

[definition(identifier=that, url=/that, title=null)]

[definition(identifier=other, url=/other, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros links-text-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-text-empty 1`] = `
"\\\\externalLink{}{./hello-world.html}.



\\\\externalLink{}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-text-entity-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-text-escaped-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-text-mismatched-delimiters 1`] = `
"[Hello \\\\externalLink{world!}{./hello-world.html}.



[Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-double-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-double-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-double-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-double-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-empty-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-empty-parentheses 1`] = `
"[Hello](./world.html ()).



[Hello](<./world.html> ()).



\\\\includegraphics{undefined}(./world.html ()).



\\\\includegraphics{undefined}(<./world.html> ())."
`;

exports[`rebber: remark specs with config: custom macros links-title-empty-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-parentheses 1`] = `
"[Hello](./world.html (Hello World!)).



[Hello](<./world.html> (Hello World!)).



\\\\includegraphics{undefined}(./world.html (Hello World!)).



\\\\includegraphics{undefined}(<./world.html> (Hello World!))."
`;

exports[`rebber: remark specs with config: custom macros links-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-single-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-single-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-single-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-single-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}."
`;

exports[`rebber: remark specs with config: custom macros links-title-unclosed 1`] = `
"[Hello](./world.html 'Hello



[Hello](<./world.html> 'Hello



\\\\includegraphics{undefined}(./world.html 'Hello



\\\\includegraphics{undefined}(<./world.html> 'Hello



[Hello](./world.html \\"Hello



[Hello](<./world.html> \\"Hello



\\\\includegraphics{undefined}(./world.html \\"Hello



\\\\includegraphics{undefined}(<./world.html> \\"Hello



[Hello](./world.html (Hello



[Hello](<./world.html> (Hello



\\\\includegraphics{undefined}(./world.html (Hello



\\\\includegraphics{undefined}(<./world.html> (Hello"
`;

exports[`rebber: remark specs with config: custom macros links-url-empty 1`] = `
".



.



\\\\includegraphics{}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs with config: custom macros links-url-empty-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{\\"World!\\"}.



\\\\externalLink{Hello}{\\"World!\\"}.



.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs with config: custom macros links-url-empty-title-parentheses 1`] = `
"\\\\externalLink{Hello}{(World!)}.



\\\\externalLink{Hello}{(World!)}.



[World](<> (World!)).



\\\\includegraphics{(World!)}.



\\\\includegraphics{(World!)}.



\\\\includegraphics{undefined}(<> (World!))."
`;

exports[`rebber: remark specs with config: custom macros links-url-empty-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{'World!'}.



\\\\externalLink{Hello}{'World!'}.



.



\\\\includegraphics{'World!'}.



\\\\includegraphics{'World!'}.



\\\\includegraphics{}."
`;

exports[`rebber: remark specs with config: custom macros links-url-entity-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs with config: custom macros links-url-escaped-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs with config: custom macros links-url-mismatched-parentheses 1`] = `
"[Hello](./world(and-hello(world)).



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld}).



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{undefined}(./world(and-hello(world)).



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld}).



\\\\includegraphics{./world(and)helloworld)}."
`;

exports[`rebber: remark specs with config: custom macros links-url-nested-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}."
`;

exports[`rebber: remark specs with config: custom macros links-url-new-line 1`] = `
"[Hello](./wo
rld.html).



\\\\externalLink{Hello}{./wo
rld.html}.



\\\\includegraphics{undefined}(./wo
rld.png).



\\\\includegraphics{./wo
rld.png}."
`;

exports[`rebber: remark specs with config: custom macros links-url-unclosed 1`] = `
"[Hello](



[World](<



\\\\includegraphics{undefined}(



\\\\includegraphics{undefined}(<"
`;

exports[`rebber: remark specs with config: custom macros links-url-white-space 1`] = `
"[Hello](./wo rld.html).



\\\\externalLink{Hello}{./wo rld.html}.



\\\\includegraphics{undefined}(./wo rld.png).



\\\\includegraphics{./wo rld.png}."
`;

exports[`rebber: remark specs with config: custom macros list 1`] = `
"heading1(List bullets)

[unorderedList([listItem(One:

[unorderedList([listItem(Nested one;)][listItem(Nested two:

[unorderedList([listItem(Nested three.)])])])])][listItem(Two;)][listItem(Three.)])]"
`;

exports[`rebber: remark specs with config: custom macros list-after-list 1`] = `
"[unorderedList([listItem(item)][listItem(item)][listItem(item)])]

[orderedList([listItem(item)][listItem(item)][listItem(item)])]

[thematicBreak(---)]

[unorderedList([listItem(item)][listItem(item)][listItem(item)])]

[orderedList([listItem(item)][listItem(item)][listItem(item)])]"
`;

exports[`rebber: remark specs with config: custom macros list-and-code 1`] = `
"[unorderedList([listItem(This is a list item)])]


[code(This is code)]"
`;

exports[`rebber: remark specs with config: custom macros list-continuation 1`] = `
"[orderedList([listItem(foo)])]

[thematicBreak(---)]

[orderedList([listItem(foo)])]

[codeJs(code();)]

[orderedList([listItem([linkReference(reference=foo, content=foo)])])]

[definition(identifier=foo, url=http://google.com, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros list-indentation 1`] = `
"[unorderedList([listItem(Hello 1a

World 1a.)][listItem(Hello 1b

World 1b.)][listItem(Hello 2a

World 2a.)][listItem(Hello 2b

World 2b.)][listItem(Hello 3a

World 3a.)][listItem(Hello 3b

World 3b.)][listItem(Hello 4a

World 4a.)][listItem(Hello 4b

World 4b.)][listItem([code(Hello 5a)]World 5a.)][listItem([code(Hello 5b

World 5b.)])])]"
`;

exports[`rebber: remark specs with config: custom macros list-item-empty 1`] = `"[unorderedList([listItem(foo)][listItem()][listItem(bar)][listItem(foo)][listItem()][listItem(bar)])]"`;

exports[`rebber: remark specs with config: custom macros list-item-empty-with-white-space 1`] = `"[unorderedList([listItem()])]"`;

exports[`rebber: remark specs with config: custom macros list-item-indent 1`] = `
"[orderedList([listItem(foo bar baz.)])]

<!--  -->

[orderedList([listItem(foo bar baz.)])]

<!--  -->

[orderedList([listItem(foo bar baz.)])]

<!--  -->

[orderedList([listItem(foo bar baz.
foo bar baz.)])]

<!--  -->

[orderedList([listItem(foo bar baz.
foo bar baz.)])]

<!--  -->

[orderedList([listItem(foo bar baz.
foo bar baz.)])]

<!--  -->

[unorderedList([listItem(foo bar baz.)])]

<!--  -->

[unorderedList([listItem(foo bar baz.
foo bar baz.)])]"
`;

exports[`rebber: remark specs with config: custom macros list-item-newline 1`] = `"[unorderedList([listItem(Foo)][listItem(Bar)])]"`;

exports[`rebber: remark specs with config: custom macros list-item-text 1`] = `
"[unorderedList([listItem(item1

[unorderedList([listItem(item2)])]text)])]"
`;

exports[`rebber: remark specs with config: custom macros list-ordered 1`] = `"[orderedList([listItem(foo;)][listItem(bar;)][listItem(baz.)])]"`;

exports[`rebber: remark specs with config: custom macros lists-with-code-and-rules 1`] = `
"heading2(foo)

[orderedList([listItem(bar:

[blockquote([unorderedList([listItem(one

[unorderedList([listItem(two

[unorderedList([listItem(three)][listItem(four)][listItem(five)])])])])])])])][listItem(foo:

[code(line 1
line 2)])][listItem(foo:

[orderedList([listItem(foo \\\\texttt{bar} bar:

[codeErb(some code here)])][listItem(foo \\\\texttt{bar} bar:

[codeErb(foo
---
bar
---
foo
bar)])][listItem(foo \\\\texttt{bar} bar:

[codeHtml(---
foo
foo
---
bar)])][listItem(foo \\\\texttt{bar} bar:

[code(foo
---
bar)])][listItem(foo)])])])]"
`;

exports[`rebber: remark specs with config: custom macros loose-lists 1`] = `
"[unorderedList([listItem(hello
world

how
are)][listItem(you)])]

better behavior:



[unorderedList([listItem(hello

[unorderedList([listItem(world
how

are
you)][listItem(today)])])][listItem(hi)])]


[unorderedList([listItem(hello)][listItem(world)][listItem(hi)])]


[unorderedList([listItem(hello)][listItem(world)][listItem(hi)])]


[unorderedList([listItem(hello)][listItem(world

how)][listItem(hi)])]


[unorderedList([listItem(hello)][listItem(world)][listItem(how
are)])]


[unorderedList([listItem(hello)][listItem(world)][listItem(how
are)])]"
`;

exports[`rebber: remark specs with config: custom macros main 1`] = `
"[definition(identifier=test, url=http://google.com/, title=Google)]

heading1(A heading)

Just a note, I've found that I can't test my markdown parser vs others.
For example, both markdown.js and showdown code blocks in lists wrong. They're
also completely [linkReference(reference=test, content=inconsistent)] with regards to paragraphs in list items.



A link. Not anymore.



<aside>This will make me fail the test because
markdown.js doesnt acknowledge arbitrary html blocks =/</aside>

[unorderedList([listItem(List Item 1)][listItem(List Item 2

[unorderedList([listItem(New List Item 1
Hi, this is a list item.)][listItem(New List Item 2
Another item
Code goes here.
Lots of it...)][listItem(New List Item 3
The last item)])])][listItem(List Item 3
The final item.)][listItem(List Item 4
The real final item.)])]

Paragraph.



[blockquote([unorderedList([listItem(bq Item 1)][listItem(bq Item 2

[unorderedList([listItem(New bq Item 1)][listItem(New bq Item 2
Text here)])])])])]

[thematicBreak(---)]

[blockquote(Another blockquote!
I really need to get
more creative with
mockup text..
markdown.js breaks here again)]

heading2(Another Heading)

Hello \\\\textit{world}. Here is a \\\\externalLink{link}{//hello}.
And an image \\\\includegraphics{src}.
And an image with an empty alt attribute \\\\includegraphics{src}.



[code(Code goes here.
Lots of it...)]"
`;

exports[`rebber: remark specs with config: custom macros markdown-documentation-basics 1`] = `
"heading1(Markdown: Basics)

<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a href=\\"/projects/markdown/syntax\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

heading2(Getting the Gist of Markdown's Formatting Syntax)

This page offers a brief overview of what it's like to use Markdown.
The [linkReference(reference=s, content=syntax page)] provides complete, detailed documentation for
every feature, but Markdown should be very easy to pick up simply by
looking at a few examples of it in action. The examples on this page
are written in a before/after style, showing example syntax and the
HTML output produced by Markdown.



It's also helpful to simply try Markdown out; the [linkReference(reference=d, content=Dingus)] is a
web application that allows you type your own Markdown-formatted text
and translate it to XHTML.



\\\\textbf{Note:} This document is itself written using Markdown; you
can [linkReference(reference=src, content=see the source for it by adding '.text' to the URL)].



[definition(identifier=s, url=/projects/markdown/syntax, title=Markdown Syntax)]

[definition(identifier=d, url=/projects/markdown/dingus, title=Markdown Dingus)]

[definition(identifier=src, url=/projects/markdown/basics.text, title=null)]

heading2(Paragraphs, Headers, Blockquotes)

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



Markdown offers two styles of headers: \\\\textit{Setext} and \\\\textit{atx}.
Setext-style headers for \\\\texttt{<h1>} and \\\\texttt{<h2>} are created by
\\"underlining\\" with equal signs (\\\\texttt{=}) and hyphens (\\\\texttt{-}), respectively.
To create an atx-style header, you put 1-6 hash marks (\\\\texttt{\\\\#}) at the
beginning of the line -- the number of hashes equals the resulting
HTML header level.



Blockquotes are indicated using email-style '\\\\texttt{>}' angle brackets.



Markdown:



[code(A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

> This is a blockquote.
> 
> This is the second paragraph in the blockquote.
>
> ## This is an H2 in a blockquote)]

Output:



[code(<h1>A First Level Header</h1>

<h2>A Second Level Header</h2>

<p>Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.</p>

<p>The quick brown fox jumped over the lazy
dog's back.</p>

<h3>Header 3</h3>

<blockquote>
    <p>This is a blockquote.</p>
    
    <p>This is the second paragraph in the blockquote.</p>
    
    <h2>This is an H2 in a blockquote</h2>
</blockquote>)]

heading3(Phrase Emphasis)

Markdown uses asterisks and underscores to indicate spans of emphasis.



Markdown:



[code(Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.)]

Output:



[code(<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>)]

heading2(Lists)

Unordered (bulleted) lists use asterisks, pluses, and hyphens (\\\\texttt{*},
\\\\texttt{+}, and \\\\texttt{-}) as list markers. These three markers are
interchangable; this:



[code(*   Candy.
*   Gum.
*   Booze.)]

this:



[code(+   Candy.
+   Gum.
+   Booze.)]

and this:



[code(-   Candy.
-   Gum.
-   Booze.)]

all produce the same output:



[code(<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>)]

Ordered (numbered) lists use regular numbers, followed by periods, as
list markers:



[code(1.  Red
2.  Green
3.  Blue)]

Output:



[code(<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>)]

If you put blank lines between items, you'll get \\\\texttt{<p>} tags for the
list item text. You can create multi-paragraph list items by indenting
the paragraphs by 4 spaces or 1 tab:



[code(*   A list item.

    With multiple paragraphs.

*   Another item in the list.)]

Output:



[code(<ul>
<li><p>A list item.</p>
<p>With multiple paragraphs.</p></li>
<li><p>Another item in the list.</p></li>
</ul>)]

heading3(Links)

Markdown supports two styles for creating links: \\\\textit{inline} and
\\\\textit{reference}. With both styles, you use square brackets to delimit the
text you want to turn into a link.



Inline-style links use parentheses immediately after the link text.
For example:



[code(This is an [example link](http://example.com/).)]

Output:



[code(<p>This is an <a href=\\"http://example.com/\\">
example link</a>.</p>)]

Optionally, you may include a title attribute in the parentheses:



[code(This is an [example link](http://example.com/ \\"With a Title\\").)]

Output:



[code(<p>This is an <a href=\\"http://example.com/\\" title=\\"With a Title\\">
example link</a>.</p>)]

Reference-style links allow you to refer to your links by names, which
you define elsewhere in your document:



[code(I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/        \\"Google\\"
[2]: http://search.yahoo.com/  \\"Yahoo Search\\"
[3]: http://search.msn.com/    \\"MSN Search\\")]

Output:



[code(<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from <a href=\\"http://search.yahoo.com/\\"
title=\\"Yahoo Search\\">Yahoo</a> or <a href=\\"http://search.msn.com/\\"
title=\\"MSN Search\\">MSN</a>.</p>)]

The title attribute is optional. Link names may contain letters,
numbers and spaces, but are \\\\textit{not} case sensitive:



[code(I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/)]

Output:



[code(<p>I start my morning with a cup of coffee and
<a href=\\"http://www.nytimes.com/\\">The New York Times</a>.</p>)]

heading3(Images)

Image syntax is very much like link syntax.



Inline (titles are optional):



[code(![alt text](/path/to/img.jpg \\"Title\\"))]

Reference-style:



[code(![alt text][id]

[id]: /path/to/img.jpg \\"Title\\")]

Both of the above examples produce the same output:



[code(<img src=\\"/path/to/img.jpg\\" alt=\\"alt text\\" title=\\"Title\\" />)]

heading3(Code)

In a regular paragraph, you can create code span by wrapping text in
backtick quotes. Any ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} or
\\\\texttt{>}) will automatically be translated into HTML entities. This makes
it easy to use Markdown to write about HTML example code:



[code(I strongly recommend against using any \`<blink>\` tags.

I wish SmartyPants used named entities like \`&mdash;\`
instead of decimal-encoded entites like \`&#8212;\`.)]

Output:



[code(<p>I strongly recommend against using any
<code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like
<code>&amp;mdash;</code> instead of decimal-encoded
entites like <code>&amp;#8212;</code>.</p>)]

To specify an entire block of pre-formatted code, indent every line of
the block by 4 spaces or 1 tab. Just like with code spans, \\\\texttt{\\\\&}, \\\\texttt{<},
and \\\\texttt{>} characters will be escaped automatically.



Markdown:



[code(If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

    <blockquote>
        <p>For example.</p>
    </blockquote>)]

Output:



[code(<p>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:</p>

<pre><code>&lt;blockquote&gt;
    &lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre>)]"
`;

exports[`rebber: remark specs with config: custom macros markdown-documentation-syntax 1`] = `
"heading1(Markdown: Syntax)

<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a href=\\"/projects/markdown/basics\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

[unorderedList([listItem(\\\\externalLink{Overview}{\\\\#overview}

[unorderedList([listItem(\\\\externalLink{Philosophy}{\\\\#philosophy})][listItem(\\\\externalLink{Inline HTML}{\\\\#html})][listItem(\\\\externalLink{Automatic Escaping for Special Characters}{\\\\#autoescape})])])][listItem(\\\\externalLink{Block Elements}{\\\\#block}

[unorderedList([listItem(\\\\externalLink{Paragraphs and Line Breaks}{\\\\#p})][listItem(\\\\externalLink{Headers}{\\\\#header})][listItem(\\\\externalLink{Blockquotes}{\\\\#blockquote})][listItem(\\\\externalLink{Lists}{\\\\#list})][listItem(\\\\externalLink{Code Blocks}{\\\\#precode})][listItem(\\\\externalLink{Horizontal Rules}{\\\\#hr})])])][listItem(\\\\externalLink{Span Elements}{\\\\#span}

[unorderedList([listItem(\\\\externalLink{Links}{\\\\#link})][listItem(\\\\externalLink{Emphasis}{\\\\#em})][listItem(\\\\externalLink{Code}{\\\\#code})][listItem(\\\\externalLink{Images}{\\\\#img})])])][listItem(\\\\externalLink{Miscellaneous}{\\\\#misc}

[unorderedList([listItem(\\\\externalLink{Backslash Escapes}{\\\\#backslash})][listItem(\\\\externalLink{Automatic Links}{\\\\#autolink})])])])]

\\\\textbf{Note:} This document is itself written using Markdown; you
can [linkReference(reference=src, content=see the source for it by adding '.text' to the URL)].



[definition(identifier=src, url=/projects/markdown/syntax.text, title=null)]

[thematicBreak(---)]

<h2 id=\\"overview\\">Overview</h2>

<h3 id=\\"philosophy\\">Philosophy</h3>

Markdown is intended to be as easy-to-read and easy-to-write as is feasible.



Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters -- including [linkReference(reference=1, content=Setext)], [linkReference(reference=2, content=atx)], [linkReference(reference=3, content=Textile)], [linkReference(reference=4, content=reStructuredText)],
[linkReference(reference=5, content=Grutatext)], and [linkReference(reference=6, content=EtText)] -- the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.



[definition(identifier=1, url=http://docutils.sourceforge.net/mirror/setext.html, title=null)]

[definition(identifier=2, url=http://www.aaronsw.com/2002/atx/, title=null)]

[definition(identifier=3, url=http://textism.com/tools/textile/, title=null)]

[definition(identifier=4, url=http://docutils.sourceforge.net/rst.html, title=null)]

[definition(identifier=5, url=http://www.triptico.com/software/grutatxt.html, title=null)]

[definition(identifier=6, url=http://ettext.taint.org/doc/, title=null)]

To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.



<h3 id=\\"html\\">Inline HTML</h3>

Markdown's syntax is intended for one purpose: to be used as a
format for \\\\textit{writing} for the web.



Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is \\\\textit{not} to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a \\\\textit{publishing} format; Markdown is a \\\\textit{writing}
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.



For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.



The only restrictions are that block-level HTML elements -- e.g. \\\\texttt{<div>},
\\\\texttt{<table>}, \\\\texttt{<pre>}, \\\\texttt{<p>}, etc. -- must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) \\\\texttt{<p>} tags around HTML block-level tags.



For example, to add an HTML table to a Markdown article:



[code(This is a regular paragraph.

<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>

This is another regular paragraph.)]

Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style \\\\texttt{*emphasis*} inside an
HTML block.



Span-level HTML tags -- e.g. \\\\texttt{<span>}, \\\\texttt{<cite>}, or \\\\texttt{<del>} -- can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML \\\\texttt{<a>} or \\\\texttt{<img>} tags instead of Markdown's
link or image syntax, go right ahead.



Unlike block-level HTML tags, Markdown syntax \\\\textit{is} processed within
span-level tags.



<h3 id=\\"autoescape\\">Automatic Escaping for Special Characters</h3>

In HTML, there are two characters that demand special treatment: \\\\texttt{<}
and \\\\texttt{\\\\&}. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. \\\\texttt{\\\\&lt;}, and
\\\\texttt{\\\\&amp;}.



Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT\\\\&T', you need to write '\\\\texttt{AT\\\\&amp;T}'. You even need to
escape ampersands within URLs. Thus, if you want to link to:



[code(http://images.google.com/images?num=30&q=larry+bird)]

you need to encode the URL as:



[code(http://images.google.com/images?num=30&amp;q=larry+bird)]

in your anchor tag \\\\texttt{href} attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.



Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into \\\\texttt{\\\\&amp;}.



So, if you want to include a copyright symbol in your article, you can write:



[code(&copy;)]

and Markdown will leave it alone. But if you write:



[code(AT&T)]

Markdown will translate it to:



[code(AT&amp;T)]

Similarly, because Markdown supports \\\\externalLink{inline HTML}{\\\\#html}, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:



[code(4 < 5)]

Markdown will translate it to:



[code(4 &lt; 5)]

However, inside Markdown code spans and blocks, angle brackets and
ampersands are \\\\textit{always} encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single \\\\texttt{<}
and \\\\texttt{\\\\&} in your example code needs to be escaped.)



[thematicBreak(---)]

<h2 id=\\"block\\">Block Elements</h2>

<h3 id=\\"p\\">Paragraphs and Line Breaks</h3>

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



The implication of the \\"one or more consecutive lines of text\\" rule is
that Markdown supports \\"hard-wrapped\\" text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's \\"Convert Line Breaks\\" option) which translate every line break
character in a paragraph into a \\\\texttt{<br />} tag.



When you \\\\textit{do} want to insert a \\\\texttt{<br />} break tag using Markdown, you
end a line with two or more spaces, then type return.



Yes, this takes a tad more effort to create a \\\\texttt{<br />}, but a simplistic
\\"every line break is a \\\\texttt{<br />}\\" rule wouldn't work for Markdown.
Markdown's email-style [linkReference(reference=bq, content=blockquoting)] and multi-paragraph [linkReference(reference=l, content=list items)]
work best -- and look better -- when you format them with hard breaks.



[definition(identifier=bq, url=#blockquote, title=null)]

[definition(identifier=l, url=#list, title=null)]

<h3 id=\\"header\\">Headers</h3>

Markdown supports two styles of headers, [linkReference(reference=1, content=Setext)] and [linkReference(reference=2, content=atx)].



Setext-style headers are \\"underlined\\" using equal signs (for first-level
headers) and dashes (for second-level headers). For example:



[code(This is an H1
=============

This is an H2
-------------)]

Any number of underlining \\\\texttt{=}'s or \\\\texttt{-}'s will work.



Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:



[code(# This is an H1

## This is an H2

###### This is an H6)]

Optionally, you may \\"close\\" atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :



[code(# This is an H1 #

## This is an H2 ##

### This is an H3 ######)]

<h3 id=\\"blockquote\\">Blockquotes</h3>

Markdown uses email-style \\\\texttt{>} characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a \\\\texttt{>} before every line:



[code(> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
> 
> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
> id sem consectetuer libero luctus adipiscing.)]

Markdown allows you to be lazy and only put the \\\\texttt{>} before the first
line of a hard-wrapped paragraph:



[code(> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.)]

Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of \\\\texttt{>}:



[code(> This is the first level of quoting.
>
> > This is nested blockquote.
>
> Back to the first level.)]

Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:



[code(> ## This is a header.
> 
> 1.   This is the first list item.
> 2.   This is the second list item.
> 
> Here's some example code:
> 
>     return shell_exec(\\"echo $input | $markdown_script\\");)]

Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.



<h3 id=\\"list\\">Lists</h3>

Markdown supports ordered (numbered) and unordered (bulleted) lists.



Unordered lists use asterisks, pluses, and hyphens -- interchangably
-- as list markers:



[code(*   Red
*   Green
*   Blue)]

is equivalent to:



[code(+   Red
+   Green
+   Blue)]

and:



[code(-   Red
-   Green
-   Blue)]

Ordered lists use numbers followed by periods:



[code(1.  Bird
2.  McHale
3.  Parish)]

It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:



[code(<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>)]

If you instead wrote the list in Markdown like this:



[code(1.  Bird
1.  McHale
1.  Parish)]

or even:



[code(3. Bird
1. McHale
8. Parish)]

you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.



If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.



List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.



To make lists look nice, you can wrap items with hanging indents:



[code(*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.)]

But if you want to be lazy, you don't have to:



[code(*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.)]

If list items are separated by blank lines, Markdown will wrap the
items in \\\\texttt{<p>} tags in the HTML output. For example, this input:



[code(*   Bird
*   Magic)]

will turn into:



[code(<ul>
<li>Bird</li>
<li>Magic</li>
</ul>)]

But this:



[code(*   Bird

*   Magic)]

will turn into:



[code(<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>)]

List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:



[code(1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.)]

It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:



[code(*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.)]

To put a blockquote within a list item, the blockquote's \\\\texttt{>}
delimiters need to be indented:



[code(*   A list item with a blockquote:

    > This is a blockquote
    > inside a list item.)]

To put a code block within a list item, the code block needs
to be indented \\\\textit{twice} -- 8 spaces or two tabs:



[code(*   A list item with a code block:

        <code goes here>)]

It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:



[code(1986. What a great season.)]

In other words, a \\\\textit{number-period-space} sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:



[code(1986\\\\. What a great season.)]

<h3 id=\\"precode\\">Code Blocks</h3>

Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both \\\\texttt{<pre>} and \\\\texttt{<code>} tags.



To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:



[code(This is a normal paragraph:

    This is a code block.)]

Markdown will generate:



[code(<p>This is a normal paragraph:</p>

<pre><code>This is a code block.
</code></pre>)]

One level of indentation -- 4 spaces or 1 tab -- is removed from each
line of the code block. For example, this:



[code(Here is an example of AppleScript:

    tell application \\"Foo\\"
        beep
    end tell)]

will turn into:



[code(<p>Here is an example of AppleScript:</p>

<pre><code>tell application \\"Foo\\"
    beep
end tell
</code></pre>)]

A code block continues until it reaches a line that is not indented
(or the end of the article).



Within a code block, ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} and \\\\texttt{>})
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:



[code(    <div class=\\"footer\\">
        &copy; 2004 Foo Corporation
    </div>)]

will turn into:



[code(<pre><code>&lt;div class=\\"footer\\"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>)]

Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.



<h3 id=\\"hr\\">Horizontal Rules</h3>

You can produce a horizontal rule tag (\\\\texttt{<hr>}) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:



[code(* * *

***

*****

- - -

---------------------------------------

_ _ _)]

[thematicBreak(---)]

<h2 id=\\"span\\">Span Elements</h2>

<h3 id=\\"link\\">Links</h3>

Markdown supports two style of links: \\\\textit{inline} and \\\\textit{reference}.



In both styles, the link text is delimited by [square brackets].



To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an \\\\textit{optional}
title for the link, surrounded in quotes. For example:



[code(This is [an example](http://example.com/ \\"Title\\") inline link.

[This link](http://example.net/) has no title attribute.)]

Will produce:



[code(<p>This is <a href=\\"http://example.com/\\" title=\\"Title\\">
an example</a> inline link.</p>

<p><a href=\\"http://example.net/\\">This link</a> has no
title attribute.</p>)]

If you're referring to a local resource on the same server, you can
use relative paths:



[code(See my [About](/about/) page for details.)]

Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:



[code(This is [an example][id] reference-style link.)]

You can optionally use a space to separate the sets of brackets:



[code(This is [an example] [id] reference-style link.)]

Then, anywhere in the document, you define your link label like this,
on a line by itself:



[code([id]: http://example.com/  \\"Optional Title Here\\")]

That is:



[unorderedList([listItem(Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);)][listItem(followed by a colon;)][listItem(followed by one or more spaces (or tabs);)][listItem(followed by the URL for the link;)][listItem(optionally followed by a title attribute for the link, enclosed
in double or single quotes.)])]

The link URL may, optionally, be surrounded by angle brackets:



[code([id]: <http://example.com/>  \\"Optional Title Here\\")]

You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:



[code([id]: http://example.com/longish/path/to/resource/here
    \\"Optional Title Here\\")]

Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.



Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are \\\\textit{not} case sensitive. E.g. these two links:



[code([link text][a]
[link text][A])]

are equivalent.



The \\\\textit{implicit link name} shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
\\"Google\\" to the google.com web site, you could simply write:



[code([Google][])]

And then define the link:



[code([Google]: http://google.com/)]

Because link names may contain spaces, this shortcut even works for
multiple words in the link text:



[code(Visit [Daring Fireball][] for more information.)]

And then define the link:



[code([Daring Fireball]: http://daringfireball.net/)]

Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.



Here's an example of reference links in action:



[code(I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        \\"Google\\"
  [2]: http://search.yahoo.com/  \\"Yahoo Search\\"
  [3]: http://search.msn.com/    \\"MSN Search\\")]

Using the implicit link name shortcut, you could instead write:



[code(I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        \\"Google\\"
  [yahoo]:  http://search.yahoo.com/  \\"Yahoo Search\\"
  [msn]:    http://search.msn.com/    \\"MSN Search\\")]

Both of the above examples will produce the following HTML output:



[code(<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from
<a href=\\"http://search.yahoo.com/\\" title=\\"Yahoo Search\\">Yahoo</a>
or <a href=\\"http://search.msn.com/\\" title=\\"MSN Search\\">MSN</a>.</p>)]

For comparison, here is the same paragraph written using
Markdown's inline link style:



[code(I get 10 times more traffic from [Google](http://google.com/ \\"Google\\")
than from [Yahoo](http://search.yahoo.com/ \\"Yahoo Search\\") or
[MSN](http://search.msn.com/ \\"MSN Search\\").)]

The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.



With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.



<h3 id=\\"em\\">Emphasis</h3>

Markdown treats asterisks (\\\\texttt{*}) and underscores (\\\\texttt{\\\\_}) as indicators of
emphasis. Text wrapped with one \\\\texttt{*} or \\\\texttt{\\\\_} will be wrapped with an
HTML \\\\texttt{<em>} tag; double \\\\texttt{*}'s or \\\\texttt{\\\\_}'s will be wrapped with an HTML
\\\\texttt{<strong>} tag. E.g., this input:



[code(*single asterisks*

_single underscores_

**double asterisks**

__double underscores__)]

will produce:



[code(<em>single asterisks</em>

<em>single underscores</em>

<strong>double asterisks</strong>

<strong>double underscores</strong>)]

You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.



Emphasis can be used in the middle of a word:



[code(un*fucking*believable)]

But if you surround an \\\\texttt{*} or \\\\texttt{\\\\_} with spaces, it'll be treated as a
literal asterisk or underscore.



To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:



[code(\\\\*this text is surrounded by literal asterisks\\\\*)]

<h3 id=\\"code\\">Code</h3>

To indicate a span of code, wrap it with backtick quotes (\\\\texttt{\`}).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:



[code(Use the \`printf()\` function.)]

will produce:



[code(<p>Use the <code>printf()</code> function.</p>)]

To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:



[code(\`\`There is a literal backtick (\`) here.\`\`)]

which will produce this:



[code(<p><code>There is a literal backtick (\`) here.</code></p>)]

The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:



[code(A single backtick in a code span: \`\` \` \`\`

A backtick-delimited string in a code span: \`\` \`foo\` \`\`)]

will produce:



[code(<p>A single backtick in a code span: <code>\`</code></p>

<p>A backtick-delimited string in a code span: <code>\`foo\`</code></p>)]

With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:



[code(Please don't use any \`<blink>\` tags.)]

into:



[code(<p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>)]

You can write this:



[code(\`&#8212;\` is the decimal-encoded equivalent of \`&mdash;\`.)]

to produce:



[code(<p><code>&amp;#8212;</code> is the decimal-encoded
equivalent of <code>&amp;mdash;</code>.</p>)]

<h3 id=\\"img\\">Images</h3>

Admittedly, it's fairly difficult to devise a \\"natural\\" syntax for
placing images into a plain text document format.



Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: \\\\textit{inline} and \\\\textit{reference}.



Inline image syntax looks like this:



[code(![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg \\"Optional title\\"))]

That is:



[unorderedList([listItem(An exclamation mark: \\\\texttt{!};)][listItem(followed by a set of square brackets, containing the \\\\texttt{alt}
attribute text for the image;)][listItem(followed by a set of parentheses, containing the URL or path to
the image, and an optional \\\\texttt{title} attribute enclosed in double
or single quotes.)])]

Reference-style image syntax looks like this:



[code(![Alt text][id])]

Where \\"id\\" is the name of a defined image reference. Image references
are defined using syntax identical to link references:



[code([id]: url/to/image  \\"Optional title attribute\\")]

As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML \\\\texttt{<img>} tags.



[thematicBreak(---)]

<h2 id=\\"misc\\">Miscellaneous</h2>

<h3 id=\\"autolink\\">Automatic Links</h3>

Markdown supports a shortcut style for creating \\"automatic\\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:



[code(<http://example.com/>)]

Markdown will turn this into:



[code(<a href=\\"http://example.com/\\">http://example.com/</a>)]

Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:



[code(<address@example.com>)]

into something like this:



[code(<a href=\\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
&#109;\\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;
&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>)]

which will render in a browser as a clickable link to \\"\\\\externalLink{address@example.com}{mailto:address@example.com}\\".



(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)



<h3 id=\\"backslash\\">Backslash Escapes</h3>

Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML \\\\texttt{<em>} tag), you can backslashes
before the asterisks, like this:



[code(\\\\*literal asterisks\\\\*)]

Markdown provides backslash escapes for the following characters:



[code(\\\\   backslash
\`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+	plus sign
-	minus sign (hyphen)
.   dot
!   exclamation mark)]"
`;

exports[`rebber: remark specs with config: custom macros mixed-indentation 1`] = `
"heading1(Mixed spaces and tabs)

[unorderedList([listItem(Very long
paragraph)])]

[orderedList([listItem(Very long
paragraph)])]

[unorderedList([listItem(Very long
paragraph)])]

[orderedList([listItem(Very long
paragraph)])]"
`;

exports[`rebber: remark specs with config: custom macros nested-blockquotes 1`] = `
"[blockquote(foo

[blockquote(bar)]foo)]"
`;

exports[`rebber: remark specs with config: custom macros nested-code 1`] = `
"\\\\texttt{hi ther \`\` ok \`\`\`}



\\\\texttt{\`hi ther\`}"
`;

exports[`rebber: remark specs with config: custom macros nested-em 1`] = `
"\\\\textit{test \\\\textbf{test} test}



\\\\textit{test \\\\textbf{test} test}"
`;

exports[`rebber: remark specs with config: custom macros nested-references 1`] = `
"This nested image should work:



[\\\\includegraphics{undefined}]



This nested link should not work:



[[Foo][bar]]"
`;

exports[`rebber: remark specs with config: custom macros nested-square-link 1`] = `
"[the \`]\` character](/url)



[the \\\\texttt{[} character](/url)



[the \`\` \\\\externalLink{ \`\`\` character}{/url}



\\\\externalLink{the \\\\texttt{\`} character}{/url}"
`;

exports[`rebber: remark specs with config: custom macros no-positionals 1`] = `
"This document tests for the working of \\\\texttt{position: false} as a parse
option.



[blockquote(Block-quotes

[unorderedList([listItem(With list items.)])])]

Another block-quote:



[blockquote([orderedList([listItem(And another list.)])])]

Some \\\\externalLink{deeply \\\\textbf{nested \\\\textit{elements}}}{http://example.com}



An entity: ©, and an warning entity: ©."
`;

exports[`rebber: remark specs with config: custom macros not-a-link 1`] = `"[test](not a link)"`;

exports[`rebber: remark specs with config: custom macros ordered-and-unordered-lists 1`] = `
"heading2(Unordered)

Asterisks tight:



[unorderedList([listItem(asterisk 1)][listItem(asterisk 2)][listItem(asterisk 3)])]

Asterisks loose:



[unorderedList([listItem(asterisk 1)][listItem(asterisk 2)][listItem(asterisk 3)])]

[thematicBreak(---)]

Pluses tight:



[unorderedList([listItem(Plus 1)][listItem(Plus 2)][listItem(Plus 3)])]

Pluses loose:



[unorderedList([listItem(Plus 1)][listItem(Plus 2)][listItem(Plus 3)])]

[thematicBreak(---)]

Minuses tight:



[unorderedList([listItem(Minus 1)][listItem(Minus 2)][listItem(Minus 3)])]

Minuses loose:



[unorderedList([listItem(Minus 1)][listItem(Minus 2)][listItem(Minus 3)])]

heading2(Ordered)

Tight:



[orderedList([listItem(First)][listItem(Second)][listItem(Third)])]

and:



[orderedList([listItem(One)][listItem(Two)][listItem(Three)])]

Loose using tabs:



[orderedList([listItem(First)][listItem(Second)][listItem(Third)])]

and using spaces:



[orderedList([listItem(One)][listItem(Two)][listItem(Three)])]

Multiple paragraphs:



[orderedList([listItem(Item 1, graf one.

Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.)][listItem(Item 2.)][listItem(Item 3.)])]

heading2(Nested)

[unorderedList([listItem(Tab

[unorderedList([listItem(Tab

[unorderedList([listItem(Tab)])])])])])]

Here's another:



[orderedList([listItem(First)][listItem(Second:

[unorderedList([listItem(Fee)][listItem(Fie)][listItem(Foe)])])][listItem(Third)])]

Same thing but with paragraphs:



[orderedList([listItem(First)][listItem(Second:

[unorderedList([listItem(Fee)][listItem(Fie)][listItem(Foe)])])][listItem(Third)])]

This was an error in Markdown 1.0.1:



[unorderedList([listItem(this

[unorderedList([listItem(sub)])]that)])]"
`;

exports[`rebber: remark specs with config: custom macros ordered-different-types 1`] = `
"[orderedList([listItem(foo)][listItem(bar
3) baz)])]"
`;

exports[`rebber: remark specs with config: custom macros ordered-with-parentheses 1`] = `
"heading2(Ordered)

Tight:



1)	First
2)	Second
3)	Third



and:



1) One
2) Two
3) Three



Loose using tabs:



1)	First



2)	Second



3)	Third



and using spaces:



1) One



2) Two



3) Three



Multiple paragraphs:



1)	Item 1, graf one.



[code(Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.)]

2)	Item 2.



3)	Item 3."
`;

exports[`rebber: remark specs with config: custom macros paragraphs-and-indentation 1`] = `
"heading1(Without lines.)

This is a paragraph
and this is further text



This is a paragraph
and this is further text



This is a paragraph with some asterisks



[code(***)]

This is a paragraph followed by a horizontal rule



[thematicBreak(---)]

heading1(With lines.)

This is a paragraph



[code(and this is code)]

This is a paragraph



and this is a new paragraph



This is a paragraph with some asterisks in a code block



[code(***)]

This is a paragraph followed by a horizontal rule



[thematicBreak(---)]"
`;

exports[`rebber: remark specs with config: custom macros paragraphs-empty 1`] = `
"aaa



heading1(aaa)

bbb



ccc"
`;

exports[`rebber: remark specs with config: custom macros ref-paren 1`] = `
"[linkReference(reference=hi, content=hi)]



[definition(identifier=hi, url=/url, title=there)]"
`;

exports[`rebber: remark specs with config: custom macros reference-image-empty-alt 1`] = `
"\\\\includegraphics{/xyz.png}



[definition(identifier=1, url=/xyz.png, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros reference-link-escape 1`] = `
"[b*r*], [linkReference(reference=b\\\\*r*, content=b*r*)], [linkReference(reference=b\\\\*r*, content=b*r*)].



\\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}.



[definition(identifier=b\\\\*r*, url=http://google.com, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros reference-link-not-closed 1`] = `
"[bar]bar



[bar]



[bar]"
`;

exports[`rebber: remark specs with config: custom macros reference-link-with-angle-brackets 1`] = `
"[linkReference(reference=foo, content=foo)]



[definition(identifier=foo, url=./url with spaces, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros reference-link-with-multiple-definitions 1`] = `
"[linkReference(reference=foo, content=foo)]



[definition(identifier=foo, url=first, title=null)]

[definition(identifier=foo-1, url=second, title=null)]"
`;

exports[`rebber: remark specs with config: custom macros same-bullet 1`] = `
"[unorderedList([listItem(test)])]


[unorderedList([listItem(test)])]


[unorderedList([listItem(test)])]"
`;

exports[`rebber: remark specs with config: custom macros stringify-escape 1`] = `
"Characters that should be escaped in general:



\\\\textbackslash{} \` * [



Characters that shouldn't:



\\\\{\\\\}]()\\\\#+-.!>\\"\\\\$\\\\%',/:;=?@\\\\textasciicircum{}\\\\textasciitilde{}



Underscores are \\\\_escaped\\\\_ unless they appear in\\\\_the\\\\_middle\\\\_of\\\\_a\\\\_word.
or \\\\textbf{\\\\_here}, or here\\\\_\\\\_



Ampersands are escaped only when they would otherwise start an entity:



[unorderedList([listItem(\\\\textbackslash{}©cat \\\\textbackslash{}\\\\& \\\\textbackslash{}\\\\&)][listItem(\\\\&copycat \\\\&amp; \\\\&\\\\#x26)][listItem(But: ©cat; \\\\texttt{\\\\&between;} \\\\&foo; \\\\& AT\\\\&T \\\\&c)])]

Open parenthesis should be escaped after a shortcut reference:



[ref](text)



And after a shortcut reference and a space (for GitHub):



[ref] (text)



Hyphen should be escaped at the beginning of a line:



- not a list item
- not a list item
+ not a list item



Same for angle brackets:



> not a block quote



And hash signs:



\\\\# not a heading
\\\\#\\\\# not a subheading



Text under a shortcut reference should be preserved verbatim:



[unorderedList([listItem([two*three])][listItem([two*three])][listItem([a\\\\textbackslash{}a])][listItem([a\\\\textbackslash{}a])][listItem([a\\\\textbackslash{}\\\\textbackslash{}a])][listItem([a\\\\_a\\\\_a])])]

\\\\textbf{GFM:}



Colon should be escaped in URLs:



[unorderedList([listItem(http\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment)][listItem(https\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment)][listItem(http://user:password@host:port/path?key=value\\\\#fragment)][listItem(https://user:password@host:port/path?key=value\\\\#fragment)])]

Double tildes should be \\\\textasciitilde{}\\\\textasciitilde{}escaped\\\\textasciitilde{}\\\\textasciitilde{}.
And here: foo\\\\textasciitilde{}\\\\textasciitilde{}.



Pipes should not be escaped here: |



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
here & they \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
should & tho|ugh \\\\\\\\ \\\\hline
\\\\end{longtabu}


And here:



| here   | they   |
| ---- | ----- |
| should | though |



And here:



here   | they
---- | ------
should | though



\\\\textbf{Commonmark:}



Open angle bracket should be escaped:



[unorderedList([listItem(\\\\textbackslash{}<div>\\\\textbackslash{}</div>)][listItem(\\\\textbackslash{}<http\\\\textbackslash{}:google.com>)][listItem(<div></div>)][listItem(<http:google.com>)])]"
`;

exports[`rebber: remark specs with config: custom macros strong-and-em-together-one 1`] = `
"\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word.



\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word."
`;

exports[`rebber: remark specs with config: custom macros strong-and-em-together-two 1`] = `
"perform\\\\_complicated\\\\_task



do\\\\_this\\\\_and\\\\_do\\\\_that\\\\_and\\\\_another\\\\_thing



perform\\\\textit{complicated}task



do\\\\textit{this}and\\\\textit{do}that\\\\textit{and}another*thing"
`;

exports[`rebber: remark specs with config: custom macros strong-emphasis 1`] = `
"Foo \\\\textbf{bar} \\\\textbf{baz}.



Foo \\\\textbf{bar} \\\\textbf{baz}."
`;

exports[`rebber: remark specs with config: custom macros strong-initial-white-space 1`] = `
"\\\\textbf{ bar }.



\\\\textbf{ bar }."
`;

exports[`rebber: remark specs with config: custom macros table 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Heading 1 & \\\\textbf{H}eading 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
Cell 5 & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}


[code(Test code)]

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\textit{Cell 5} & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-empty-initial-cell 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
 & a & c \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
a & b & c \\\\\\\\ \\\\hline
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-escaped-pipes 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
First & Second & third \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
first & second & third \\\\\\\\ \\\\hline
first & second | second & third | \\\\\\\\ \\\\hline
first & second \\\\textbackslash{} & third \\\\textbackslash{} \\\\\\\\ \\\\hline
first & second \\\\textbackslash{}| second & third \\\\textbackslash{}| \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-in-list 1`] = `
"[unorderedList([listItem(Unordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu})][listItem(Ordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu})])]"
`;

exports[`rebber: remark specs with config: custom macros table-invalid-alignment 1`] = `
"Missing alignment characters:



| a | b | c |
|   |---|---|
| d | e | f |



[thematicBreak(---)]

| a | b | c |
|---|---|   |
| d | e | f |



Invalid characters:



| a | b | c |
|---|-*-|---|
| d | e | f |"
`;

exports[`rebber: remark specs with config: custom macros table-loose 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-no-body 1`] = `
"heading1(Foo)

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Name & GitHub & Twitter \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-no-end-of-line 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
foo & bar \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-one-column 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
b \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-one-row 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-padded 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-pipes-in-code 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` &  &  & \` \\\\\\\\ \\\\hline
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-spaced 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros table-with-image 1`] = `
"Someone wanted to do this, let's implement it!



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
c1 & c2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
c3 & \\\\includegraphics{https://zestedesavoir.com/media/galleries/426/56dc4a1e-416b-4a9d-830d-95b45d58a17a.png} \\\\\\\\ \\\\hline
\\\\end{longtabu}"
`;

exports[`rebber: remark specs with config: custom macros tabs 1`] = `
"[unorderedList([listItem(this is a list item
indented with tabs)][listItem(this is a list item
indented with spaces)])]

Code:



[code(this code block is indented by one tab)]

And:



[code(	this code block is indented by two tabs)]

And:



[code(+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces)]"
`;

exports[`rebber: remark specs with config: custom macros tabs-and-spaces 1`] = `
"[unorderedList([listItem(this is a list item
indented with tabs)][listItem(this is a list item
indented with spaces)])]

Code:



[code(this code block is indented by one tab)]

And:



[code(	this code block is indented by two tabs)]

And:



[code(+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces)]"
`;

exports[`rebber: remark specs with config: custom macros task-list 1`] = `
"heading1(Empty items)

[unorderedList([listItem([ ])][listItem([	])])]

[orderedList([listItem([x])][listItem([X])])]

heading1(Single space)

[unorderedList(\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
)]

heading1(Tab)

[unorderedList(\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
)]

heading1(No white space with content)

[unorderedList([listItem([ ]Hello;)][listItem([	]World;)])]

[orderedList([listItem([x]Foo.)][listItem([X]Bar)])]

heading1(Single space with content)

[unorderedList(\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax World :D
)]

heading1(Single tab with content)

[unorderedList(\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Hello.
)]

heading1(Multiple spaces with content)

[unorderedList(\\\\item[$\\\\square$]\\\\relax [code(Hello;)]
\\\\item[$\\\\square$]\\\\relax [code(World;)]
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Bar.
)]

heading1(Multiple tabs with content)

[unorderedList(\\\\item[$\\\\square$]\\\\relax [code(Hello;)]
\\\\item[$\\\\square$]\\\\relax [code(World;)]
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax [code(Foo.)]
\\\\item[$\\\\boxtimes$]\\\\relax [code(Bar.)]
)]

heading1(Mixed tabs and spaces)

[unorderedList(\\\\item[$\\\\square$]\\\\relax [code(    Hello;)]
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax [code(World;)]
)]

[unorderedList(\\\\item[$\\\\square$]\\\\relax [code(	Hello;)]
\\\\item[$\\\\square$]\\\\relax World.
)]

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax Bar.
)]

heading1(Line breaks)

[unorderedList([listItem([
] Hello;)])]

[orderedList([listItem([
] Hello;)])]

heading1(Multiple unfinished characters)

[unorderedList([listItem([  ] Hello;)])]

[orderedList([listItem([
] World;)][listItem([		] Hello;)][listItem([ 	 ] World.)])]"
`;

exports[`rebber: remark specs with config: custom macros task-list-ordered 1`] = `
"[orderedList(\\\\item[$\\\\square$]\\\\relax Mercury;
[listItem([] Venus (this one’s invalid);)]\\\\item[$\\\\boxtimes$]\\\\relax Earth:

[orderedList(\\\\item[$\\\\boxtimes$]\\\\relax Moon.
)]
\\\\item[$\\\\square$]\\\\relax Mars;
[listItem([] Neptune (this one’s also invalid).)])]"
`;

exports[`rebber: remark specs with config: custom macros task-list-unordered-asterisk 1`] = `
"[unorderedList(\\\\item[$\\\\square$]\\\\relax Mercury;
[listItem([] Venus (this one’s invalid);)]\\\\item[$\\\\boxtimes$]\\\\relax Earth:

[unorderedList(\\\\item[$\\\\boxtimes$]\\\\relax Moon.
)]
\\\\item[$\\\\square$]\\\\relax Mars;
[listItem([] Neptune (this one’s also invalid).)])]"
`;

exports[`rebber: remark specs with config: custom macros task-list-unordered-dash 1`] = `
"[unorderedList(\\\\item[$\\\\square$]\\\\relax Mercury;
[listItem([] Venus (this one’s invalid);)]\\\\item[$\\\\boxtimes$]\\\\relax Earth:

[unorderedList(\\\\item[$\\\\boxtimes$]\\\\relax Moon.
)]
\\\\item[$\\\\square$]\\\\relax Mars;
[listItem([] Neptune (this one’s also invalid).)])]"
`;

exports[`rebber: remark specs with config: custom macros task-list-unordered-plus 1`] = `
"[unorderedList(\\\\item[$\\\\square$]\\\\relax Mercury;
[listItem([] Venus (this one’s invalid);)]\\\\item[$\\\\boxtimes$]\\\\relax Earth:

[unorderedList(\\\\item[$\\\\boxtimes$]\\\\relax Moon.
)]
\\\\item[$\\\\square$]\\\\relax Mars;
[listItem([] Neptune (this one’s also invalid).)])]"
`;

exports[`rebber: remark specs with config: custom macros tidyness 1`] = `
"[blockquote(A list within a blockquote:

[unorderedList([listItem(asterisk 1)][listItem(asterisk 2)][listItem(asterisk 3)])])]"
`;

exports[`rebber: remark specs with config: custom macros title-attributes 1`] = `
"heading1(Links)

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Implementation & Characters & Nested & Mismatched & Escaped & Named Entities & Numbered Entities \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Markdown.pl & \\\\texttt{\\"} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{\\"} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{\\"} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{'} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{'} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{'} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
GitHub & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{()} & No & Yes & Yes & Yes & Yes \\\\\\\\ \\\\hline
\\\\end{longtabu}


heading2(Double quotes)

\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



heading2(Single quotes)

\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



heading1(Images)

heading2(Double quotes)

\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



heading2(Single quotes)

\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}"
`;

exports[`rebber: remark specs with config: custom macros toplevel-paragraphs 1`] = `
"hello world
how are you
how are you



hello world



[code(how are you)]

hello world



[thematicBreak(---)]

hello world



heading1(how are you)

hello world



heading1(how are you)

hello world



[blockquote(how are you)]

hello world



[unorderedList([listItem(how are you)])]

hello world



<div>how are you</div>

hello world
<span>how are you</span>



hello [linkReference(reference=how, content=world)]



[definition(identifier=how, url=/are/you, title=null)]

<div>hello</div>

<span>hello</span>"
`;

exports[`rebber: remark specs with config: custom macros tricky-list 1`] = `
"\\\\textbf{hello} \\\\textit{world}



[unorderedList([listItem(hello world)])]

\\\\textbf{hello} \\\\textit{world}



[unorderedList([listItem(hello world)])]

\\\\textbf{hello} \\\\textit{world}



[unorderedList([listItem(Hello world)])]

\\\\textbf{hello} \\\\textit{world}



[unorderedList([listItem(hello world)])]"
`;

exports[`toLaTeX: remark specs amps-and-angles-encoding: amps-and-angles-encoding 1`] = `
"AT\\\\&T has an ampersand in their name.



AT\\\\&T is another way to write it.



This \\\\& that.



4 < 5.



6 > 5.



Here's a \\\\hyperref[1]{link} with an ampersand in the URL.



Here's a link with an amersand in the link text: \\\\hyperref[2]{AT\\\\&T}.



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



Here's an inline \\\\externalLink{link}{/script?foo=1\\\\&bar=2}.



\\\\footnote{\\\\label{1}\\\\externalLink{http://example.com/?foo=1\\\\&bar=2}{http://example.com/?foo=1\\\\&bar=2}}

\\\\footnote{\\\\label{2}\\\\externalLink{http://att.com/}{http://att.com/}}"
`;

exports[`toLaTeX: remark specs auto-link: auto-link 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



With an ampersand: \\\\externalLink{http://example.com/?foo=1\\\\&bar=2}{http://example.com/?foo=1\\\\&bar=2}



\\\\begin{itemize}
\\\\item\\\\relax In a list?
\\\\item\\\\relax \\\\externalLink{http://example.com/}{http://example.com/}
\\\\item\\\\relax It should.
\\\\end{itemize}


\\\\begin{Quotation}
Blockquoted: \\\\externalLink{http://example.com/}{http://example.com/}
\\\\end{Quotation}



Auto-links should not occur here: \\\\texttt{<http://example.com/>}



\\\\begin{CodeBlock}{text}
or here: <http://example.com/>
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs auto-link-invalid: auto-link-invalid 1`] = `
"<http:/



<https:/



<mailto:foobarbaz>



<http:/google



<foo@

"
`;

exports[`toLaTeX: remark specs auto-link-lines: auto-link-lines 1`] = `
"hello world
\\\\externalLink{http://example.com}{http://example.com}



hello world
\\\\externalLink{somename@example.com}{mailto:somename@example.com}

"
`;

exports[`toLaTeX: remark specs auto-link-output: auto-link-output 1`] = `
"Link: \\\\externalLink{http://example.com/}{http://example.com/}.



Link to an email: \\\\externalLink{somename@example.com}{mailto:somename@example.com}.



Link without protocol, which should not render as an auto-link
because they are easily mistaken for HTML: \\\\externalLink{google.com}{google.com}.

"
`;

exports[`toLaTeX: remark specs auto-link-url: auto-link-url 1`] = `
"This should be a link: \\\\externalLink{http://example.com/hello-world}{http://example.com/hello-world}.



Also, subdomain should be a part of the link (\\\\externalLink{http://foo.example.com/(hello[world])}{http://foo.example.com/(hello[world])}).



So should this: \\\\externalLink{foo@bar.com}{mailto:foo@bar.com}.

"
`;

exports[`toLaTeX: remark specs auto-link-url-invalid: auto-link-url-invalid 1`] = `
"http://<example



https:// foo bar baz.



mailto:.



http://,



https://:



mailto:;



http://\\"



https://'



mailto:)



http://]

"
`;

exports[`toLaTeX: remark specs backslash-escapes: backslash-escapes 1`] = `
"These should all get escaped:



Backslash: \\\\textbackslash{}



Backtick: \`



Asterisk: *



Underscore: \\\\_



Left brace: \\\\{



Right brace: \\\\}



Left bracket: [



Right bracket: ]



Left paren: (



Right paren: )



Greater-than: >



Hash: \\\\#



Period: .



Bang: !



Plus: +



Minus: -



\\\\textbf{GFM:}



Pipe: |



Tilde: \\\\textasciitilde{}



\\\\textbf{Commonmark:}



Quote: \\\\textbackslash{}\\"



Dollar: \\\\textbackslash{}\\\\$



Percentage: \\\\textbackslash{}\\\\%



Ampersand: \\\\textbackslash{}\\\\&



Single quote: \\\\textbackslash{}'



Comma: \\\\textbackslash{},



Forward slash: \\\\textbackslash{}/



Colon: \\\\textbackslash{}:



Semicolon: \\\\textbackslash{};



Less-than: \\\\textbackslash{}<



Equals: \\\\textbackslash{}=



Question mark: \\\\textbackslash{}?



At-sign: \\\\textbackslash{}@



Caret: \\\\textbackslash{}\\\\textasciicircum{}



New line: \\\\textbackslash{}
only works in paragraphs.



These should not, because they occur within a code block:



\\\\begin{CodeBlock}{text}
Backslash: \\\\\\\\

Backtick: \\\\\`

Asterisk: \\\\*

Underscore: \\\\_

Left brace: \\\\{

Right brace: \\\\}

Left bracket: \\\\[

Right bracket: \\\\]

Left paren: \\\\(

Right paren: \\\\)

Greater-than: \\\\>

Hash: \\\\#

Period: \\\\.

Bang: \\\\!

Plus: \\\\+

Minus: \\\\-
\\\\end{CodeBlock}



\\\\textbf{GFM:}



\\\\begin{CodeBlock}{text}
Pipe: \\\\|

Tilde: \\\\~
\\\\end{CodeBlock}



\\\\textbf{Commonmark:}



\\\\begin{CodeBlock}{text}
Quote: \\\\\\"

Dollar: \\\\$

Percentage: \\\\%

Ampersand: \\\\&

Single quote: \\\\'

Comma: \\\\,

Forward slash: \\\\/

Colon: \\\\:

Semicolon: \\\\;

Less-than: \\\\<

Equals: \\\\=

Question mark: \\\\?

At-sign: \\\\@

Caret: \\\\^

New line: \\\\
only works in paragraphs.
\\\\end{CodeBlock}



Nor should these, which occur in code spans:



Backslash: \\\\texttt{\\\\textbackslash{}\\\\textbackslash{}}



Backtick: \\\\texttt{\\\\textbackslash{}\`}



Asterisk: \\\\texttt{\\\\textbackslash{}*}



Underscore: \\\\texttt{\\\\textbackslash{}\\\\_}



Left brace: \\\\texttt{\\\\textbackslash{}\\\\{}



Right brace: \\\\texttt{\\\\textbackslash{}\\\\}}



Left bracket: \\\\texttt{\\\\textbackslash{}[}



Right bracket: \\\\texttt{\\\\textbackslash{}]}



Left paren: \\\\texttt{\\\\textbackslash{}(}



Right paren: \\\\texttt{\\\\textbackslash{})}



Greater-than: \\\\texttt{\\\\textbackslash{}>}



Hash: \\\\texttt{\\\\textbackslash{}\\\\#}



Period: \\\\texttt{\\\\textbackslash{}.}



Bang: \\\\texttt{\\\\textbackslash{}!}



Plus: \\\\texttt{\\\\textbackslash{}+}



Minus: \\\\texttt{\\\\textbackslash{}-}



\\\\textbf{GFM:}



Pipe: \\\\texttt{\\\\textbackslash{}|}



Tilde: \\\\texttt{\\\\textbackslash{}\\\\textasciitilde{}}



\\\\textbf{Commonmark:}



Quote: \\\\texttt{\\\\textbackslash{}\\"}



Dollar: \\\\texttt{\\\\textbackslash{}\\\\$}



Percentage: \\\\texttt{\\\\textbackslash{}\\\\%}



Ampersand: \\\\texttt{\\\\textbackslash{}\\\\&}



Single quote: \\\\texttt{\\\\textbackslash{}'}



Comma: \\\\texttt{\\\\textbackslash{},}



Forward slash: \\\\texttt{\\\\textbackslash{}/}



Colon: \\\\texttt{\\\\textbackslash{}:}



Semicolon: \\\\texttt{\\\\textbackslash{};}



Less-than: \\\\texttt{\\\\textbackslash{}<}



Equals: \\\\texttt{\\\\textbackslash{}=}



Question mark: \\\\texttt{\\\\textbackslash{}?}



At-sign: \\\\texttt{\\\\textbackslash{}@}



Caret: \\\\texttt{\\\\textbackslash{}\\\\textasciicircum{}}



New line: \\\\texttt{\\\\textbackslash{} } only works in paragraphs.



These should get escaped, even though they're matching pairs for
other Markdown constructs:



*asterisks*



\\\\_underscores\\\\_



\`backticks\`



This is a code span with a literal backslash-backtick sequence: \\\\texttt{\\\\textbackslash{}\`}



This is a tag with unescaped backticks <span attr='\`ticks\`'>bar</span>.



This is a tag with backslashes <span attr='\\\\\\\\backslashes\\\\\\\\'>bar</span>.

"
`;

exports[`toLaTeX: remark specs block-elements: block-elements 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Different lists should receive two newline characters
between them.
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax This is another list.
\\\\end{itemize}


\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax The same goes for lists in block quotes.
\\\\end{itemize}
\\\\begin{itemize}
\\\\item\\\\relax This is another list.
\\\\end{itemize}
\\\\end{Quotation}



\\\\begin{itemize}
\\\\item\\\\relax And for lists in lists:

\\\\begin{enumerate}
\\\\item\\\\relax First sublist.
\\\\end{enumerate}
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
1.   Second sublist.
\\\\end{CodeBlock}



And for lists followed by indented code blocks:



\\\\begin{itemize}
\\\\item\\\\relax This is a paragraph in a list
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
And this is code();
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs blockquote-indented: blockquote-indented 1`] = `
"\\\\begin{Quotation}
bar
baz
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquote-lazy-code: blockquote-lazy-code 1`] = `
"\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
foo
bar
\\\\end{CodeBlock}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquote-lazy-fence: blockquote-lazy-fence 1`] = `
"\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
aNormalCodeBlockInABlockqoute();
\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
thisIsAlsoSomeCodeInABlockquote();
\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
aNonTerminatedCodeBlockInABlockquote();
\\\\end{CodeBlock}

aNewCodeBlockFollowingTheBlockQuote();

\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}
\\\\end{Quotation}



A paragraph.



\\\\begin{Quotation}
Something in a blockquote.

\\\\begin{CodeBlock}{text}
aNewCodeBlock();
\\\\end{CodeBlock}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquote-lazy-list: blockquote-lazy-list 1`] = `
"\\\\begin{Quotation}
This is a blockquote.

\\\\begin{itemize}
\\\\item\\\\relax And in normal mode this is an internal list, but in commonmark this is a top level list.
\\\\end{itemize}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquote-lazy-rule: blockquote-lazy-rule 1`] = `
"\\\\begin{Quotation}
This is a blockquote. Followed by a rule.

\\\\horizontalLine
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquote-list-item: blockquote-list-item 1`] = `
"This fails in markdown.pl and upskirt:



\\\\begin{itemize}
\\\\item\\\\relax hello

\\\\begin{Quotation}
world
\\\\end{Quotation}
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs blockquotes: blockquotes 1`] = `
"\\\\begin{Quotation}
This is a blockquote.
\\\\end{Quotation}



\\\\begin{Quotation}
This is, in commonmark mode, another blockquote.
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquotes-empty-lines: blockquotes-empty-lines 1`] = `
"\\\\begin{Quotation}
Note there is no space on the following line.

Note there is no space on the preceding line.
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs blockquotes-with-code-blocks: blockquotes-with-code-blocks 1`] = `
"\\\\begin{Quotation}
Example:

\\\\begin{CodeBlock}{text}
sub status {
    print \\"working\\";
}
\\\\end{CodeBlock}

Or:

\\\\begin{CodeBlock}{text}
sub status {
    return \\"working\\";
}
\\\\end{CodeBlock}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs bom: bom 1`] = `
"\\\\part{Hello from a BOM}


Be careful when editing this file!

"
`;

exports[`toLaTeX: remark specs breaks-hard: breaks-hard 1`] = `
"These are not breaks:



Look at the
pretty line
breaks.



These are breaks:



Look at the \\\\\\\\
pretty line \\\\\\\\
breaks.



In \\\\texttt{commonmark: true} mode, an escaped newline character is exposed as a \\\\texttt{break} node:



Look at the\\\\textbackslash{}
pretty line\\\\textbackslash{}
breaks.

"
`;

exports[`toLaTeX: remark specs case-insensitive-refs: case-insensitive-refs 1`] = `
"\\\\hyperref[hi]{hi}



\\\\footnote{\\\\label{hi}\\\\externalLink{/url}{/url}}"
`;

exports[`toLaTeX: remark specs code-block: code-block 1`] = `
"Tildes:



\\\\begin{CodeBlock}{javascript}
alert('Hello World!');
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs code-block-escape: code-block-escape 1`] = `
"A little flaw:



\\\\begin{CodeBlock}{python}


\\\\end{CodeBlock}



An ingenuous flaw:



\\\\begin{CodeBlock}{text}

\\\\input{/etc/passwd}
\\\\begin{CodeBlock}{text}
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs code-block-indentation: code-block-indentation 1`] = `
"Fenced code blocks are normally not exdented, however,
when the initial fence is indented by spaces, the value of
the code is exdented by up to that amount of spaces.



\\\\begin{CodeBlock}{text}
    This is a code block...
        
    ...which is not exdented.
\\\\end{CodeBlock}



But...



\\\\begin{CodeBlock}{text}
  This one...
      
  ...is.
\\\\end{CodeBlock}



And...



\\\\begin{CodeBlock}{text}
So is this...
      
  ...one.
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs code-block-nesting-bug: code-block-nesting-bug 1`] = `
"GitHub, thus RedCarpet, has a bug where “nested” fenced code blocks,
even with shorter fences, can exit their actual “parent” block.



Note that this bug does not occur on indented code-blocks.



\\\\begin{CodeBlock}{foo}
\`\`\`bar
baz
\`\`\`
\\\\end{CodeBlock}



Even with a different fence marker:



\\\\begin{CodeBlock}{foo}
~~~bar
baz
~~~
\\\\end{CodeBlock}



And reversed:



\\\\begin{CodeBlock}{foo}
~~~bar
baz
~~~
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{foo}
\`\`\`bar
baz
\`\`\`
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs code-blocks: code-blocks 1`] = `
"code block on the first line



Regular text.



\\\\begin{CodeBlock}{text}
code block indented by spaces
\\\\end{CodeBlock}



Regular text.



\\\\begin{CodeBlock}{text}
the lines in this block  
all contain trailing spaces  
\\\\end{CodeBlock}



Regular Text.



\\\\begin{CodeBlock}{text}
code block on the last line
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs code-spans: code-spans 1`] = `
"\\\\texttt{<test a=\\"} content of attribute \\\\texttt{\\">}



Fix for backticks within HTML tag: <span attr='\`ticks\`'>like this</span>



Here's how you put \\\\texttt{\`backticks\`} in a code span.



Additionally, empty code spans are NOT supported: \`\`.



Here’s an example, \\\\texttt{foo \` bar }.



And here, \\\\texttt{\`\`}.



\\\\texttt{// this is also inline code}



So is this \\\\texttt{foo bar baz}.



And this \\\\texttt{foo \`\` bar}



And \\\\texttt{this\\\\textbackslash{}}but this is text\`.

"
`;

exports[`toLaTeX: remark specs def-blocks: def-blocks 1`] = `
"\\\\begin{Quotation}
hello

\\\\footnote{\\\\label{1}\\\\externalLink{hello}{hello}}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
hello
\\\\end{Quotation}



\\\\footnote{\\\\label{2}\\\\externalLink{hello}{hello}}

\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax \\\\footnote{\\\\label{3}\\\\externalLink{hello}{hello}}
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\end{itemize}


\\\\footnote{\\\\label{4}\\\\externalLink{hello}{hello}}

\\\\begin{Quotation}
foo
bar
\\\\end{Quotation}



\\\\footnote{\\\\label{1-1}\\\\externalLink{foo}{foo}}

\\\\begin{Quotation}
bar
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs definition-newline: definition-newline 1`] = `
"\\\\hyperref[baz]{baz}: /url (
)



[foo]: /url \\"
\\"



[bar]: /url '
'



\\\\footnote{\\\\label{baz}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{baz-1}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{baz-1-1}\\\\externalLink{/url}{/url}}

\\\\hyperref[baz]{baz}: /url 'foo

"
`;

exports[`toLaTeX: remark specs definition-unclosed: definition-unclosed 1`] = `
"[foo]:



\\\\footnote{\\\\label{bar}\\\\externalLink{</url}{</url}}

[foo]:

"
`;

exports[`toLaTeX: remark specs definition-unclosed-attribute: definition-unclosed-attribute 1`] = `
"[baz]: /url (there



[foo]: /url \\"there



[bar]: /url 'there



[baz]: url (



[foo]: url \\"



[bar]: /url '



[baz]: <url>(



[foo]: <url>\\"



[bar]: <url>'

"
`;

exports[`toLaTeX: remark specs deletion: deletion 1`] = `
"hello \\\\sout{hi} world

"
`;

exports[`toLaTeX: remark specs double-link: double-link 1`] = `
"<p>Already linked: <a href=\\"http://example.com/\\">http://example.com/</a>.</p>

Already linked: \\\\externalLink{http://example.com/}{http://example.com/}.



Already linked: <a href=\\"http://example.com/\\">\\\\textbf{http://example.com/}</a>.

"
`;

exports[`toLaTeX: remark specs emphasis: emphasis 1`] = `
"\\\\textit{emphasis}.



\\\\textbf{strong}.

"
`;

exports[`toLaTeX: remark specs emphasis-empty: emphasis-empty 1`] = `
"Hello ** ** world.



Hello \\\\_\\\\_	\\\\_\\\\_ world.



Hello *	* world.



Hello \\\\_	\\\\_ world.

"
`;

exports[`toLaTeX: remark specs emphasis-escaped-final-marker: emphasis-escaped-final-marker 1`] = `
"*bar*



**bar**



\\\\_bar\\\\_



\\\\_\\\\_bar\\\\_\\\\_

"
`;

exports[`toLaTeX: remark specs emphasis-internal: emphasis-internal 1`] = `
"These words should\\\\_not\\\\_be\\\\_emphasized.

"
`;

exports[`toLaTeX: remark specs empty: empty 1`] = `""`;

exports[`toLaTeX: remark specs entities: entities 1`] = `
"Lots of entities are supported in mdast:  , \\\\&, ©, Æ,
Ď, ¾, ℋ, ⅆ,
∲, \\\\&c.  Even some entities with a missing
terminal semicolon are parsed correctly (as per the HTML5 spec):
ÿ, á, ©, and \\\\&.



However, \\\\&MadeUpEntities; are kept in the document.



Entities even work in the language flag of fenced code blocks:



\\\\begin{CodeBlock}{some—language}
alert('Hello');
\\\\end{CodeBlock}



Or in \\\\externalLink{línks}{\\\\textasciitilde{}/some—file}



Or in \\\\includegraphics{~/an–image.png}



But, entities are not interpreted in \\\\texttt{inline c\\\\&ouml;de}, or in
code blocks:



\\\\begin{CodeBlock}{text}
C&Ouml;DE block.
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs entities-advanced: entities-advanced 1`] = `
"\\\\begin{Quotation}
However, \\\\&MadeUpEntities; are kept in the document.
\\\\end{Quotation}



\\\\begin{Quotation}
Entities even work in the language flag of fenced code blocks:
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\begin{CodeBlock}{some©language}
alert('Hello');
\\\\end{CodeBlock}
\\\\end{Quotation}



\\\\begin{Quotation}
And in an auto-link: \\\\externalLink{http://example©xample.com}{http://example\\\\&copyxample.com}
\\\\end{Quotation}



\\\\begin{Quotation}
Foo and bar and http://example©xample.com and baz.
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\externalLink{l©nks}{\\\\textasciitilde{}/some\\\\&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\externalLink{l©lnks}{\\\\textasciitilde{}/some\\\\&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\includegraphics{~/some&copyfile}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
Or in \\\\includegraphics{~/some&copyfile}
\\\\end{Quotation}



\\\\begin{Quotation}
Or in \\\\includegraphics{undefined}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\footnote{\\\\label{1}\\\\externalLink{http://example\\\\&copyxample.com}{http://example\\\\&copyxample.com}}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\footnote{\\\\label{ 1 }\\\\externalLink{http://example\\\\&copyxample.com}{http://example\\\\&copyxample.com}}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
But, entities are not interpreted in \\\\texttt{inline c\\\\&oumlde}, or in
code blocks:
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\begin{CodeBlock}{text}
C&OumlDE block.
\\\\end{CodeBlock}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs escaped-angles: escaped-angles 1`] = `
">

"
`;

exports[`toLaTeX: remark specs fenced-code: fenced-code 1`] = `
"\\\\begin{CodeBlock}{js}
var a = 'hello';
console.log(a + ' world');
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{bash}
echo \\"hello, \${WORLD}\\"
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{longfence}
Q: What do you call a tall person who sells stolen goods?
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{ManyTildes}
A longfence!
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs fenced-code-empty: fenced-code-empty 1`] = `
"Normal with language tag:



\\\\begin{CodeBlock}{js}

\\\\end{CodeBlock}



With white space:



\\\\begin{CodeBlock}{bash}

\\\\end{CodeBlock}



With very long fences:



\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}



With nothing:



\\\\begin{CodeBlock}{text}

\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs fenced-code-trailing-characters: fenced-code-trailing-characters 1`] = `
"\\\\begin{CodeBlock}{js}
foo();
\`\`\`bash
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs fenced-code-trailing-characters-2: fenced-code-trailing-characters-2 1`] = `
"\\\\begin{CodeBlock}{text}
\`\`\` aaa
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs fenced-code-white-space-after-flag: fenced-code-white-space-after-flag 1`] = `
"\\\\begin{CodeBlock}{js}
foo();
\\\\end{CodeBlock}



\\\\begin{CodeBlock}{bash}
echo \\"hello, \${WORLD}\\"
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs hard-wrapped-paragraphs-with-list-like-lines: hard-wrapped-paragraphs-with-list-like-lines 1`] = `
"In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.
Because a hard-wrapped line in the
123. middle of a paragraph looked like a
list item.



Here's one with a bullet.



\\\\begin{itemize}
\\\\item\\\\relax criminey.
\\\\end{itemize}


Non-GFM does not create a list for either.
GFM does not create a list for \\\\texttt{8.}, but does for \\\\texttt{*}.
CommonMark creates a list for both.
All versions create lists for the following.



\\\\begin{itemize}
\\\\item\\\\relax Here's one with a bullet.

\\\\begin{itemize}
\\\\item\\\\relax criminey.
\\\\end{itemize}
\\\\end{itemize}


...and the following:



\\\\begin{enumerate}
\\\\item\\\\relax In Markdown 1.0.0 and earlier. Version
8. This line turns into a list item.
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs heading: heading 1`] = `
"\\\\part{Heading 1}


\\\\chapter{Heading 2}


\\\\section{Heading 4}


\\\\subsection{Heading 4}


\\\\subsubsection{Heading 5}


\\\\paragraph{Heading 6}
"
`;

exports[`toLaTeX: remark specs heading-atx-closed-trailing-white-space: heading-atx-closed-trailing-white-space 1`] = `
"\\\\part{Foo}


\\\\chapter{Bar}
"
`;

exports[`toLaTeX: remark specs heading-atx-empty: heading-atx-empty 1`] = `
"\\\\part{}


\\\\chapter{}


\\\\section{}


\\\\subsection{}


\\\\subsubsection{}


\\\\paragraph{}
"
`;

exports[`toLaTeX: remark specs heading-in-blockquote: heading-in-blockquote 1`] = `
"\\\\begin{Quotation}
A blockquote
with some more text.
\\\\end{Quotation}



A normal paragraph.



\\\\begin{Quotation}
\\\\chapter{A blockquote followed by a horizontal rule (in CommonMark).}
\\\\end{Quotation}



\\\\begin{Quotation}
\\\\chapter{A heading in a blockquote}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs heading-in-paragraph: heading-in-paragraph 1`] = `
"Hello



\\\\part{World}
"
`;

exports[`toLaTeX: remark specs heading-not-atx: heading-not-atx 1`] = `
"\\\\#This is not a heading, per CommonMark: \\\\externalLink{http://spec.commonmark.org/0.17/\\\\#example-25}{http://spec.commonmark.org/0.17/\\\\#example-25}



Kramdown (GitHub) neither supports unspaced ATX-headings.



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h7?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h8?



\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\#\\\\# h9?



More than six \\\\# characters is not a heading: \\\\externalLink{http://spec.commonmark.org/0.26/\\\\#example-33}{http://spec.commonmark.org/0.26/\\\\#example-33}

"
`;

exports[`toLaTeX: remark specs heading-setext-with-initial-spacing: heading-setext-with-initial-spacing 1`] = `
"\\\\part{Heading 1}


\\\\chapter{Heading 2}


Both these headings caused positional problems in on commit daa344c and before.

"
`;

exports[`toLaTeX: remark specs horizontal-rules: horizontal-rules 1`] = `
"Dashes:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
---
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
- - -
\\\\end{CodeBlock}



Asterisks:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
* * *
\\\\end{CodeBlock}



Underscores:



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
___
\\\\end{CodeBlock}



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



\\\\begin{CodeBlock}{text}
_ _ _
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs horizontal-rules-adjacent: horizontal-rules-adjacent 1`] = `
"\\\\horizontalLine



\\\\horizontalLine



\\\\horizontalLine



The three asterisks are not a Setext header.



This is a paragraph.



\\\\horizontalLine



This is another paragraph.



\\\\horizontalLine



\\\\chapter{But this is a secondary heading.}


\\\\horizontalLine

"
`;

exports[`toLaTeX: remark specs hr: hr 1`] = `
"\\\\horizontalLine

"
`;

exports[`toLaTeX: remark specs hr-list-break: hr-list-break 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\item\\\\relax how are
\\\\end{itemize}


\\\\horizontalLine



you today?



The above asterisks do split the list, but the below ones do not.



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\item\\\\relax how are
\\\\item\\\\relax \\\\horizontalLine

you today?
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax Neither do these
\\\\item\\\\relax how are
\\\\item\\\\relax \\\\begin{itemize}
\\\\item\\\\relax \\\\begin{itemize}
\\\\item\\\\relax you today?
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax But these do
\\\\item\\\\relax how are
\\\\end{itemize}


\\\\horizontalLine



you today?

"
`;

exports[`toLaTeX: remark specs html-advanced: html-advanced 1`] = `
"Simple block on one line:



<div>foo</div>

And nested without indentation:



<div>
<div>
<div>
foo
</div>
<div style=\\">\\"/>
</div>
<div>bar</div>
</div>"
`;

exports[`toLaTeX: remark specs html-attributes: html-attributes 1`] = `
"\\\\part{Block-level}


<article foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<article foo>

<article>

<article :foo:bar:09:=\\"baz\\">

<article foo.bar_09->

<article foo.bar_09-   >

<article foo.bar_09-   />

<div baz
qux

\\\\part{Inline}


<span foo=\\"bar 'baz' qux\\" foo='bar \\"baz\\" qux' foo=baz>

<span foo>

<span>

<span :foo:bar:09:=\\"baz\\">

<span foo.bar_09->

<span foo.bar_09-   >

<span foo.bar_09-   />

<span this is
invalid

"
`;

exports[`toLaTeX: remark specs html-cdata: html-cdata 1`] = `
"<![CDATA[
fooBarBaz()
]]>

foo <![CDATA[bar]]>

"
`;

exports[`toLaTeX: remark specs html-comments: html-comments 1`] = `
"Paragraph one.



<!-- This is a simple comment -->

<!--
	This is another comment.
-->

What follows is not an HTML comment because it contains
two consecutive dashes:
\\\\externalLink{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}{https://html.spec.whatwg.org/multipage/syntax.html\\\\#comments}.



<!-- one comment block -- -- with two comments -->

But this is fine (in commonmark):



<!-- one comment block - with a dash -->

And, this is wrong (in commonmark):



<!-->-->

The end.

"
`;

exports[`toLaTeX: remark specs html-declaration: html-declaration 1`] = `
"<!DOCTYPE html>

foo <!BAR br BAZ>



<!doctype html>

<!valid >

<!invalid>"
`;

exports[`toLaTeX: remark specs html-indented: html-indented 1`] = `
"<div>
  *hello*
   <div>

 <span>
  *hello*
   <span>

  <!doctype html>

   <!-- baz -->

alpha <!-- baz -->

"
`;

exports[`toLaTeX: remark specs html-processing-instruction: html-processing-instruction 1`] = `
"<?php
  echo '>';
?>"
`;

exports[`toLaTeX: remark specs html-simple: html-simple 1`] = `
"Here's a simple block:



<div>
	foo
</div>

This should be a code block, though:



\\\\begin{CodeBlock}{text}
<div>
	foo
</div>
\\\\end{CodeBlock}



As should this:



\\\\begin{CodeBlock}{text}
<div>foo</div>
\\\\end{CodeBlock}



Now, nested:



<div>
	<div>
		<div>
			foo
		</div>
	</div>
</div>

This should just be an HTML comment:



<!-- Comment -->

Multiline:



<!--
Blah
Blah
-->

Code block:



\\\\begin{CodeBlock}{text}
<!-- Comment -->
\\\\end{CodeBlock}



Just plain comment, with trailing spaces on the line:



<!-- foo -->   

Code:



\\\\begin{CodeBlock}{text}
<hr>
\\\\end{CodeBlock}



Hr's:



<hr>

<hr>

<hr>

<hr>   

<hr>  

<hr> 

<hr class=\\"foo\\" id=\\"bar\\" />

<hr class=\\"foo\\" id=\\"bar\\"/>

<hr class=\\"foo\\" id=\\"bar\\" >"
`;

exports[`toLaTeX: remark specs html-tags: html-tags 1`] = `
"\\\\part{Block}


<article>

<ARTICLE>

<ArTiClE>

<-article>



<article foo=

<article foo=\\"bar

<article foo='bar

<article foo=bar 

<article foo=bar >

<article/>

<-article/>



</article>

</ARTICLE>

</aRtIcLe>

</article  >

</-article  >



</article

</article  

\\\\part{Inline}


<span>

<SPAN>

<SpAn>

<-span>



<span/>

<-span/>



</span>

</SPAN>

</SpAn>

</span  >

</-span>



</span



</span



<span foo=



<span foo=\\"bar



<span foo='bar



<span foo=bar



<span foo=bar >"
`;

exports[`toLaTeX: remark specs image-basename-dots: image-basename-dots 1`] = `
"\\\\includegraphics{{x.yz}.png}



\\\\includegraphics{/a/{w.x.y.z}.png}



\\\\includegraphics{/{w.x.y.z}.png}



\\\\includegraphics{/foo.bar/{x.yz}.png}

"
`;

exports[`toLaTeX: remark specs image-empty-alt: image-empty-alt 1`] = `
"\\\\includegraphics{/xyz.png}

"
`;

exports[`toLaTeX: remark specs image-in-link: image-in-link 1`] = `
"\\\\part{\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/unicorn-approved-ff69b4.svg}}{http://shields.io}}


\\\\externalLink{\\\\includegraphics{https://img.shields.io/travis/wooorm/mdast.svg?style=flat}}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{\\\\includegraphics{https://img.shields.io/badge/style-flat--squared-green.svg?style=flat-square}}{http://example.com}

"
`;

exports[`toLaTeX: remark specs image-path-escape: image-path-escape 1`] = `
"\\\\includegraphics{a[b]\\\\ \\\\input{/etc/passwd\\\\image{[a](b)}

"
`;

exports[`toLaTeX: remark specs image-with-pipe: image-with-pipe 1`] = `
"f|

"
`;

exports[`toLaTeX: remark specs images: images 1`] = `
"Lorem ipsum dolor sit \\\\includegraphics{http://amet.com/amet.jpeg}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\includegraphics{http://finibus.com/finibus.png} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\includegraphics{http://facilisi.com/facilisi.gif}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\includegraphics{http://faucibus.com/faucibus.tiff}.

"
`;

exports[`toLaTeX: remark specs invalid-link-definition: invalid-link-definition 1`] = `
"Something[2-3]

"
`;

exports[`toLaTeX: remark specs lazy-blockquotes: lazy-blockquotes 1`] = `
"\\\\begin{Quotation}
hi there
bud
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs link-in-link: link-in-link 1`] = `
"\\\\part{\\\\externalLink{mailto:test@example.com}{http://shields.io}}


\\\\externalLink{https://travis-ci.org/wooorm/mdast}{https://travis-ci.org/wooorm/mdast}



\\\\externalLink{[](http://example.com \\"An example\\")}{http://example.com}

"
`;

exports[`toLaTeX: remark specs link-spaces: link-spaces 1`] = `
"[alpha] (bravo



\\\\includegraphics{undefined} (delta
.com)



[echo]	(\\\\externalLink{http://foxtrot.golf}{http://foxtrot.golf})



\\\\includegraphics{undefined}   (india.com/juliett)

"
`;

exports[`toLaTeX: remark specs link-whitespace: link-whitespace 1`] = `
"[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



[alpha](\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie).



\\\\includegraphics{undefined}(\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie).



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie>.



<\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie>.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo} charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}	charlie.



\\\\externalLink{https://example.com?bravo}{https://example.com?bravo}
charlie.

"
`;

exports[`toLaTeX: remark specs link-with-spaces: link-with-spaces 1`] = `
"\\\\externalLink{Hello}{./world and some spaces.html}



\\\\externalLink{Hello}{./world and some spaces.html}

"
`;

exports[`toLaTeX: remark specs links: links 1`] = `
"Lorem ipsum dolor sit \\\\externalLink{amet}{http://amet.com}, consectetur adipiscing elit. Praesent dictum purus ullamcorper ligula semper pellentesque.



Nulla \\\\externalLink{finibus}{http://finibus.com} neque et diam rhoncus convallis. Nam dictum sapien nec sem ultrices fermentum. Nulla \\\\externalLink{facilisi}{http://facilisi.com}. In et feugiat massa.



Donec sed sodales metus, ut aliquet quam. Suspendisse nec ipsum risus. Interdum et malesuada fames ac ante ipsum primis in \\\\externalLink{faucibus}{http://faucibus.com}.

"
`;

exports[`toLaTeX: remark specs links-inline-style: links-inline-style 1`] = `
"Just a \\\\externalLink{URL}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



\\\\externalLink{URL and title}{/url/}.



[URL and title]( /url/has space ).



[URL and title]( /url/has space/ \\"url has space and title\\").



.

"
`;

exports[`toLaTeX: remark specs links-reference-proto: links-reference-proto 1`] = `
"A \\\\hyperref[tostring]{primary}, \\\\hyperref[constructor]{secondary}, and \\\\hyperref[__proto__]{tertiary} link.



\\\\footnote{\\\\label{tostring}\\\\externalLink{http://primary.com}{http://primary.com}}

\\\\footnote{\\\\label{__proto__}\\\\externalLink{http://tertiary.com}{http://tertiary.com}}

\\\\footnote{\\\\label{constructor}\\\\externalLink{http://secondary.com}{http://secondary.com}}"
`;

exports[`toLaTeX: remark specs links-reference-style: links-reference-style 1`] = `
"Foo \\\\hyperref[1]{bar}.



Foo \\\\hyperref[1]{bar}.



Foo \\\\hyperref[1]{bar}.



\\\\footnote{\\\\label{1}\\\\externalLink{/url/}{/url/}}

With \\\\hyperref[b]{embedded [brackets]}.



Indented \\\\hyperref[once]{once}.



Indented \\\\hyperref[twice]{twice}.



Indented \\\\hyperref[thrice]{thrice}.



Indented [four] times.



\\\\footnote{\\\\label{once}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{twice}\\\\externalLink{/url}{/url}}

\\\\footnote{\\\\label{thrice}\\\\externalLink{/url}{/url}}

\\\\begin{CodeBlock}{text}
[four]: /url
\\\\end{CodeBlock}



\\\\footnote{\\\\label{b}\\\\externalLink{/url/}{/url/}}

\\\\horizontalLine



\\\\hyperref[this]{this} should work



So should \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



And \\\\hyperref[this]{this}.



But not [that].



Nor [that].



Nor [that].



[Something in brackets like \\\\hyperref[this]{this} should work]



[Same with \\\\hyperref[this]{this}.]



In this case, \\\\externalLink{this}{/somethingelse/} points to something else.



Backslashing should suppress [this] and [this].



\\\\footnote{\\\\label{this}\\\\externalLink{foo}{foo}}

\\\\horizontalLine



Here's one where the \\\\hyperref[link breaks]{link
breaks} across lines.



Here's another where the \\\\hyperref[link breaks]{link
breaks} across lines, but with a line-ending space.



\\\\footnote{\\\\label{link breaks}\\\\externalLink{/url/}{/url/}}"
`;

exports[`toLaTeX: remark specs links-shortcut-references: links-shortcut-references 1`] = `
"This is the \\\\hyperref[simple case]{simple case}.



\\\\footnote{\\\\label{simple case}\\\\externalLink{/simple}{/simple}}

This one has a \\\\hyperref[line break]{line
break}.



This one has a \\\\hyperref[line break]{line
break} with a line-ending space.



\\\\footnote{\\\\label{line break}\\\\externalLink{/foo}{/foo}}

\\\\hyperref[that]{this} and the \\\\hyperref[other]{other}



\\\\footnote{\\\\label{this}\\\\externalLink{/this}{/this}}

\\\\footnote{\\\\label{that}\\\\externalLink{/that}{/that}}

\\\\footnote{\\\\label{other}\\\\externalLink{/other}{/other}}"
`;

exports[`toLaTeX: remark specs links-text-delimiters: links-text-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.

"
`;

exports[`toLaTeX: remark specs links-text-empty: links-text-empty 1`] = `
"\\\\externalLink{}{./hello-world.html}.



\\\\externalLink{}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.

"
`;

exports[`toLaTeX: remark specs links-text-entity-delimiters: links-text-entity-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.

"
`;

exports[`toLaTeX: remark specs links-text-escaped-delimiters: links-text-escaped-delimiters 1`] = `
"\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\externalLink{Hello [world]!}{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.



\\\\includegraphics{./hello-world.html}.

"
`;

exports[`toLaTeX: remark specs links-text-mismatched-delimiters: links-text-mismatched-delimiters 1`] = `
"[Hello \\\\externalLink{world!}{./hello-world.html}.



[Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}.



![Hello \\\\externalLink{world!}{./hello-world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-double-quotes: links-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-double-quotes-delimiters: links-title-double-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-double-quotes-entity-delimiters: links-title-double-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-double-quotes-escaped-delimiters: links-title-double-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-double-quotes-mismatched-delimiters: links-title-double-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-empty-double-quotes: links-title-empty-double-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-empty-parentheses: links-title-empty-parentheses 1`] = `
"[Hello](./world.html ()).



[Hello](<./world.html> ()).



\\\\includegraphics{undefined}(./world.html ()).



\\\\includegraphics{undefined}(<./world.html> ()).

"
`;

exports[`toLaTeX: remark specs links-title-empty-single-quotes: links-title-empty-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-parentheses: links-title-parentheses 1`] = `
"[Hello](./world.html (Hello World!)).



[Hello](<./world.html> (Hello World!)).



\\\\includegraphics{undefined}(./world.html (Hello World!)).



\\\\includegraphics{undefined}(<./world.html> (Hello World!)).

"
`;

exports[`toLaTeX: remark specs links-title-single-quotes: links-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-single-quotes-delimiters: links-title-single-quotes-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-single-quotes-entity-delimiters: links-title-single-quotes-entity-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-single-quotes-escaped-delimiters: links-title-single-quotes-escaped-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-single-quotes-mismatched-delimiters: links-title-single-quotes-mismatched-delimiters 1`] = `
"\\\\externalLink{Hello}{./world.html}.



\\\\externalLink{Hello}{./world.html}.



\\\\includegraphics{./world.html}.



\\\\includegraphics{./world.html}.

"
`;

exports[`toLaTeX: remark specs links-title-unclosed: links-title-unclosed 1`] = `
"[Hello](./world.html 'Hello



[Hello](<./world.html> 'Hello



\\\\includegraphics{undefined}(./world.html 'Hello



\\\\includegraphics{undefined}(<./world.html> 'Hello



[Hello](./world.html \\"Hello



[Hello](<./world.html> \\"Hello



\\\\includegraphics{undefined}(./world.html \\"Hello



\\\\includegraphics{undefined}(<./world.html> \\"Hello



[Hello](./world.html (Hello



[Hello](<./world.html> (Hello



\\\\includegraphics{undefined}(./world.html (Hello



\\\\includegraphics{undefined}(<./world.html> (Hello

"
`;

exports[`toLaTeX: remark specs links-url-empty: links-url-empty 1`] = `
".



.



\\\\includegraphics{}.



\\\\includegraphics{}.

"
`;

exports[`toLaTeX: remark specs links-url-empty-title-double-quotes: links-url-empty-title-double-quotes 1`] = `
"\\\\externalLink{Hello}{\\"World!\\"}.



\\\\externalLink{Hello}{\\"World!\\"}.



.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{\\"World!\\"}.



\\\\includegraphics{}.

"
`;

exports[`toLaTeX: remark specs links-url-empty-title-parentheses: links-url-empty-title-parentheses 1`] = `
"\\\\externalLink{Hello}{(World!)}.



\\\\externalLink{Hello}{(World!)}.



[World](<> (World!)).



\\\\includegraphics{(World!)}.



\\\\includegraphics{(World!)}.



\\\\includegraphics{undefined}(<> (World!)).

"
`;

exports[`toLaTeX: remark specs links-url-empty-title-single-quotes: links-url-empty-title-single-quotes 1`] = `
"\\\\externalLink{Hello}{'World!'}.



\\\\externalLink{Hello}{'World!'}.



.



\\\\includegraphics{'World!'}.



\\\\includegraphics{'World!'}.



\\\\includegraphics{}.

"
`;

exports[`toLaTeX: remark specs links-url-entity-parentheses: links-url-entity-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}.

"
`;

exports[`toLaTeX: remark specs links-url-escaped-parentheses: links-url-escaped-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld)}.



\\\\includegraphics{./world(and)helloworld)}.

"
`;

exports[`toLaTeX: remark specs links-url-mismatched-parentheses: links-url-mismatched-parentheses 1`] = `
"[Hello](./world(and-hello(world)).



\\\\externalLink{Hello}{./world(and-hello(world)}.



\\\\externalLink{Hello}{./world(and)helloworld}).



\\\\externalLink{Hello}{./world(and)helloworld)}.



\\\\includegraphics{undefined}(./world(and-hello(world)).



\\\\includegraphics{./world(and-hello(world)}.



\\\\includegraphics{./world(and)helloworld}).



\\\\includegraphics{./world(and)helloworld)}.

"
`;

exports[`toLaTeX: remark specs links-url-nested-parentheses: links-url-nested-parentheses 1`] = `
"\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\externalLink{Hello}{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}.



\\\\includegraphics{./world(and)hello(world)}.

"
`;

exports[`toLaTeX: remark specs links-url-new-line: links-url-new-line 1`] = `
"[Hello](./wo
rld.html).



\\\\externalLink{Hello}{./wo
rld.html}.



\\\\includegraphics{undefined}(./wo
rld.png).



\\\\includegraphics{./wo
rld.png}.

"
`;

exports[`toLaTeX: remark specs links-url-unclosed: links-url-unclosed 1`] = `
"[Hello](



[World](<



\\\\includegraphics{undefined}(



\\\\includegraphics{undefined}(<

"
`;

exports[`toLaTeX: remark specs links-url-white-space: links-url-white-space 1`] = `
"[Hello](./wo rld.html).



\\\\externalLink{Hello}{./wo rld.html}.



\\\\includegraphics{undefined}(./wo rld.png).



\\\\includegraphics{./wo rld.png}.

"
`;

exports[`toLaTeX: remark specs list: list 1`] = `
"\\\\part{List bullets}


\\\\begin{itemize}
\\\\item\\\\relax One:

\\\\begin{itemize}
\\\\item\\\\relax Nested one;
\\\\item\\\\relax Nested two:

\\\\begin{itemize}
\\\\item\\\\relax Nested three.
\\\\end{itemize}
\\\\end{itemize}
\\\\item\\\\relax Two;
\\\\item\\\\relax Three.
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-after-list: list-after-list 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{enumerate}


\\\\horizontalLine



\\\\begin{itemize}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\item\\\\relax item
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs list-and-code: list-and-code 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax This is a list item
\\\\end{itemize}



\\\\begin{CodeBlock}{text}
This is code
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs list-continuation: list-continuation 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\end{enumerate}


\\\\horizontalLine



\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\end{enumerate}


\\\\begin{CodeBlock}{js}
code();
\\\\end{CodeBlock}



\\\\begin{enumerate}
\\\\item\\\\relax \\\\hyperref[foo]{foo}
\\\\end{enumerate}


\\\\footnote{\\\\label{foo}\\\\externalLink{http://google.com}{http://google.com}}"
`;

exports[`toLaTeX: remark specs list-indentation: list-indentation 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Hello 1a

World 1a.
\\\\item\\\\relax Hello 1b

World 1b.
\\\\item\\\\relax Hello 2a

World 2a.
\\\\item\\\\relax Hello 2b

World 2b.
\\\\item\\\\relax Hello 3a

World 3a.
\\\\item\\\\relax Hello 3b

World 3b.
\\\\item\\\\relax Hello 4a

World 4a.
\\\\item\\\\relax Hello 4b

World 4b.
\\\\item\\\\relax \\\\begin{CodeBlock}{text}
Hello 5a
\\\\end{CodeBlock}

World 5a.
\\\\item\\\\relax \\\\begin{CodeBlock}{text}
Hello 5b

World 5b.
\\\\end{CodeBlock}
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-item-empty: list-item-empty 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax foo
\\\\item\\\\relax 
\\\\item\\\\relax bar
\\\\item\\\\relax foo
\\\\item\\\\relax 
\\\\item\\\\relax bar
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-item-empty-with-white-space: list-item-empty-with-white-space 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax 
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-item-indent: list-item-indent 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{enumerate}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{enumerate}


<!--  -->

\\\\begin{itemize}
\\\\item\\\\relax foo bar baz.
\\\\end{itemize}


<!--  -->

\\\\begin{itemize}
\\\\item\\\\relax foo bar baz.
foo bar baz.
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-item-newline: list-item-newline 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Foo
\\\\item\\\\relax Bar
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-item-text: list-item-text 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax item1

\\\\begin{itemize}
\\\\item\\\\relax item2
\\\\end{itemize}
text
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs list-ordered: list-ordered 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo;
\\\\item\\\\relax bar;
\\\\item\\\\relax baz.
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs lists-with-code-and-rules: lists-with-code-and-rules 1`] = `
"\\\\chapter{foo}


\\\\begin{enumerate}
\\\\item\\\\relax bar:

\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax one

\\\\begin{itemize}
\\\\item\\\\relax two

\\\\begin{itemize}
\\\\item\\\\relax three
\\\\item\\\\relax four
\\\\item\\\\relax five
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}
\\\\end{Quotation}
\\\\item\\\\relax foo:

\\\\begin{CodeBlock}{text}
line 1
line 2
\\\\end{CodeBlock}
\\\\item\\\\relax foo:

\\\\begin{enumerate}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{erb}
some code here
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{erb}
foo
---
bar
---
foo
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{html}
---
foo
foo
---
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo \\\\texttt{bar} bar:

\\\\begin{CodeBlock}{text}
foo
---
bar
\\\\end{CodeBlock}
\\\\item\\\\relax foo
\\\\end{enumerate}
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs loose-lists: loose-lists 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax hello
world

how
are
\\\\item\\\\relax you
\\\\end{itemize}


better behavior:



\\\\begin{itemize}
\\\\item\\\\relax hello

\\\\begin{itemize}
\\\\item\\\\relax world
how

are
you
\\\\item\\\\relax today
\\\\end{itemize}
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world

how
\\\\item\\\\relax hi
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax how
are
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax hello
\\\\item\\\\relax world
\\\\item\\\\relax how
are
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs main: main 1`] = `
"\\\\footnote{\\\\label{test}\\\\externalLink{http://google.com/}{http://google.com/}}

\\\\part{A heading}


Just a note, I've found that I can't test my markdown parser vs others.
For example, both markdown.js and showdown code blocks in lists wrong. They're
also completely \\\\hyperref[test]{inconsistent} with regards to paragraphs in list items.



A link. Not anymore.



<aside>This will make me fail the test because
markdown.js doesnt acknowledge arbitrary html blocks =/</aside>

\\\\begin{itemize}
\\\\item\\\\relax List Item 1
\\\\item\\\\relax List Item 2

\\\\begin{itemize}
\\\\item\\\\relax New List Item 1
Hi, this is a list item.
\\\\item\\\\relax New List Item 2
Another item
Code goes here.
Lots of it...
\\\\item\\\\relax New List Item 3
The last item
\\\\end{itemize}
\\\\item\\\\relax List Item 3
The final item.
\\\\item\\\\relax List Item 4
The real final item.
\\\\end{itemize}


Paragraph.



\\\\begin{Quotation}
\\\\begin{itemize}
\\\\item\\\\relax bq Item 1
\\\\item\\\\relax bq Item 2

\\\\begin{itemize}
\\\\item\\\\relax New bq Item 1
\\\\item\\\\relax New bq Item 2
Text here
\\\\end{itemize}
\\\\end{itemize}
\\\\end{Quotation}



\\\\horizontalLine



\\\\begin{Quotation}
Another blockquote!
I really need to get
more creative with
mockup text..
markdown.js breaks here again
\\\\end{Quotation}



\\\\chapter{Another Heading}


Hello \\\\textit{world}. Here is a \\\\externalLink{link}{//hello}.
And an image \\\\includegraphics{src}.
And an image with an empty alt attribute \\\\includegraphics{src}.



\\\\begin{CodeBlock}{text}
Code goes here.
Lots of it...
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs markdown-documentation-basics: markdown-documentation-basics 1`] = `
"\\\\part{Markdown: Basics}


<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a href=\\"/projects/markdown/syntax\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

\\\\chapter{Getting the Gist of Markdown's Formatting Syntax}


This page offers a brief overview of what it's like to use Markdown.
The \\\\hyperref[s]{syntax page} provides complete, detailed documentation for
every feature, but Markdown should be very easy to pick up simply by
looking at a few examples of it in action. The examples on this page
are written in a before/after style, showing example syntax and the
HTML output produced by Markdown.



It's also helpful to simply try Markdown out; the \\\\hyperref[d]{Dingus} is a
web application that allows you type your own Markdown-formatted text
and translate it to XHTML.



\\\\textbf{Note:} This document is itself written using Markdown; you
can \\\\hyperref[src]{see the source for it by adding '.text' to the URL}.



\\\\footnote{\\\\label{s}\\\\externalLink{/projects/markdown/syntax}{/projects/markdown/syntax}}

\\\\footnote{\\\\label{d}\\\\externalLink{/projects/markdown/dingus}{/projects/markdown/dingus}}

\\\\footnote{\\\\label{src}\\\\externalLink{/projects/markdown/basics.text}{/projects/markdown/basics.text}}

\\\\chapter{Paragraphs, Headers, Blockquotes}


A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



Markdown offers two styles of headers: \\\\textit{Setext} and \\\\textit{atx}.
Setext-style headers for \\\\texttt{<h1>} and \\\\texttt{<h2>} are created by
\\"underlining\\" with equal signs (\\\\texttt{=}) and hyphens (\\\\texttt{-}), respectively.
To create an atx-style header, you put 1-6 hash marks (\\\\texttt{\\\\#}) at the
beginning of the line -- the number of hashes equals the resulting
HTML header level.



Blockquotes are indicated using email-style '\\\\texttt{>}' angle brackets.



Markdown:



\\\\begin{CodeBlock}{text}
A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

> This is a blockquote.
> 
> This is the second paragraph in the blockquote.
>
> ## This is an H2 in a blockquote
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<h1>A First Level Header</h1>

<h2>A Second Level Header</h2>

<p>Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.</p>

<p>The quick brown fox jumped over the lazy
dog's back.</p>

<h3>Header 3</h3>

<blockquote>
    <p>This is a blockquote.</p>
    
    <p>This is the second paragraph in the blockquote.</p>
    
    <h2>This is an H2 in a blockquote</h2>
</blockquote>
\\\\end{CodeBlock}



\\\\section{Phrase Emphasis}


Markdown uses asterisks and underscores to indicate spans of emphasis.



Markdown:



\\\\begin{CodeBlock}{text}
Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>
\\\\end{CodeBlock}



\\\\chapter{Lists}


Unordered (bulleted) lists use asterisks, pluses, and hyphens (\\\\texttt{*},
\\\\texttt{+}, and \\\\texttt{-}) as list markers. These three markers are
interchangable; this:



\\\\begin{CodeBlock}{text}
*   Candy.
*   Gum.
*   Booze.
\\\\end{CodeBlock}



this:



\\\\begin{CodeBlock}{text}
+   Candy.
+   Gum.
+   Booze.
\\\\end{CodeBlock}



and this:



\\\\begin{CodeBlock}{text}
-   Candy.
-   Gum.
-   Booze.
\\\\end{CodeBlock}



all produce the same output:



\\\\begin{CodeBlock}{text}
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
\\\\end{CodeBlock}



Ordered (numbered) lists use regular numbers, followed by periods, as
list markers:



\\\\begin{CodeBlock}{text}
1.  Red
2.  Green
3.  Blue
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
\\\\end{CodeBlock}



If you put blank lines between items, you'll get \\\\texttt{<p>} tags for the
list item text. You can create multi-paragraph list items by indenting
the paragraphs by 4 spaces or 1 tab:



\\\\begin{CodeBlock}{text}
*   A list item.

    With multiple paragraphs.

*   Another item in the list.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<ul>
<li><p>A list item.</p>
<p>With multiple paragraphs.</p></li>
<li><p>Another item in the list.</p></li>
</ul>
\\\\end{CodeBlock}



\\\\section{Links}


Markdown supports two styles for creating links: \\\\textit{inline} and
\\\\textit{reference}. With both styles, you use square brackets to delimit the
text you want to turn into a link.



Inline-style links use parentheses immediately after the link text.
For example:



\\\\begin{CodeBlock}{text}
This is an [example link](http://example.com/).
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>This is an <a href=\\"http://example.com/\\">
example link</a>.</p>
\\\\end{CodeBlock}



Optionally, you may include a title attribute in the parentheses:



\\\\begin{CodeBlock}{text}
This is an [example link](http://example.com/ \\"With a Title\\").
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>This is an <a href=\\"http://example.com/\\" title=\\"With a Title\\">
example link</a>.</p>
\\\\end{CodeBlock}



Reference-style links allow you to refer to your links by names, which
you define elsewhere in your document:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/        \\"Google\\"
[2]: http://search.yahoo.com/  \\"Yahoo Search\\"
[3]: http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from <a href=\\"http://search.yahoo.com/\\"
title=\\"Yahoo Search\\">Yahoo</a> or <a href=\\"http://search.msn.com/\\"
title=\\"MSN Search\\">MSN</a>.</p>
\\\\end{CodeBlock}



The title attribute is optional. Link names may contain letters,
numbers and spaces, but are \\\\textit{not} case sensitive:



\\\\begin{CodeBlock}{text}
I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I start my morning with a cup of coffee and
<a href=\\"http://www.nytimes.com/\\">The New York Times</a>.</p>
\\\\end{CodeBlock}



\\\\section{Images}


Image syntax is very much like link syntax.



Inline (titles are optional):



\\\\begin{CodeBlock}{text}
![alt text](/path/to/img.jpg \\"Title\\")
\\\\end{CodeBlock}



Reference-style:



\\\\begin{CodeBlock}{text}
![alt text][id]

[id]: /path/to/img.jpg \\"Title\\"
\\\\end{CodeBlock}



Both of the above examples produce the same output:



\\\\begin{CodeBlock}{text}
<img src=\\"/path/to/img.jpg\\" alt=\\"alt text\\" title=\\"Title\\" />
\\\\end{CodeBlock}



\\\\section{Code}


In a regular paragraph, you can create code span by wrapping text in
backtick quotes. Any ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} or
\\\\texttt{>}) will automatically be translated into HTML entities. This makes
it easy to use Markdown to write about HTML example code:



\\\\begin{CodeBlock}{text}
I strongly recommend against using any \`<blink>\` tags.

I wish SmartyPants used named entities like \`&mdash;\`
instead of decimal-encoded entites like \`&#8212;\`.
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>I strongly recommend against using any
<code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like
<code>&amp;mdash;</code> instead of decimal-encoded
entites like <code>&amp;#8212;</code>.</p>
\\\\end{CodeBlock}



To specify an entire block of pre-formatted code, indent every line of
the block by 4 spaces or 1 tab. Just like with code spans, \\\\texttt{\\\\&}, \\\\texttt{<},
and \\\\texttt{>} characters will be escaped automatically.



Markdown:



\\\\begin{CodeBlock}{text}
If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

    <blockquote>
        <p>For example.</p>
    </blockquote>
\\\\end{CodeBlock}



Output:



\\\\begin{CodeBlock}{text}
<p>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:</p>

<pre><code>&lt;blockquote&gt;
    &lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre>
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs markdown-documentation-syntax: markdown-documentation-syntax 1`] = `
"\\\\part{Markdown: Syntax}


<ul id=\\"ProjectSubmenu\\">
    <li><a href=\\"/projects/markdown/\\" title=\\"Markdown Project Page\\">Main</a></li>
    <li><a href=\\"/projects/markdown/basics\\" title=\\"Markdown Basics\\">Basics</a></li>
    <li><a class=\\"selected\\" title=\\"Markdown Syntax Documentation\\">Syntax</a></li>
    <li><a href=\\"/projects/markdown/license\\" title=\\"Pricing and License Information\\">License</a></li>
    <li><a href=\\"/projects/markdown/dingus\\" title=\\"Online Markdown Web Form\\">Dingus</a></li>
</ul>

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Overview}{\\\\#overview}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Philosophy}{\\\\#philosophy}
\\\\item\\\\relax \\\\externalLink{Inline HTML}{\\\\#html}
\\\\item\\\\relax \\\\externalLink{Automatic Escaping for Special Characters}{\\\\#autoescape}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Block Elements}{\\\\#block}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Paragraphs and Line Breaks}{\\\\#p}
\\\\item\\\\relax \\\\externalLink{Headers}{\\\\#header}
\\\\item\\\\relax \\\\externalLink{Blockquotes}{\\\\#blockquote}
\\\\item\\\\relax \\\\externalLink{Lists}{\\\\#list}
\\\\item\\\\relax \\\\externalLink{Code Blocks}{\\\\#precode}
\\\\item\\\\relax \\\\externalLink{Horizontal Rules}{\\\\#hr}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Span Elements}{\\\\#span}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Links}{\\\\#link}
\\\\item\\\\relax \\\\externalLink{Emphasis}{\\\\#em}
\\\\item\\\\relax \\\\externalLink{Code}{\\\\#code}
\\\\item\\\\relax \\\\externalLink{Images}{\\\\#img}
\\\\end{itemize}
\\\\item\\\\relax \\\\externalLink{Miscellaneous}{\\\\#misc}

\\\\begin{itemize}
\\\\item\\\\relax \\\\externalLink{Backslash Escapes}{\\\\#backslash}
\\\\item\\\\relax \\\\externalLink{Automatic Links}{\\\\#autolink}
\\\\end{itemize}
\\\\end{itemize}


\\\\textbf{Note:} This document is itself written using Markdown; you
can \\\\hyperref[src]{see the source for it by adding '.text' to the URL}.



\\\\footnote{\\\\label{src}\\\\externalLink{/projects/markdown/syntax.text}{/projects/markdown/syntax.text}}

\\\\horizontalLine



<h2 id=\\"overview\\">Overview</h2>

<h3 id=\\"philosophy\\">Philosophy</h3>

Markdown is intended to be as easy-to-read and easy-to-write as is feasible.



Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters -- including \\\\hyperref[1]{Setext}, \\\\hyperref[2]{atx}, \\\\hyperref[3]{Textile}, \\\\hyperref[4]{reStructuredText},
\\\\hyperref[5]{Grutatext}, and \\\\hyperref[6]{EtText} -- the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.



\\\\footnote{\\\\label{1}\\\\externalLink{http://docutils.sourceforge.net/mirror/setext.html}{http://docutils.sourceforge.net/mirror/setext.html}}

\\\\footnote{\\\\label{2}\\\\externalLink{http://www.aaronsw.com/2002/atx/}{http://www.aaronsw.com/2002/atx/}}

\\\\footnote{\\\\label{3}\\\\externalLink{http://textism.com/tools/textile/}{http://textism.com/tools/textile/}}

\\\\footnote{\\\\label{4}\\\\externalLink{http://docutils.sourceforge.net/rst.html}{http://docutils.sourceforge.net/rst.html}}

\\\\footnote{\\\\label{5}\\\\externalLink{http://www.triptico.com/software/grutatxt.html}{http://www.triptico.com/software/grutatxt.html}}

\\\\footnote{\\\\label{6}\\\\externalLink{http://ettext.taint.org/doc/}{http://ettext.taint.org/doc/}}

To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.



<h3 id=\\"html\\">Inline HTML</h3>

Markdown's syntax is intended for one purpose: to be used as a
format for \\\\textit{writing} for the web.



Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is \\\\textit{not} to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a \\\\textit{publishing} format; Markdown is a \\\\textit{writing}
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.



For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.



The only restrictions are that block-level HTML elements -- e.g. \\\\texttt{<div>},
\\\\texttt{<table>}, \\\\texttt{<pre>}, \\\\texttt{<p>}, etc. -- must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) \\\\texttt{<p>} tags around HTML block-level tags.



For example, to add an HTML table to a Markdown article:



\\\\begin{CodeBlock}{text}
This is a regular paragraph.

<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>

This is another regular paragraph.
\\\\end{CodeBlock}



Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style \\\\texttt{*emphasis*} inside an
HTML block.



Span-level HTML tags -- e.g. \\\\texttt{<span>}, \\\\texttt{<cite>}, or \\\\texttt{<del>} -- can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML \\\\texttt{<a>} or \\\\texttt{<img>} tags instead of Markdown's
link or image syntax, go right ahead.



Unlike block-level HTML tags, Markdown syntax \\\\textit{is} processed within
span-level tags.



<h3 id=\\"autoescape\\">Automatic Escaping for Special Characters</h3>

In HTML, there are two characters that demand special treatment: \\\\texttt{<}
and \\\\texttt{\\\\&}. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. \\\\texttt{\\\\&lt;}, and
\\\\texttt{\\\\&amp;}.



Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT\\\\&T', you need to write '\\\\texttt{AT\\\\&amp;T}'. You even need to
escape ampersands within URLs. Thus, if you want to link to:



\\\\begin{CodeBlock}{text}
http://images.google.com/images?num=30&q=larry+bird
\\\\end{CodeBlock}



you need to encode the URL as:



\\\\begin{CodeBlock}{text}
http://images.google.com/images?num=30&amp;q=larry+bird
\\\\end{CodeBlock}



in your anchor tag \\\\texttt{href} attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.



Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into \\\\texttt{\\\\&amp;}.



So, if you want to include a copyright symbol in your article, you can write:



\\\\begin{CodeBlock}{text}
&copy;
\\\\end{CodeBlock}



and Markdown will leave it alone. But if you write:



\\\\begin{CodeBlock}{text}
AT&T
\\\\end{CodeBlock}



Markdown will translate it to:



\\\\begin{CodeBlock}{text}
AT&amp;T
\\\\end{CodeBlock}



Similarly, because Markdown supports \\\\externalLink{inline HTML}{\\\\#html}, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:



\\\\begin{CodeBlock}{text}
4 < 5
\\\\end{CodeBlock}



Markdown will translate it to:



\\\\begin{CodeBlock}{text}
4 &lt; 5
\\\\end{CodeBlock}



However, inside Markdown code spans and blocks, angle brackets and
ampersands are \\\\textit{always} encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single \\\\texttt{<}
and \\\\texttt{\\\\&} in your example code needs to be escaped.)



\\\\horizontalLine



<h2 id=\\"block\\">Block Elements</h2>

<h3 id=\\"p\\">Paragraphs and Line Breaks</h3>

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.



The implication of the \\"one or more consecutive lines of text\\" rule is
that Markdown supports \\"hard-wrapped\\" text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's \\"Convert Line Breaks\\" option) which translate every line break
character in a paragraph into a \\\\texttt{<br />} tag.



When you \\\\textit{do} want to insert a \\\\texttt{<br />} break tag using Markdown, you
end a line with two or more spaces, then type return.



Yes, this takes a tad more effort to create a \\\\texttt{<br />}, but a simplistic
\\"every line break is a \\\\texttt{<br />}\\" rule wouldn't work for Markdown.
Markdown's email-style \\\\hyperref[bq]{blockquoting} and multi-paragraph \\\\hyperref[l]{list items}
work best -- and look better -- when you format them with hard breaks.



\\\\footnote{\\\\label{bq}\\\\externalLink{\\\\#blockquote}{\\\\#blockquote}}

\\\\footnote{\\\\label{l}\\\\externalLink{\\\\#list}{\\\\#list}}

<h3 id=\\"header\\">Headers</h3>

Markdown supports two styles of headers, \\\\hyperref[1]{Setext} and \\\\hyperref[2]{atx}.



Setext-style headers are \\"underlined\\" using equal signs (for first-level
headers) and dashes (for second-level headers). For example:



\\\\begin{CodeBlock}{text}
This is an H1
=============

This is an H2
-------------
\\\\end{CodeBlock}



Any number of underlining \\\\texttt{=}'s or \\\\texttt{-}'s will work.



Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:



\\\\begin{CodeBlock}{text}
# This is an H1

## This is an H2

###### This is an H6
\\\\end{CodeBlock}



Optionally, you may \\"close\\" atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :



\\\\begin{CodeBlock}{text}
# This is an H1 #

## This is an H2 ##

### This is an H3 ######
\\\\end{CodeBlock}



<h3 id=\\"blockquote\\">Blockquotes</h3>

Markdown uses email-style \\\\texttt{>} characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a \\\\texttt{>} before every line:



\\\\begin{CodeBlock}{text}
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
> 
> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
> id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



Markdown allows you to be lazy and only put the \\\\texttt{>} before the first
line of a hard-wrapped paragraph:



\\\\begin{CodeBlock}{text}
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of \\\\texttt{>}:



\\\\begin{CodeBlock}{text}
> This is the first level of quoting.
>
> > This is nested blockquote.
>
> Back to the first level.
\\\\end{CodeBlock}



Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:



\\\\begin{CodeBlock}{text}
> ## This is a header.
> 
> 1.   This is the first list item.
> 2.   This is the second list item.
> 
> Here's some example code:
> 
>     return shell_exec(\\"echo $input | $markdown_script\\");
\\\\end{CodeBlock}



Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.



<h3 id=\\"list\\">Lists</h3>

Markdown supports ordered (numbered) and unordered (bulleted) lists.



Unordered lists use asterisks, pluses, and hyphens -- interchangably
-- as list markers:



\\\\begin{CodeBlock}{text}
*   Red
*   Green
*   Blue
\\\\end{CodeBlock}



is equivalent to:



\\\\begin{CodeBlock}{text}
+   Red
+   Green
+   Blue
\\\\end{CodeBlock}



and:



\\\\begin{CodeBlock}{text}
-   Red
-   Green
-   Blue
\\\\end{CodeBlock}



Ordered lists use numbers followed by periods:



\\\\begin{CodeBlock}{text}
1.  Bird
2.  McHale
3.  Parish
\\\\end{CodeBlock}



It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:



\\\\begin{CodeBlock}{text}
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
\\\\end{CodeBlock}



If you instead wrote the list in Markdown like this:



\\\\begin{CodeBlock}{text}
1.  Bird
1.  McHale
1.  Parish
\\\\end{CodeBlock}



or even:



\\\\begin{CodeBlock}{text}
3. Bird
1. McHale
8. Parish
\\\\end{CodeBlock}



you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.



If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.



List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.



To make lists look nice, you can wrap items with hanging indents:



\\\\begin{CodeBlock}{text}
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



But if you want to be lazy, you don't have to:



\\\\begin{CodeBlock}{text}
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



If list items are separated by blank lines, Markdown will wrap the
items in \\\\texttt{<p>} tags in the HTML output. For example, this input:



\\\\begin{CodeBlock}{text}
*   Bird
*   Magic
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<ul>
<li>Bird</li>
<li>Magic</li>
</ul>
\\\\end{CodeBlock}



But this:



\\\\begin{CodeBlock}{text}
*   Bird

*   Magic
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>
\\\\end{CodeBlock}



List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:



\\\\begin{CodeBlock}{text}
1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
\\\\end{CodeBlock}



It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:



\\\\begin{CodeBlock}{text}
*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
\\\\end{CodeBlock}



To put a blockquote within a list item, the blockquote's \\\\texttt{>}
delimiters need to be indented:



\\\\begin{CodeBlock}{text}
*   A list item with a blockquote:

    > This is a blockquote
    > inside a list item.
\\\\end{CodeBlock}



To put a code block within a list item, the code block needs
to be indented \\\\textit{twice} -- 8 spaces or two tabs:



\\\\begin{CodeBlock}{text}
*   A list item with a code block:

        <code goes here>
\\\\end{CodeBlock}



It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:



\\\\begin{CodeBlock}{text}
1986. What a great season.
\\\\end{CodeBlock}



In other words, a \\\\textit{number-period-space} sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:



\\\\begin{CodeBlock}{text}
1986\\\\. What a great season.
\\\\end{CodeBlock}



<h3 id=\\"precode\\">Code Blocks</h3>

Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both \\\\texttt{<pre>} and \\\\texttt{<code>} tags.



To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:



\\\\begin{CodeBlock}{text}
This is a normal paragraph:

    This is a code block.
\\\\end{CodeBlock}



Markdown will generate:



\\\\begin{CodeBlock}{text}
<p>This is a normal paragraph:</p>

<pre><code>This is a code block.
</code></pre>
\\\\end{CodeBlock}



One level of indentation -- 4 spaces or 1 tab -- is removed from each
line of the code block. For example, this:



\\\\begin{CodeBlock}{text}
Here is an example of AppleScript:

    tell application \\"Foo\\"
        beep
    end tell
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<p>Here is an example of AppleScript:</p>

<pre><code>tell application \\"Foo\\"
    beep
end tell
</code></pre>
\\\\end{CodeBlock}



A code block continues until it reaches a line that is not indented
(or the end of the article).



Within a code block, ampersands (\\\\texttt{\\\\&}) and angle brackets (\\\\texttt{<} and \\\\texttt{>})
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:



\\\\begin{CodeBlock}{text}
    <div class=\\"footer\\">
        &copy; 2004 Foo Corporation
    </div>
\\\\end{CodeBlock}



will turn into:



\\\\begin{CodeBlock}{text}
<pre><code>&lt;div class=\\"footer\\"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>
\\\\end{CodeBlock}



Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.



<h3 id=\\"hr\\">Horizontal Rules</h3>

You can produce a horizontal rule tag (\\\\texttt{<hr>}) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:



\\\\begin{CodeBlock}{text}
* * *

***

*****

- - -

---------------------------------------

_ _ _
\\\\end{CodeBlock}



\\\\horizontalLine



<h2 id=\\"span\\">Span Elements</h2>

<h3 id=\\"link\\">Links</h3>

Markdown supports two style of links: \\\\textit{inline} and \\\\textit{reference}.



In both styles, the link text is delimited by [square brackets].



To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an \\\\textit{optional}
title for the link, surrounded in quotes. For example:



\\\\begin{CodeBlock}{text}
This is [an example](http://example.com/ \\"Title\\") inline link.

[This link](http://example.net/) has no title attribute.
\\\\end{CodeBlock}



Will produce:



\\\\begin{CodeBlock}{text}
<p>This is <a href=\\"http://example.com/\\" title=\\"Title\\">
an example</a> inline link.</p>

<p><a href=\\"http://example.net/\\">This link</a> has no
title attribute.</p>
\\\\end{CodeBlock}



If you're referring to a local resource on the same server, you can
use relative paths:



\\\\begin{CodeBlock}{text}
See my [About](/about/) page for details.
\\\\end{CodeBlock}



Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:



\\\\begin{CodeBlock}{text}
This is [an example][id] reference-style link.
\\\\end{CodeBlock}



You can optionally use a space to separate the sets of brackets:



\\\\begin{CodeBlock}{text}
This is [an example] [id] reference-style link.
\\\\end{CodeBlock}



Then, anywhere in the document, you define your link label like this,
on a line by itself:



\\\\begin{CodeBlock}{text}
[id]: http://example.com/  \\"Optional Title Here\\"
\\\\end{CodeBlock}



That is:



\\\\begin{itemize}
\\\\item\\\\relax Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);
\\\\item\\\\relax followed by a colon;
\\\\item\\\\relax followed by one or more spaces (or tabs);
\\\\item\\\\relax followed by the URL for the link;
\\\\item\\\\relax optionally followed by a title attribute for the link, enclosed
in double or single quotes.
\\\\end{itemize}


The link URL may, optionally, be surrounded by angle brackets:



\\\\begin{CodeBlock}{text}
[id]: <http://example.com/>  \\"Optional Title Here\\"
\\\\end{CodeBlock}



You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:



\\\\begin{CodeBlock}{text}
[id]: http://example.com/longish/path/to/resource/here
    \\"Optional Title Here\\"
\\\\end{CodeBlock}



Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.



Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are \\\\textit{not} case sensitive. E.g. these two links:



\\\\begin{CodeBlock}{text}
[link text][a]
[link text][A]
\\\\end{CodeBlock}



are equivalent.



The \\\\textit{implicit link name} shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
\\"Google\\" to the google.com web site, you could simply write:



\\\\begin{CodeBlock}{text}
[Google][]
\\\\end{CodeBlock}



And then define the link:



\\\\begin{CodeBlock}{text}
[Google]: http://google.com/
\\\\end{CodeBlock}



Because link names may contain spaces, this shortcut even works for
multiple words in the link text:



\\\\begin{CodeBlock}{text}
Visit [Daring Fireball][] for more information.
\\\\end{CodeBlock}



And then define the link:



\\\\begin{CodeBlock}{text}
[Daring Fireball]: http://daringfireball.net/
\\\\end{CodeBlock}



Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.



Here's an example of reference links in action:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        \\"Google\\"
  [2]: http://search.yahoo.com/  \\"Yahoo Search\\"
  [3]: http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Using the implicit link name shortcut, you could instead write:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        \\"Google\\"
  [yahoo]:  http://search.yahoo.com/  \\"Yahoo Search\\"
  [msn]:    http://search.msn.com/    \\"MSN Search\\"
\\\\end{CodeBlock}



Both of the above examples will produce the following HTML output:



\\\\begin{CodeBlock}{text}
<p>I get 10 times more traffic from <a href=\\"http://google.com/\\"
title=\\"Google\\">Google</a> than from
<a href=\\"http://search.yahoo.com/\\" title=\\"Yahoo Search\\">Yahoo</a>
or <a href=\\"http://search.msn.com/\\" title=\\"MSN Search\\">MSN</a>.</p>
\\\\end{CodeBlock}



For comparison, here is the same paragraph written using
Markdown's inline link style:



\\\\begin{CodeBlock}{text}
I get 10 times more traffic from [Google](http://google.com/ \\"Google\\")
than from [Yahoo](http://search.yahoo.com/ \\"Yahoo Search\\") or
[MSN](http://search.msn.com/ \\"MSN Search\\").
\\\\end{CodeBlock}



The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.



With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.



<h3 id=\\"em\\">Emphasis</h3>

Markdown treats asterisks (\\\\texttt{*}) and underscores (\\\\texttt{\\\\_}) as indicators of
emphasis. Text wrapped with one \\\\texttt{*} or \\\\texttt{\\\\_} will be wrapped with an
HTML \\\\texttt{<em>} tag; double \\\\texttt{*}'s or \\\\texttt{\\\\_}'s will be wrapped with an HTML
\\\\texttt{<strong>} tag. E.g., this input:



\\\\begin{CodeBlock}{text}
*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<em>single asterisks</em>

<em>single underscores</em>

<strong>double asterisks</strong>

<strong>double underscores</strong>
\\\\end{CodeBlock}



You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.



Emphasis can be used in the middle of a word:



\\\\begin{CodeBlock}{text}
un*fucking*believable
\\\\end{CodeBlock}



But if you surround an \\\\texttt{*} or \\\\texttt{\\\\_} with spaces, it'll be treated as a
literal asterisk or underscore.



To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:



\\\\begin{CodeBlock}{text}
\\\\*this text is surrounded by literal asterisks\\\\*
\\\\end{CodeBlock}



<h3 id=\\"code\\">Code</h3>

To indicate a span of code, wrap it with backtick quotes (\\\\texttt{\`}).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:



\\\\begin{CodeBlock}{text}
Use the \`printf()\` function.
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<p>Use the <code>printf()</code> function.</p>
\\\\end{CodeBlock}



To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:



\\\\begin{CodeBlock}{text}
\`\`There is a literal backtick (\`) here.\`\`
\\\\end{CodeBlock}



which will produce this:



\\\\begin{CodeBlock}{text}
<p><code>There is a literal backtick (\`) here.</code></p>
\\\\end{CodeBlock}



The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:



\\\\begin{CodeBlock}{text}
A single backtick in a code span: \`\` \` \`\`

A backtick-delimited string in a code span: \`\` \`foo\` \`\`
\\\\end{CodeBlock}



will produce:



\\\\begin{CodeBlock}{text}
<p>A single backtick in a code span: <code>\`</code></p>

<p>A backtick-delimited string in a code span: <code>\`foo\`</code></p>
\\\\end{CodeBlock}



With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:



\\\\begin{CodeBlock}{text}
Please don't use any \`<blink>\` tags.
\\\\end{CodeBlock}



into:



\\\\begin{CodeBlock}{text}
<p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>
\\\\end{CodeBlock}



You can write this:



\\\\begin{CodeBlock}{text}
\`&#8212;\` is the decimal-encoded equivalent of \`&mdash;\`.
\\\\end{CodeBlock}



to produce:



\\\\begin{CodeBlock}{text}
<p><code>&amp;#8212;</code> is the decimal-encoded
equivalent of <code>&amp;mdash;</code>.</p>
\\\\end{CodeBlock}



<h3 id=\\"img\\">Images</h3>

Admittedly, it's fairly difficult to devise a \\"natural\\" syntax for
placing images into a plain text document format.



Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: \\\\textit{inline} and \\\\textit{reference}.



Inline image syntax looks like this:



\\\\begin{CodeBlock}{text}
![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg \\"Optional title\\")
\\\\end{CodeBlock}



That is:



\\\\begin{itemize}
\\\\item\\\\relax An exclamation mark: \\\\texttt{!};
\\\\item\\\\relax followed by a set of square brackets, containing the \\\\texttt{alt}
attribute text for the image;
\\\\item\\\\relax followed by a set of parentheses, containing the URL or path to
the image, and an optional \\\\texttt{title} attribute enclosed in double
or single quotes.
\\\\end{itemize}


Reference-style image syntax looks like this:



\\\\begin{CodeBlock}{text}
![Alt text][id]
\\\\end{CodeBlock}



Where \\"id\\" is the name of a defined image reference. Image references
are defined using syntax identical to link references:



\\\\begin{CodeBlock}{text}
[id]: url/to/image  \\"Optional title attribute\\"
\\\\end{CodeBlock}



As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML \\\\texttt{<img>} tags.



\\\\horizontalLine



<h2 id=\\"misc\\">Miscellaneous</h2>

<h3 id=\\"autolink\\">Automatic Links</h3>

Markdown supports a shortcut style for creating \\"automatic\\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:



\\\\begin{CodeBlock}{text}
<http://example.com/>
\\\\end{CodeBlock}



Markdown will turn this into:



\\\\begin{CodeBlock}{text}
<a href=\\"http://example.com/\\">http://example.com/</a>
\\\\end{CodeBlock}



Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:



\\\\begin{CodeBlock}{text}
<address@example.com>
\\\\end{CodeBlock}



into something like this:



\\\\begin{CodeBlock}{text}
<a href=\\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
&#109;\\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;
&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>
\\\\end{CodeBlock}



which will render in a browser as a clickable link to \\"\\\\externalLink{address@example.com}{mailto:address@example.com}\\".



(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)



<h3 id=\\"backslash\\">Backslash Escapes</h3>

Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML \\\\texttt{<em>} tag), you can backslashes
before the asterisks, like this:



\\\\begin{CodeBlock}{text}
\\\\*literal asterisks\\\\*
\\\\end{CodeBlock}



Markdown provides backslash escapes for the following characters:



\\\\begin{CodeBlock}{text}
\\\\   backslash
\`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+	plus sign
-	minus sign (hyphen)
.   dot
!   exclamation mark
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs mixed-indentation: mixed-indentation 1`] = `
"\\\\part{Mixed spaces and tabs}


\\\\begin{itemize}
\\\\item\\\\relax Very long
paragraph
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax Very long
paragraph
\\\\end{enumerate}


\\\\begin{itemize}
\\\\item\\\\relax Very long
paragraph
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax Very long
paragraph
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs nested-blockquotes: nested-blockquotes 1`] = `
"\\\\begin{Quotation}
foo

\\\\begin{Quotation}
bar
\\\\end{Quotation}

foo
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs nested-code: nested-code 1`] = `
"\\\\texttt{hi ther \`\` ok \`\`\`}



\\\\texttt{\`hi ther\`}

"
`;

exports[`toLaTeX: remark specs nested-em: nested-em 1`] = `
"\\\\textit{test \\\\textbf{test} test}



\\\\textit{test \\\\textbf{test} test}

"
`;

exports[`toLaTeX: remark specs nested-references: nested-references 1`] = `
"This nested image should work:



[\\\\includegraphics{undefined}]



This nested link should not work:



[[Foo][bar]]

"
`;

exports[`toLaTeX: remark specs nested-square-link: nested-square-link 1`] = `
"[the \`]\` character](/url)



[the \\\\texttt{[} character](/url)



[the \`\` \\\\externalLink{ \`\`\` character}{/url}



\\\\externalLink{the \\\\texttt{\`} character}{/url}

"
`;

exports[`toLaTeX: remark specs no-positionals: no-positionals 1`] = `
"This document tests for the working of \\\\texttt{position: false} as a parse
option.



\\\\begin{Quotation}
Block-quotes

\\\\begin{itemize}
\\\\item\\\\relax With list items.
\\\\end{itemize}
\\\\end{Quotation}



Another block-quote:



\\\\begin{Quotation}
\\\\begin{enumerate}
\\\\item\\\\relax And another list.
\\\\end{enumerate}
\\\\end{Quotation}



Some \\\\externalLink{deeply \\\\textbf{nested \\\\textit{elements}}}{http://example.com}



An entity: ©, and an warning entity: ©.

"
`;

exports[`toLaTeX: remark specs not-a-link: not-a-link 1`] = `
"[test](not a link)

"
`;

exports[`toLaTeX: remark specs ordered-and-unordered-lists: ordered-and-unordered-lists 1`] = `
"\\\\chapter{Unordered}


Asterisks tight:



\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}


Asterisks loose:



\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}


\\\\horizontalLine



Pluses tight:



\\\\begin{itemize}
\\\\item\\\\relax Plus 1
\\\\item\\\\relax Plus 2
\\\\item\\\\relax Plus 3
\\\\end{itemize}


Pluses loose:



\\\\begin{itemize}
\\\\item\\\\relax Plus 1
\\\\item\\\\relax Plus 2
\\\\item\\\\relax Plus 3
\\\\end{itemize}


\\\\horizontalLine



Minuses tight:



\\\\begin{itemize}
\\\\item\\\\relax Minus 1
\\\\item\\\\relax Minus 2
\\\\item\\\\relax Minus 3
\\\\end{itemize}


Minuses loose:



\\\\begin{itemize}
\\\\item\\\\relax Minus 1
\\\\item\\\\relax Minus 2
\\\\item\\\\relax Minus 3
\\\\end{itemize}


\\\\chapter{Ordered}


Tight:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second
\\\\item\\\\relax Third
\\\\end{enumerate}


and:



\\\\begin{enumerate}
\\\\item\\\\relax One
\\\\item\\\\relax Two
\\\\item\\\\relax Three
\\\\end{enumerate}


Loose using tabs:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second
\\\\item\\\\relax Third
\\\\end{enumerate}


and using spaces:



\\\\begin{enumerate}
\\\\item\\\\relax One
\\\\item\\\\relax Two
\\\\item\\\\relax Three
\\\\end{enumerate}


Multiple paragraphs:



\\\\begin{enumerate}
\\\\item\\\\relax Item 1, graf one.

Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
\\\\item\\\\relax Item 2.
\\\\item\\\\relax Item 3.
\\\\end{enumerate}


\\\\chapter{Nested}


\\\\begin{itemize}
\\\\item\\\\relax Tab

\\\\begin{itemize}
\\\\item\\\\relax Tab

\\\\begin{itemize}
\\\\item\\\\relax Tab
\\\\end{itemize}
\\\\end{itemize}
\\\\end{itemize}


Here's another:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second:

\\\\begin{itemize}
\\\\item\\\\relax Fee
\\\\item\\\\relax Fie
\\\\item\\\\relax Foe
\\\\end{itemize}
\\\\item\\\\relax Third
\\\\end{enumerate}


Same thing but with paragraphs:



\\\\begin{enumerate}
\\\\item\\\\relax First
\\\\item\\\\relax Second:

\\\\begin{itemize}
\\\\item\\\\relax Fee
\\\\item\\\\relax Fie
\\\\item\\\\relax Foe
\\\\end{itemize}
\\\\item\\\\relax Third
\\\\end{enumerate}


This was an error in Markdown 1.0.1:



\\\\begin{itemize}
\\\\item\\\\relax this

\\\\begin{itemize}
\\\\item\\\\relax sub
\\\\end{itemize}
that
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs ordered-different-types: ordered-different-types 1`] = `
"\\\\begin{enumerate}
\\\\item\\\\relax foo
\\\\item\\\\relax bar
3) baz
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs ordered-with-parentheses: ordered-with-parentheses 1`] = `
"\\\\chapter{Ordered}


Tight:



1)	First
2)	Second
3)	Third



and:



1) One
2) Two
3) Three



Loose using tabs:



1)	First



2)	Second



3)	Third



and using spaces:



1) One



2) Two



3) Three



Multiple paragraphs:



1)	Item 1, graf one.



\\\\begin{CodeBlock}{text}
Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
\\\\end{CodeBlock}



2)	Item 2.



3)	Item 3.

"
`;

exports[`toLaTeX: remark specs paragraphs-and-indentation: paragraphs-and-indentation 1`] = `
"\\\\part{Without lines.}


This is a paragraph
and this is further text



This is a paragraph
and this is further text



This is a paragraph with some asterisks



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



This is a paragraph followed by a horizontal rule



\\\\horizontalLine



\\\\part{With lines.}


This is a paragraph



\\\\begin{CodeBlock}{text}
and this is code
\\\\end{CodeBlock}



This is a paragraph



and this is a new paragraph



This is a paragraph with some asterisks in a code block



\\\\begin{CodeBlock}{text}
***
\\\\end{CodeBlock}



This is a paragraph followed by a horizontal rule



\\\\horizontalLine

"
`;

exports[`toLaTeX: remark specs paragraphs-empty: paragraphs-empty 1`] = `
"aaa



\\\\part{aaa}


bbb



ccc

"
`;

exports[`toLaTeX: remark specs ref-paren: ref-paren 1`] = `
"\\\\hyperref[hi]{hi}



\\\\footnote{\\\\label{hi}\\\\externalLink{/url}{/url}}"
`;

exports[`toLaTeX: remark specs reference-image-empty-alt: reference-image-empty-alt 1`] = `
"\\\\includegraphics{/xyz.png}



\\\\footnote{\\\\label{1}\\\\externalLink{/xyz.png}{/xyz.png}}"
`;

exports[`toLaTeX: remark specs reference-link-escape: reference-link-escape 1`] = `
"[b*r*], \\\\hyperref[b\\\\*r*]{b*r*}, \\\\hyperref[b\\\\*r*]{b*r*}.



\\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}, \\\\includegraphics{http://google.com}.



\\\\footnote{\\\\label{b\\\\*r*}\\\\externalLink{http://google.com}{http://google.com}}"
`;

exports[`toLaTeX: remark specs reference-link-not-closed: reference-link-not-closed 1`] = `
"[bar]bar



[bar]



[bar]

"
`;

exports[`toLaTeX: remark specs reference-link-with-angle-brackets: reference-link-with-angle-brackets 1`] = `
"\\\\hyperref[foo]{foo}



\\\\footnote{\\\\label{foo}\\\\externalLink{./url with spaces}{./url with spaces}}"
`;

exports[`toLaTeX: remark specs reference-link-with-multiple-definitions: reference-link-with-multiple-definitions 1`] = `
"\\\\hyperref[foo]{foo}



\\\\footnote{\\\\label{foo}\\\\externalLink{first}{first}}

\\\\footnote{\\\\label{foo-1}\\\\externalLink{second}{second}}"
`;

exports[`toLaTeX: remark specs same-bullet: same-bullet 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}



\\\\begin{itemize}
\\\\item\\\\relax test
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs stringify-escape: stringify-escape 1`] = `
"Characters that should be escaped in general:



\\\\textbackslash{} \` * [



Characters that shouldn't:



\\\\{\\\\}]()\\\\#+-.!>\\"\\\\$\\\\%',/:;=?@\\\\textasciicircum{}\\\\textasciitilde{}



Underscores are \\\\_escaped\\\\_ unless they appear in\\\\_the\\\\_middle\\\\_of\\\\_a\\\\_word.
or \\\\textbf{\\\\_here}, or here\\\\_\\\\_



Ampersands are escaped only when they would otherwise start an entity:



\\\\begin{itemize}
\\\\item\\\\relax \\\\textbackslash{}©cat \\\\textbackslash{}\\\\& \\\\textbackslash{}\\\\&
\\\\item\\\\relax \\\\&copycat \\\\&amp; \\\\&\\\\#x26
\\\\item\\\\relax But: ©cat; \\\\texttt{\\\\&between;} \\\\&foo; \\\\& AT\\\\&T \\\\&c
\\\\end{itemize}


Open parenthesis should be escaped after a shortcut reference:



[ref](text)



And after a shortcut reference and a space (for GitHub):



[ref] (text)



Hyphen should be escaped at the beginning of a line:



- not a list item
- not a list item
+ not a list item



Same for angle brackets:



> not a block quote



And hash signs:



\\\\# not a heading
\\\\#\\\\# not a subheading



Text under a shortcut reference should be preserved verbatim:



\\\\begin{itemize}
\\\\item\\\\relax [two*three]
\\\\item\\\\relax [two*three]
\\\\item\\\\relax [a\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\textbackslash{}\\\\textbackslash{}a]
\\\\item\\\\relax [a\\\\_a\\\\_a]
\\\\end{itemize}


\\\\textbf{GFM:}



Colon should be escaped in URLs:



\\\\begin{itemize}
\\\\item\\\\relax http\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax https\\\\textbackslash{}://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax http://user:password@host:port/path?key=value\\\\#fragment
\\\\item\\\\relax https://user:password@host:port/path?key=value\\\\#fragment
\\\\end{itemize}


Double tildes should be \\\\textasciitilde{}\\\\textasciitilde{}escaped\\\\textasciitilde{}\\\\textasciitilde{}.
And here: foo\\\\textasciitilde{}\\\\textasciitilde{}.



Pipes should not be escaped here: |



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
here & they \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
should & tho|ugh \\\\\\\\ \\\\hline
\\\\end{longtabu}


And here:



| here   | they   |
| ---- | ----- |
| should | though |



And here:



here   | they
---- | ------
should | though



\\\\textbf{Commonmark:}



Open angle bracket should be escaped:



\\\\begin{itemize}
\\\\item\\\\relax \\\\textbackslash{}<div>\\\\textbackslash{}</div>
\\\\item\\\\relax \\\\textbackslash{}<http\\\\textbackslash{}:google.com>
\\\\item\\\\relax <div></div>
\\\\item\\\\relax <http:google.com>
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs strong-and-em-together-one: strong-and-em-together-one 1`] = `
"\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word.



\\\\textbf{\\\\textit{This is strong and em.}}



So is \\\\textbf{\\\\textit{this}} word.

"
`;

exports[`toLaTeX: remark specs strong-and-em-together-two: strong-and-em-together-two 1`] = `
"perform\\\\_complicated\\\\_task



do\\\\_this\\\\_and\\\\_do\\\\_that\\\\_and\\\\_another\\\\_thing



perform\\\\textit{complicated}task



do\\\\textit{this}and\\\\textit{do}that\\\\textit{and}another*thing

"
`;

exports[`toLaTeX: remark specs strong-emphasis: strong-emphasis 1`] = `
"Foo \\\\textbf{bar} \\\\textbf{baz}.



Foo \\\\textbf{bar} \\\\textbf{baz}.

"
`;

exports[`toLaTeX: remark specs strong-initial-white-space: strong-initial-white-space 1`] = `
"\\\\textbf{ bar }.



\\\\textbf{ bar }.

"
`;

exports[`toLaTeX: remark specs table: table 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Heading 1 & \\\\textbf{H}eading 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
Cell 5 & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{CodeBlock}{text}
Test code
\\\\end{CodeBlock}



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 & Header 3 & Header 4 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 & Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\textit{Cell 5} & Cell 6 & Cell 7 & Cell 8 \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-empty-initial-cell: table-empty-initial-cell 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
 & a & c \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
a & b & c \\\\\\\\ \\\\hline
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-escaped-pipes: table-escaped-pipes 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
First & Second & third \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
first & second & third \\\\\\\\ \\\\hline
first & second | second & third | \\\\\\\\ \\\\hline
first & second \\\\textbackslash{} & third \\\\textbackslash{} \\\\\\\\ \\\\hline
first & second \\\\textbackslash{}| second & third \\\\textbackslash{}| \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-in-list: table-in-list 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax Unordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}
\\\\item\\\\relax Ordered:

\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
A & B \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs table-invalid-alignment: table-invalid-alignment 1`] = `
"Missing alignment characters:



| a | b | c |
|   |---|---|
| d | e | f |



\\\\horizontalLine



| a | b | c |
|---|---|   |
| d | e | f |



Invalid characters:



| a | b | c |
|---|-*-|---|
| d | e | f |

"
`;

exports[`toLaTeX: remark specs table-loose: table-loose 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-no-body: table-no-body 1`] = `
"\\\\part{Foo}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Name & GitHub & Twitter \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-no-end-of-line: table-no-end-of-line 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
foo & bar \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
1 & 2 \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-one-column: table-one-column 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
b \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-one-row: table-one-row 1`] = `
"This is a table:



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
a & b & c \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-padded: table-padded 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-pipes-in-code: table-pipes-in-code 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` &  &  & \` \\\\\\\\ \\\\hline
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
abc & head2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
x & \` \\\\\\\\ \\\\hline
x & \` & \` \\\\\\\\ \\\\hline
x & \\\\texttt{f} \\\\\\\\ \\\\hline
x & \`\`\`\` \\\\\\\\ \\\\hline
x & \`\\\\texttt{f} \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-spaced: table-spaced 1`] = `
"\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Header 1 & Header 2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Cell 1 & Cell 2 \\\\\\\\ \\\\hline
Cell 3 & Cell 4 \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs table-with-image: table-with-image 1`] = `
"Someone wanted to do this, let's implement it!



\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
c1 & c2 \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
c3 & \\\\includegraphics{https://zestedesavoir.com/media/galleries/426/56dc4a1e-416b-4a9d-830d-95b45d58a17a.png} \\\\\\\\ \\\\hline
\\\\end{longtabu}
"
`;

exports[`toLaTeX: remark specs tabs: tabs 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax this is a list item
indented with tabs
\\\\item\\\\relax this is a list item
indented with spaces
\\\\end{itemize}


Code:



\\\\begin{CodeBlock}{text}
this code block is indented by one tab
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
	this code block is indented by two tabs
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs tabs-and-spaces: tabs-and-spaces 1`] = `
"\\\\begin{itemize}
\\\\item\\\\relax this is a list item
indented with tabs
\\\\item\\\\relax this is a list item
indented with spaces
\\\\end{itemize}


Code:



\\\\begin{CodeBlock}{text}
this code block is indented by one tab
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
	this code block is indented by two tabs
\\\\end{CodeBlock}



And:



\\\\begin{CodeBlock}{text}
+	this is an example list item
	indented with tabs

+   this is an example list item
    indented with spaces
\\\\end{CodeBlock}

"
`;

exports[`toLaTeX: remark specs task-list: task-list 1`] = `
"\\\\part{Empty items}


\\\\begin{itemize}
\\\\item\\\\relax [ ]
\\\\item\\\\relax [	]
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [x]
\\\\item\\\\relax [X]
\\\\end{enumerate}


\\\\part{Single space}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\end{enumerate}


\\\\part{Tab}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax 
\\\\item[$\\\\square$]\\\\relax 
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\item[$\\\\boxtimes$]\\\\relax 
\\\\end{enumerate}


\\\\part{No white space with content}


\\\\begin{itemize}
\\\\item\\\\relax [ ]Hello;
\\\\item\\\\relax [	]World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [x]Foo.
\\\\item\\\\relax [X]Bar
\\\\end{enumerate}


\\\\part{Single space with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax World :D
\\\\end{enumerate}


\\\\part{Single tab with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Hello;
\\\\item[$\\\\square$]\\\\relax World;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Hello.
\\\\end{enumerate}


\\\\part{Multiple spaces with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Foo.
\\\\item[$\\\\boxtimes$]\\\\relax Bar.
\\\\end{enumerate}


\\\\part{Multiple tabs with content}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
Foo.
\\\\end{CodeBlock}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
Bar.
\\\\end{CodeBlock}
\\\\end{enumerate}


\\\\part{Mixed tabs and spaces}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
    Hello;
\\\\end{CodeBlock}
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax \\\\begin{CodeBlock}{text}
World;
\\\\end{CodeBlock}
\\\\end{enumerate}


\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax \\\\begin{CodeBlock}{text}
	Hello;
\\\\end{CodeBlock}
\\\\item[$\\\\square$]\\\\relax World.
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Bar.
\\\\end{enumerate}


\\\\part{Line breaks}


\\\\begin{itemize}
\\\\item\\\\relax [
] Hello;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [
] Hello;
\\\\end{enumerate}


\\\\part{Multiple unfinished characters}


\\\\begin{itemize}
\\\\item\\\\relax [  ] Hello;
\\\\end{itemize}


\\\\begin{enumerate}
\\\\item\\\\relax [
] World;
\\\\item\\\\relax [		] Hello;
\\\\item\\\\relax [ 	 ] World.
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs task-list-ordered: task-list-ordered 1`] = `
"\\\\begin{enumerate}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{enumerate}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{enumerate}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{enumerate}
"
`;

exports[`toLaTeX: remark specs task-list-unordered-asterisk: task-list-unordered-asterisk 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs task-list-unordered-dash: task-list-unordered-dash 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs task-list-unordered-plus: task-list-unordered-plus 1`] = `
"\\\\begin{itemize}
\\\\item[$\\\\square$]\\\\relax Mercury;
\\\\item\\\\relax [] Venus (this one’s invalid);
\\\\item[$\\\\boxtimes$]\\\\relax Earth:

\\\\begin{itemize}
\\\\item[$\\\\boxtimes$]\\\\relax Moon.
\\\\end{itemize}
\\\\item[$\\\\square$]\\\\relax Mars;
\\\\item\\\\relax [] Neptune (this one’s also invalid).
\\\\end{itemize}
"
`;

exports[`toLaTeX: remark specs tidyness: tidyness 1`] = `
"\\\\begin{Quotation}
A list within a blockquote:

\\\\begin{itemize}
\\\\item\\\\relax asterisk 1
\\\\item\\\\relax asterisk 2
\\\\item\\\\relax asterisk 3
\\\\end{itemize}
\\\\end{Quotation}

"
`;

exports[`toLaTeX: remark specs title-attributes: title-attributes 1`] = `
"\\\\part{Links}


\\\\begin{longtabu} spread 0pt {|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|X[-1]|} \\\\hline
\\\\rowfont[c]{\\\\bfseries}
Implementation & Characters & Nested & Mismatched & Escaped & Named Entities & Numbered Entities \\\\\\\\ \\\\hline
\\\\rowfont[l]{}
Markdown.pl & \\\\texttt{\\"} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{\\"} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{\\"} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{'} & Yes & Yes & No & Yes & Yes \\\\\\\\ \\\\hline
GitHub & \\\\texttt{'} & Yes & Yes & No & No & No \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{'} & No & No & Yes & Yes & Yes \\\\\\\\ \\\\hline
Markdown.pl & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
GitHub & \\\\texttt{()} & - & - & - & - & - \\\\\\\\ \\\\hline
CommonMark & \\\\texttt{()} & No & Yes & Yes & Yes & Yes \\\\\\\\ \\\\hline
\\\\end{longtabu}


\\\\chapter{Double quotes}


\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\chapter{Single quotes}


\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\externalLink{Hello}{./world.html}



\\\\part{Images}


\\\\chapter{Double quotes}


\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\chapter{Single quotes}


\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}



\\\\includegraphics{./world.png}

"
`;

exports[`toLaTeX: remark specs toplevel-paragraphs: toplevel-paragraphs 1`] = `
"hello world
how are you
how are you



hello world



\\\\begin{CodeBlock}{text}
how are you
\\\\end{CodeBlock}



hello world



\\\\horizontalLine



hello world



\\\\part{how are you}


hello world



\\\\part{how are you}


hello world



\\\\begin{Quotation}
how are you
\\\\end{Quotation}



hello world



\\\\begin{itemize}
\\\\item\\\\relax how are you
\\\\end{itemize}


hello world



<div>how are you</div>

hello world
<span>how are you</span>



hello \\\\hyperref[how]{world}



\\\\footnote{\\\\label{how}\\\\externalLink{/are/you}{/are/you}}

<div>hello</div>

<span>hello</span>

"
`;

exports[`toLaTeX: remark specs tricky-list: tricky-list 1`] = `
"\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax Hello world
\\\\end{itemize}


\\\\textbf{hello} \\\\textit{world}



\\\\begin{itemize}
\\\\item\\\\relax hello world
\\\\end{itemize}
"
`;
